{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Table Of Content Python What is Python Variables Data Types Operatos Lists Tuples Sets Dictionaries Conditional Statements For Loop While Loop Functions Exception Handling Moduls File Handling Database Third Party Packages OOP","title":"Table Of Content"},{"location":"#table-of-content","text":"Python What is Python Variables Data Types Operatos Lists Tuples Sets Dictionaries Conditional Statements For Loop While Loop Functions Exception Handling Moduls File Handling Database Third Party Packages OOP","title":"Table Of Content"},{"location":"about/","text":"","title":"About"},{"location":"python/","text":"Table Of Content What is Python","title":"Overview"},{"location":"python/#table-of-content","text":"What is Python","title":"Table Of Content"},{"location":"python/conditional-statements/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 8-DARS IF...ELIF...ELSE.. TARMOQLANISH \ud83d\udccc Shu vaqtgacha yozgan dasturlarimizga e'tibor bersangiz, dasturimiz yuqoridan pastga qarab qatorma-qator bajarilib keldi. Bu chiziqli dastur deyiladi. Ammo ba'zida shartga qarab kodning bir qismidan boshqa qismiga o'tish zarur bo'ladi. Bunday holat \"tarmoqlanish\" deb ataladi. \ud83d\udccc Python dasturlash tilida shart operatorlari ( conditional statements ) dasturda turli vaziyatlarga qarab turli amallarni bajarishga imkon beradi. \u2705 IF \ud83d\udccc Python dasturlash tilida if operatori shartni tekshirish uchun ishlatiladi. Ya'ni, agar biror shart True bo\u2018lsa, unga tegishli kodlar bajariladi. Agar shart False bo\u2018lsa, kod bajarilmaydi. # Bankdagi hisobdagi pul miqdori account_balance = 1500 # Agar balans 1000 dan katta bo\u2018lsa, foydalanuvchi pul yechishi mumkin if account_balance > 1000: print(\"You can withdraw money\") # Foydalanuvchiga ruxsat beriladi # Foydalanuvchining savatidagi umumiy mahsulot narxi total_price = 250 # Agar narx 200 dan katta bo\u2018lsa, bepul yetkazib berish taklif qilinadi if total_price > 200: print(\"You qualify for free shipping\") # Bepul yetkazib berish haqida xabar # Foydalanuvchi kiritgan parol password = \"mysecurepass\" # Agar parol uzunligi 8 belgidan ko\u2018p bo\u2018lsa, kuchli parol deb baholanadi if len(password) > 8: print(\"Your password is strong\") # Kuchli parol haqida xabar \u2705 ELSE \ud83d\udccc Python dasturlash tilida else operatori if dan keyin yoziladi. Agar if dagi False bo;lsa, else ichidagi kodlar bajariladi. # Foydalanuvchi shakarmi tanladi (ha yoki yo'q) wants_sugar = True # Agar foydalanuvchi shakar istasa if wants_sugar: print(\"Adding sugar to your coffee\") # Qahvaga shakar qo\u2018shiladi else: print(\"Preparing your coffee without sugar\") # Shakarsiz qahva tayyorlanadi # Telefon quvvati foizda battery_percentage = 15 # Agar quvvat 20 dan kam bo\u2018lsa, ogohlantirish chiqariladi if battery_percentage < 20: print(\"Battery is low. Please charge your phone.\") # Quvvat kamligi haqida ogohlantirish else: print(\"Battery level is sufficient.\") # Quvvat yetarli # Talabaning olgan bahosi exam_score = 72 # Agar baho 60 yoki undan yuqori bo\u2018lsa, imtihondan o\u2018tgan hisoblanadi if exam_score >= 60: print(\"You passed the exam!\") # O\u2018tdi degan xabar else: print(\"You failed the exam.\") # Yiqildi degan xabar \u2705 LIST BILAN ISHLASH \ud83c\udfaf Onlayn do\u2018konda foydalanuvchi savatida kamida 1 mahsulot borligini va maxsus mahsulot bor-yo\u2018qligini tekshirish: # Xaridor savatidagi mahsulotlar ro'yxati shopping_cart = [\"bread\", \"sugar\", \"apple\"] # Agar savatda kamida bitta mahsulot bo\u2018lsa if shopping_cart: print(\"The cart has items\") # Savatda mahsulot borligi haqida xabar else: print(\"The cart is empty\") # Savat bo\u2018shligi haqida xabar # Agar savatda 'sugar' bo\u2018lsa if \"sugar\" in shopping_cart: print(\"Sugar is in the cart\") # Shakar mavjudligi haqida xabar else: print(\"Sugar is not in the cart\") # Shakar yo\u2018qligi haqida xabar # Agar savatda 5 ta yoki undan ko\u2018p mahsulot bo\u2018lsa, bepul yetkazib berish if len(shopping_cart) >= 5: print(\"Free delivery available\") # Bepul yetkazib berish else: print(\"Delivery charges apply\") # Pullik yetkazib berish \u2705 TUPLE BILAN ISHLASH \ud83c\udfaf Foydalanuvchining geolokatsiyasi asosida joylashuvni aniqlash # Foydalanuvchining geografik joylashuvi (kenglik, uzunlik) user_location = (41.2995, 69.2401) # Toshkent koordinatalari # Agar joylashuv ma'lum bo\u2018lsa (ya'ni tuple bo\u2018sh bo\u2018lmasa) if user_location: print(\"Location detected\") # Joylashuv aniqlandi else: print(\"Location not available\") # Joylashuv topilmadi # Foydalanuvchi O'zbekiston hududida joylashganmi \u2013 kenglik bo\u2018yicha tekshiramiz if 41.0 <= user_location[0] <= 42.0: print(\"User is located in Uzbekistan\") # Foydalanuvchi O\u2018zbekistonda else: print(\"User is outside of Uzbekistan\") # Foydalanuvchi boshqa mamlakatda \u2705 SET BILAN ISHLASH \ud83c\udfaf Saytga kirgan foydalanuvchilar ID raqamlari setda saqlanadi, va admin ularni tekshiradi. # Bugun saytga kirgan foydalanuvchilarning ID raqamlari (takrorlanmaydi) active_user_ids = {101, 202, 303, 404} # Agar kamida bitta foydalanuvchi saytga kirgan bo\u2018lsa if active_user_ids: print(\"Bugun saytga foydalanuvchilar kirgan\") # Foydalanuvchilar bor # Aks holda, hech kim kirmagan bo\u2018ladi else: print(\"Hali hech kim saytga kirmagan\") # Set bo\u2018sh # Agar 202-ID foydalanuvchi kirgan bo\u2018lsa if 202 in active_user_ids: print(\"202-ID foydalanuvchi tizimga kirgan\") # Shu ID topildi else: print(\"202-ID foydalanuvchi hali kirmagan\") # Shu ID yo\u2018q # Bugun kirgan foydalanuvchilar soni 100 dan oshgan bo\u2018lsa if len(active_user_ids) > 100: print(\"Yuqori aktivlik\") # Juda ko\u2018p foydalanuvchi else: print(\"Oddiy kun\") # Odatdagi foydalanuvchi soni \u2705 DICTIONARY BILAN ISHLASH: \ud83c\udfaf Foydalanuvchi registratsiya qilganda u haqidagi ma\u2019lumotlar dictionaryda saqlanadi. # Dictionary: foydalanuvchining asosiy profili user_profile = { \"name\": \"Umid\", \"email\": \"umid@example.com\", \"age\": 23 } # Agar foydalanuvchiga oid ma'lumotlar mavjud bo\u2018lsa if user_profile: print(\"User profile data is available\") # Ma'lumotlar bor else: print(\"No user data found\") # Ma'lumotlar yo\u2018q # Agar email kaliti mavjud bo\u2018lsa if \"email\" in user_profile: print(\"Email is provided\") # Email mavjud else: print(\"Email is missing\") # Email kiritilmagan # Agar foydalanuvchi yoshi 18 yoki undan katta bo\u2018lsa if user_profile.get(\"age\", 0) >= 18: print(\"User is an adult\") # Voyaga yetgan else: print(\"User is a minor\") # Voyaga yetmagan # Profil to\u2018liq deb hisoblanadi, agar kamida 3 ta kalit bo\u2018lsa if len(user_profile) >= 3: print(\"Profile is complete\") # To\u2018liq profil else: print(\"Profile is incomplete\") # To\u2018liq bo\u2018lmagan profil \u2705 ELIF elif \u2014 bu else if degan so\u2018zning qisqargan ko\u2018rinishi. U bir nechta shartlarni ketma-ket tekshirish uchun ishlatiladi. Agar if sharti False bo'lsa, elif sharti tekshiriladi. \ud83c\udfaf Smart uydagi HVAC tizimi xonadagi haroratga qarab qaror qabul qiladi. # Current room temperature in Celsius room_temperature = 28 # Xona harorati, Celsiy bo\u2018yicha # Agar xona juda sovuq bo\u2018lsa (18\u00b0C dan past) if room_temperature < 18: print(\"Heating system should be turned ON\") # Isitish tizimi yoqiladi # Agar xona juda issiq bo\u2018lsa (26\u00b0C dan yuqori) elif room_temperature > 26: print(\"Cooling system should be turned ON\") # Sovutish tizimi yoqiladi # Aks holda, harorat me'yorda else: print(\"Temperature is optimal, no action needed\") # Hech qanday tizim yoqilmaydi \ud83c\udfaf Onlayn do\u2018konda har bir buyurtmaning holatini aniqlash uchun ishlatiladi. # Order status (current stage of delivery process) order_status = \"shipped\" # \"yuborilgan\" degani # Agar buyurtma qabul qilingan bo\u2018lsa if order_status == \"received\": print(\"Your order has been received and will be prepared soon.\") # Buyurtma qabul qilindi # Agar tayyorlanayotgan bo\u2018lsa elif order_status == \"preparing\": print(\"Your order is currently being prepared.\") # Tayyorlanmoqda # Agar yuborilgan bo\u2018lsa elif order_status == \"shipped\": print(\"Your order has been shipped.\") # Yo\u2018lga chiqdi # Agar yetkazilgan bo\u2018lsa elif order_status == \"delivered\": print(\"Your order has been delivered.\") # Yetkazildi # Nomalum holatlar uchun else: print(\"Unknown order status.\") # Noma'lum status \u2705 BIR NECHTA SHARTLARNI BIRGA ISHLATISH \ud83c\udfaf Login tizimi \u2013 foydalanuvchini tekshirish. Foydalanuvchi login va parolni to\u2018g\u2018ri kiritganmi, tekshiramiz. # Foydalanuvchi kiritgan login va parol entered_username = \"umid\" entered_password = \"python123\" # To\u2018g\u2018ri login va parol kiritilgan bo\u2018lsa if entered_username == \"umid\" and entered_password == \"python123\": print(\"Welcome, Umid!\") # Xush kelibsiz! # Login to\u2018g\u2018ri, lekin parol noto\u2018g\u2018ri bo\u2018lsa elif entered_username == \"umid\" and entered_password != \"python123\": print(\"Incorrect password\") # Parol xato # Parol to\u2018g\u2018ri, lekin login noto\u2018g\u2018ri bo\u2018lsa elif entered_username != \"umid\" and entered_password == \"python123\": print(\"Incorrect username\") # Login xato # Ikkalasi ham noto\u2018g\u2018ri bo\u2018lsa else: print(\"Incorrect username and password\") # Ikkalasi ham xato \ud83c\udfaf Ob-havo ilovasi \u2013 kiyim tavsiyasi. Foydalanuvchiga havo haroratiga qarab tavsiya beriladi. # Ob-havo holati: havo harorati va yomg\u2018ir yog\u2018yaptimi yo\u2018qmi temperature = 32 # Havo harorati (\u00b0C) is_raining = False # Yomg\u2018ir yog\u2018ayotgan bo\u2018lsa True, aks holda False # Juda sovuq bo\u2018lsa (0\u00b0C yoki undan past) if temperature <= 0: print(\"It is very cold. Wear warm clothes.\") # Qalin kiyim tavsiya qilinadi # Salqin bo\u2018lsa (1\u00b0C dan 15\u00b0C gacha) elif temperature <= 15: print(\"It's cool outside. A light jacket is recommended.\") # Yengil kurtka kiying # Juda issiq yoki yomg\u2018irli bo\u2018lsa elif temperature >= 30 or is_raining: print(\"Hot or rainy weather \u2013 wear light clothes and carry an umbrella.\") # Soyabon va yengil kiyim # Ob-havo normal bo\u2018lsa else: print(\"The weather is normal. Regular clothes are fine.\") # Oddiy kiyim yetarli \ud83c\udfaf Internet tezligiga qarab videoning sifat darajasi belgilanadi. # Foydalanuvchi internetga ulanmagan bo\u2018lsa, bu True/False qiymatni bildiradi is_connected = True # Internet tezligi (Mbit/s) internet_speed = 2.5 # Agar internetga ulanmagan bo\u2018lsa if not is_connected: print(\"Not connected to the internet\") # Internet yo\u2018q # Juda past tezlikda elif internet_speed < 1: print(\"Video quality: 144p (very low)\") # Juda past sifat # O\u2018rtacha past tezlikda elif internet_speed < 3: print(\"Video quality: 360p (low)\") # Past sifat # O\u2018rta tezlikda elif internet_speed < 6: print(\"Video quality: 720p (medium)\") # O\u2018rtacha sifat # Yuqori tezlikda else: print(\"Video quality: 1080p (high)\") # Yuqori sifat \u2705 NESTED CONDITIONS \ud83d\udccc Shart operatorlarini bir-birining ichiga joylashtirish orqali murakkabroq mantiqiy holatlar yaratish mumkin. \ud83c\udfaf Foydalanuvchi login kiritadi, agar mavjud bo\u2018lsa, yoshi tekshiriladi. Faqat voyaga yetganlarga ruxsat. # Foydalanuvchi nomi (sistemaga kirishga urinayotgan) username = \"umid\" # Foydalanuvchilar ro'yxati (username: age) users = { \"umid\": 21, \"ali\": 17 } # Avvalo foydalanuvchi ro'yxatda bormi \u2013 tekshiramiz if username in users: age = users[username] # Username bo\u2018yicha yoshni olamiz # Agar foydalanuvchi 18 yoki undan katta bo\u2018lsa \u2013 ruxsat beriladi if age >= 18: print(f\"{username.title()} is allowed to access the system.\") # Ruxsat berildi # Agar foydalanuvchi voyaga yetmagan bo\u2018lsa \u2013 ruxsat berilmaydi else: print(f\"{username.title()} is underage. Access denied.\") # Ruxsat yo\u2018q else: print(\"User not found in the system.\") # Bunday foydalanuvchi yo\u2018q \ud83c\udfaf Foydalanuvchi balansiga qarab faqat ruxsat etilgan tranzaksiyani bajarish mumkin. # User's current balance balance = 500_000 # 500 ming so\u2018m # Transaction type: \"withdraw\" (yechish) yoki \"deposit\" (kiritish) transaction_type = \"withdraw\" # Transaction amount (so\u2018mda) amount = 300_000 # Agar foydalanuvchi pul yechmoqchi bo\u2018lsa if transaction_type == \"withdraw\": # Mablag' yetarlimi? Yechishga ruxsat beriladi if balance >= amount: print(f\"{amount} so'm has been successfully withdrawn.\") # Pul yechildi else: print(\"Insufficient balance.\") # Pul yetarli emas # Agar foydalanuvchi balansga pul kiritmoqchi bo\u2018lsa elif transaction_type == \"deposit\": print(f\"{amount} so'm has been added to your balance.\") # Pul kiritildi # Aks holda, tranzaksiya turi noto\u2018g\u2018ri else: print(\"Invalid transaction type.\") # Noma'lum amal \ud83c\udfaf Agar foydalanuvchi o\u2018qituvchi bo\u2018lsa, yangi kurs yarata oladi. Talaba bo\u2018lsa, faqat yozilishi mumkin. # Foydalanuvchining ma'lumotlari (ismi, roli, holati) user = { \"name\": \"Umid\", \"role\": \"student\", # \"student\" yoki \"teacher\" \"active\": True # Foydalanuvchi faolligi } # Agar foydalanuvchi faollashtirilgan bo\u2018lsa if user[\"active\"]: # Agar foydalanuvchi o\u2018qituvchi bo\u2018lsa if user[\"role\"] == \"teacher\": print(\"You can create a new course.\") # Yangi kurs yaratish huquqi bor # Agar foydalanuvchi talaba bo\u2018lsa elif user[\"role\"] == \"student\": print(\"You can enroll in a course.\") # Kursga yozilish huquqi bor # Boshqa noma'lum rollar uchun else: print(\"Your role is not recognized.\") # Rol noto\u2018g\u2018ri yoki mavjud emas # Agar foydalanuvchi faollashtirilmagan bo\u2018lsa else: print(\"User is not active.\") # Foydalanuvchi faol emas \u2705 MULTIPLE LEVELS OF NESTED CONDITIONAL STATEMENTS \ud83c\udfaf Ma'lumotlar bazasida foydalanuvchi ro\u2018yxatdan o\u2018tganmi, email tasdiqlanganmi va yoshi to\u2018liqmi \u2014 shu tartibda tekshiriladi: # Foydalanuvchining ro\u2018yxatdan o\u2018tganligi, email holati va yoshi user = { \"username\": \"umid\", \"registered\": True, # Foydalanuvchi ro'yxatdan o'tganmi? \"email_verified\": True, # Email tasdiqlanganmi? \"age\": 19 # Foydalanuvchi yoshi } # 1. Avval foydalanuvchi ro\u2018yxatdan o\u2018tganligini tekshiramiz if user[\"registered\"]: # 2. Email tasdiqlanganligini tekshiramiz if user[\"email_verified\"]: # 3. Yoshi 18 yoki undan katta bo\u2018lsa \u2013 to\u2018liq ruxsat beriladi if user[\"age\"] >= 18: print(\"Full access granted to the system.\") # To\u2018liq ruxsat else: print(\"Access denied. You must be at least 18 years old.\") # Yoshi yetmaydi else: print(\"Email not verified. Please verify your email first.\") # Email tasdiqlanmagan else: print(\"You are not registered. Please sign up first.\") # Ro\u2018yxatdan o\u2018tmagan \ud83c\udfaf Avtomobil ijarasi faqat quyidagi shartlar bajarilganda mumkin: Foydalanuvchi ro\u2018yxatdan o\u2018tgan Haydovchilik guvohnomasi mavjud Yoshi 21 dan katta # User data: registration, license availability, and age user = { \"registered\": True, # Foydalanuvchi ro\u2018yxatdan o\u2018tganmi? \"has_license\": True, # Haydovchilik guvohnomasi bormi? \"age\": 25 # Foydalanuvchining yoshi } # 1. Foydalanuvchi ro\u2018yxatdan o\u2018tgan bo\u2018lishi kerak if user[\"registered\"]: # 2. Haydovchilik guvohnomasi mavjud bo\u2018lishi kerak if user[\"has_license\"]: # 3. Yoshi 21 dan katta yoki teng bo\u2018lishi kerak if user[\"age\"] >= 21: print(\"Car rental approved.\") # Ijaraga ruxsat berildi else: print(\"You must be at least 21 years old to rent a car.\") # Yoshi yetmaydi else: print(\"You must have a valid driver\u2019s license.\") # Guvohnoma yo\u2018q else: print(\"Please register before renting a car.\") # Ro\u2018yxatdan o\u2018tmagan \u2705 AMALIYOT \u2705 1-topshiriq: Foydalanuvchidan yoshini so\u2018rang. Agar 18 dan kichik bo\u2018lsa \"Voyaga yetmagan\" , 18 yoki undan katta bo\u2018lsa \"Voyaga yetgan\" deb chiqaring. \u2705 2-topshiriq: Quyidagi o\u2018zgaruvchi berilgan: score = 87 Agar score 90 va undan yuqori bo\u2018lsa \"A\" , 80-89 oralig\u2018ida bo\u2018lsa \"B\" , 70-79 oralig\u2018ida bo\u2018lsa \"C\" , boshqacha bo\u2018lsa \"D\" baho chiqaring. \u2705 3-topshiriq: Quyidagi o\u2018zgaruvchi berilgan: is_raining = True Agar is_raining True bo\u2018lsa \"Soyabon oling\" , aks holda \"Yomg\u2018ir yo\u2018q\" deb chiqaring. \u2705 4-topshiriq: Quyidagi ro\u2018yxat berilgan: fruits = [\"olma\", \"banan\", \"gilos\"] Agar ro\u2018yxatda \"banan\" bo\u2018lsa \"Banan bor\" , bo\u2018lmasa \"Banan yo\u2018q\" deb chiqaring. \u2705 5-topshiriq: Ro\u2018yxatda kamida 5 ta element bo\u2018lsa \"Ro\u2018yxat to\u2018la\" , aks holda \"Ro\u2018yxat qisqa\" deb chiqaring: nums = [1, 4, 7, 10] \u2705 6-topshiriq: Tuple berilgan: location = (41.2, 69.1) Agar location bo\u2018sh bo\u2018lmasa \"Joylashuv aniqlangan\" , bo\u2018sh bo\u2018lsa \"Joylashuv yo\u2018q\" deb chiqaring. \u2705 7-topshiriq: Set berilgan: active_ids = {1, 2, 3} Agar 2-ID setda mavjud bo\u2018lsa \"2-ID mavjud\" , bo\u2018lmasa \"2-ID yo\u2018q\" deb chiqaring. \u2705 8-topshiriq: Quyidagi dictionary berilgan: profile = {\"name\": \"Alim\", \"age\": 15} Agar age 18 yoki undan katta bo\u2018lsa \"Voyaga yetgan\" , aks holda \"Voyaga yetmagan\" deb chiqaring. \u2705 9-topshiriq: Quyidagi o\u2018zgaruvchilar berilgan: is_logged_in = True is_admin = False Agar foydalanuvchi tizimga kirgan va admin bo\u2018lsa \"Admin panelga xush kelibsiz\" , faqat tizimga kirgan bo\u2018lsa \"Foydalanuvchi paneli\" , har ikkisi ham False bo\u2018lsa \"Kirish talab qilinadi\" . \u2705 10-topshiriq: Quyidagi kodni if...elif...else bilan yozing: temp o\u2018zgaruvchisi bo\u2018yicha: - 0 dan past \"Muzlab qolgan\" - 0-15 oralig\u2018ida \"Salqin\" - 16-30 oralig\u2018ida \"Me'yoriy\" - 30 dan yuqori \"Issiq\" temp = 23 \u2705 11-topshiriq: Ro\u2018yxatda \"python\" va \"sql\" bo\u2018lsa \"Ikkalasi ham bor\" , faqat bittasi bo\u2018lsa \"Bittasi bor\" , ikkalasi ham bo\u2018lmasa \"Ikkalasi ham yo\u2018q\" deb chiqaring: skills = [\"html\", \"python\", \"css\"] \u2705 12-topshiriq: Foydalanuvchi parol kiritadi. Agar parol uzunligi 10 dan katta bo\u2018lsa \"Kuchli parol\" , 6-10 oralig\u2018ida bo\u2018lsa \"O\u2018rtacha parol\" , 6 dan kam bo\u2018lsa \"Juda qisqa\" . \u2705 13-topshiriq: Quyidagi dictionary berilgan: user = {\"username\": \"nargiza\", \"active\": True, \"role\": \"student\"} Agar user active va roli \"teacher\" bo\u2018lsa \"Yangi kurs yarata oladi\" , active va roli \"student\" bo\u2018lsa \"Faqat kursga yozila oladi\" , aks holda \"Ruxsat yo\u2018q\" . \u2705 14-topshiriq: Quyidagi o\u2018zgaruvchilar berilgan: speed = 7.2 is_connected = True Agar is_connected False bo\u2018lsa \"Internet yo\u2018q\" , else if speed < 1 bo\u2018lsa \"Eng past sifat\" , speed < 5 bo\u2018lsa \"O\u2018rtacha sifat\" , else \"Yuqori sifat\" . \u2705 15-topshiriq: Quyidagi dictionarylar orqali avtomobil ijarasi uchun quyidagilarni tekshiring: - \"registered\": True - \"has_license\": True - \"age\": 19 Agar hammasi to\u2018g\u2018ri bo\u2018lsa \"Ijaraga ruxsat\" , aks holda qaysi shart bajarilmaganini chiqaring.","title":"Conditional Statements"},{"location":"python/conditional-statements/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/conditional-statements/#8-dars-ifelifelse","text":"","title":"\ud83e\udde9 8-DARS IF...ELIF...ELSE.."},{"location":"python/conditional-statements/#tarmoqlanish","text":"\ud83d\udccc Shu vaqtgacha yozgan dasturlarimizga e'tibor bersangiz, dasturimiz yuqoridan pastga qarab qatorma-qator bajarilib keldi. Bu chiziqli dastur deyiladi. Ammo ba'zida shartga qarab kodning bir qismidan boshqa qismiga o'tish zarur bo'ladi. Bunday holat \"tarmoqlanish\" deb ataladi. \ud83d\udccc Python dasturlash tilida shart operatorlari ( conditional statements ) dasturda turli vaziyatlarga qarab turli amallarni bajarishga imkon beradi.","title":"TARMOQLANISH"},{"location":"python/conditional-statements/#if","text":"\ud83d\udccc Python dasturlash tilida if operatori shartni tekshirish uchun ishlatiladi. Ya'ni, agar biror shart True bo\u2018lsa, unga tegishli kodlar bajariladi. Agar shart False bo\u2018lsa, kod bajarilmaydi. # Bankdagi hisobdagi pul miqdori account_balance = 1500 # Agar balans 1000 dan katta bo\u2018lsa, foydalanuvchi pul yechishi mumkin if account_balance > 1000: print(\"You can withdraw money\") # Foydalanuvchiga ruxsat beriladi # Foydalanuvchining savatidagi umumiy mahsulot narxi total_price = 250 # Agar narx 200 dan katta bo\u2018lsa, bepul yetkazib berish taklif qilinadi if total_price > 200: print(\"You qualify for free shipping\") # Bepul yetkazib berish haqida xabar # Foydalanuvchi kiritgan parol password = \"mysecurepass\" # Agar parol uzunligi 8 belgidan ko\u2018p bo\u2018lsa, kuchli parol deb baholanadi if len(password) > 8: print(\"Your password is strong\") # Kuchli parol haqida xabar","title":"\u2705 IF"},{"location":"python/conditional-statements/#else","text":"\ud83d\udccc Python dasturlash tilida else operatori if dan keyin yoziladi. Agar if dagi False bo;lsa, else ichidagi kodlar bajariladi. # Foydalanuvchi shakarmi tanladi (ha yoki yo'q) wants_sugar = True # Agar foydalanuvchi shakar istasa if wants_sugar: print(\"Adding sugar to your coffee\") # Qahvaga shakar qo\u2018shiladi else: print(\"Preparing your coffee without sugar\") # Shakarsiz qahva tayyorlanadi # Telefon quvvati foizda battery_percentage = 15 # Agar quvvat 20 dan kam bo\u2018lsa, ogohlantirish chiqariladi if battery_percentage < 20: print(\"Battery is low. Please charge your phone.\") # Quvvat kamligi haqida ogohlantirish else: print(\"Battery level is sufficient.\") # Quvvat yetarli # Talabaning olgan bahosi exam_score = 72 # Agar baho 60 yoki undan yuqori bo\u2018lsa, imtihondan o\u2018tgan hisoblanadi if exam_score >= 60: print(\"You passed the exam!\") # O\u2018tdi degan xabar else: print(\"You failed the exam.\") # Yiqildi degan xabar","title":"\u2705 ELSE"},{"location":"python/conditional-statements/#list-bilan-ishlash","text":"\ud83c\udfaf Onlayn do\u2018konda foydalanuvchi savatida kamida 1 mahsulot borligini va maxsus mahsulot bor-yo\u2018qligini tekshirish: # Xaridor savatidagi mahsulotlar ro'yxati shopping_cart = [\"bread\", \"sugar\", \"apple\"] # Agar savatda kamida bitta mahsulot bo\u2018lsa if shopping_cart: print(\"The cart has items\") # Savatda mahsulot borligi haqida xabar else: print(\"The cart is empty\") # Savat bo\u2018shligi haqida xabar # Agar savatda 'sugar' bo\u2018lsa if \"sugar\" in shopping_cart: print(\"Sugar is in the cart\") # Shakar mavjudligi haqida xabar else: print(\"Sugar is not in the cart\") # Shakar yo\u2018qligi haqida xabar # Agar savatda 5 ta yoki undan ko\u2018p mahsulot bo\u2018lsa, bepul yetkazib berish if len(shopping_cart) >= 5: print(\"Free delivery available\") # Bepul yetkazib berish else: print(\"Delivery charges apply\") # Pullik yetkazib berish","title":"\u2705 LIST BILAN ISHLASH"},{"location":"python/conditional-statements/#tuple-bilan-ishlash","text":"\ud83c\udfaf Foydalanuvchining geolokatsiyasi asosida joylashuvni aniqlash # Foydalanuvchining geografik joylashuvi (kenglik, uzunlik) user_location = (41.2995, 69.2401) # Toshkent koordinatalari # Agar joylashuv ma'lum bo\u2018lsa (ya'ni tuple bo\u2018sh bo\u2018lmasa) if user_location: print(\"Location detected\") # Joylashuv aniqlandi else: print(\"Location not available\") # Joylashuv topilmadi # Foydalanuvchi O'zbekiston hududida joylashganmi \u2013 kenglik bo\u2018yicha tekshiramiz if 41.0 <= user_location[0] <= 42.0: print(\"User is located in Uzbekistan\") # Foydalanuvchi O\u2018zbekistonda else: print(\"User is outside of Uzbekistan\") # Foydalanuvchi boshqa mamlakatda","title":"\u2705 TUPLE BILAN ISHLASH"},{"location":"python/conditional-statements/#set-bilan-ishlash","text":"\ud83c\udfaf Saytga kirgan foydalanuvchilar ID raqamlari setda saqlanadi, va admin ularni tekshiradi. # Bugun saytga kirgan foydalanuvchilarning ID raqamlari (takrorlanmaydi) active_user_ids = {101, 202, 303, 404} # Agar kamida bitta foydalanuvchi saytga kirgan bo\u2018lsa if active_user_ids: print(\"Bugun saytga foydalanuvchilar kirgan\") # Foydalanuvchilar bor # Aks holda, hech kim kirmagan bo\u2018ladi else: print(\"Hali hech kim saytga kirmagan\") # Set bo\u2018sh # Agar 202-ID foydalanuvchi kirgan bo\u2018lsa if 202 in active_user_ids: print(\"202-ID foydalanuvchi tizimga kirgan\") # Shu ID topildi else: print(\"202-ID foydalanuvchi hali kirmagan\") # Shu ID yo\u2018q # Bugun kirgan foydalanuvchilar soni 100 dan oshgan bo\u2018lsa if len(active_user_ids) > 100: print(\"Yuqori aktivlik\") # Juda ko\u2018p foydalanuvchi else: print(\"Oddiy kun\") # Odatdagi foydalanuvchi soni","title":"\u2705 SET BILAN ISHLASH"},{"location":"python/conditional-statements/#dictionary-bilan-ishlash","text":"\ud83c\udfaf Foydalanuvchi registratsiya qilganda u haqidagi ma\u2019lumotlar dictionaryda saqlanadi. # Dictionary: foydalanuvchining asosiy profili user_profile = { \"name\": \"Umid\", \"email\": \"umid@example.com\", \"age\": 23 } # Agar foydalanuvchiga oid ma'lumotlar mavjud bo\u2018lsa if user_profile: print(\"User profile data is available\") # Ma'lumotlar bor else: print(\"No user data found\") # Ma'lumotlar yo\u2018q # Agar email kaliti mavjud bo\u2018lsa if \"email\" in user_profile: print(\"Email is provided\") # Email mavjud else: print(\"Email is missing\") # Email kiritilmagan # Agar foydalanuvchi yoshi 18 yoki undan katta bo\u2018lsa if user_profile.get(\"age\", 0) >= 18: print(\"User is an adult\") # Voyaga yetgan else: print(\"User is a minor\") # Voyaga yetmagan # Profil to\u2018liq deb hisoblanadi, agar kamida 3 ta kalit bo\u2018lsa if len(user_profile) >= 3: print(\"Profile is complete\") # To\u2018liq profil else: print(\"Profile is incomplete\") # To\u2018liq bo\u2018lmagan profil","title":"\u2705 DICTIONARY BILAN ISHLASH:"},{"location":"python/conditional-statements/#elif","text":"elif \u2014 bu else if degan so\u2018zning qisqargan ko\u2018rinishi. U bir nechta shartlarni ketma-ket tekshirish uchun ishlatiladi. Agar if sharti False bo'lsa, elif sharti tekshiriladi. \ud83c\udfaf Smart uydagi HVAC tizimi xonadagi haroratga qarab qaror qabul qiladi. # Current room temperature in Celsius room_temperature = 28 # Xona harorati, Celsiy bo\u2018yicha # Agar xona juda sovuq bo\u2018lsa (18\u00b0C dan past) if room_temperature < 18: print(\"Heating system should be turned ON\") # Isitish tizimi yoqiladi # Agar xona juda issiq bo\u2018lsa (26\u00b0C dan yuqori) elif room_temperature > 26: print(\"Cooling system should be turned ON\") # Sovutish tizimi yoqiladi # Aks holda, harorat me'yorda else: print(\"Temperature is optimal, no action needed\") # Hech qanday tizim yoqilmaydi \ud83c\udfaf Onlayn do\u2018konda har bir buyurtmaning holatini aniqlash uchun ishlatiladi. # Order status (current stage of delivery process) order_status = \"shipped\" # \"yuborilgan\" degani # Agar buyurtma qabul qilingan bo\u2018lsa if order_status == \"received\": print(\"Your order has been received and will be prepared soon.\") # Buyurtma qabul qilindi # Agar tayyorlanayotgan bo\u2018lsa elif order_status == \"preparing\": print(\"Your order is currently being prepared.\") # Tayyorlanmoqda # Agar yuborilgan bo\u2018lsa elif order_status == \"shipped\": print(\"Your order has been shipped.\") # Yo\u2018lga chiqdi # Agar yetkazilgan bo\u2018lsa elif order_status == \"delivered\": print(\"Your order has been delivered.\") # Yetkazildi # Nomalum holatlar uchun else: print(\"Unknown order status.\") # Noma'lum status","title":"\u2705 ELIF"},{"location":"python/conditional-statements/#bir-nechta-shartlarni-birga-ishlatish","text":"\ud83c\udfaf Login tizimi \u2013 foydalanuvchini tekshirish. Foydalanuvchi login va parolni to\u2018g\u2018ri kiritganmi, tekshiramiz. # Foydalanuvchi kiritgan login va parol entered_username = \"umid\" entered_password = \"python123\" # To\u2018g\u2018ri login va parol kiritilgan bo\u2018lsa if entered_username == \"umid\" and entered_password == \"python123\": print(\"Welcome, Umid!\") # Xush kelibsiz! # Login to\u2018g\u2018ri, lekin parol noto\u2018g\u2018ri bo\u2018lsa elif entered_username == \"umid\" and entered_password != \"python123\": print(\"Incorrect password\") # Parol xato # Parol to\u2018g\u2018ri, lekin login noto\u2018g\u2018ri bo\u2018lsa elif entered_username != \"umid\" and entered_password == \"python123\": print(\"Incorrect username\") # Login xato # Ikkalasi ham noto\u2018g\u2018ri bo\u2018lsa else: print(\"Incorrect username and password\") # Ikkalasi ham xato \ud83c\udfaf Ob-havo ilovasi \u2013 kiyim tavsiyasi. Foydalanuvchiga havo haroratiga qarab tavsiya beriladi. # Ob-havo holati: havo harorati va yomg\u2018ir yog\u2018yaptimi yo\u2018qmi temperature = 32 # Havo harorati (\u00b0C) is_raining = False # Yomg\u2018ir yog\u2018ayotgan bo\u2018lsa True, aks holda False # Juda sovuq bo\u2018lsa (0\u00b0C yoki undan past) if temperature <= 0: print(\"It is very cold. Wear warm clothes.\") # Qalin kiyim tavsiya qilinadi # Salqin bo\u2018lsa (1\u00b0C dan 15\u00b0C gacha) elif temperature <= 15: print(\"It's cool outside. A light jacket is recommended.\") # Yengil kurtka kiying # Juda issiq yoki yomg\u2018irli bo\u2018lsa elif temperature >= 30 or is_raining: print(\"Hot or rainy weather \u2013 wear light clothes and carry an umbrella.\") # Soyabon va yengil kiyim # Ob-havo normal bo\u2018lsa else: print(\"The weather is normal. Regular clothes are fine.\") # Oddiy kiyim yetarli \ud83c\udfaf Internet tezligiga qarab videoning sifat darajasi belgilanadi. # Foydalanuvchi internetga ulanmagan bo\u2018lsa, bu True/False qiymatni bildiradi is_connected = True # Internet tezligi (Mbit/s) internet_speed = 2.5 # Agar internetga ulanmagan bo\u2018lsa if not is_connected: print(\"Not connected to the internet\") # Internet yo\u2018q # Juda past tezlikda elif internet_speed < 1: print(\"Video quality: 144p (very low)\") # Juda past sifat # O\u2018rtacha past tezlikda elif internet_speed < 3: print(\"Video quality: 360p (low)\") # Past sifat # O\u2018rta tezlikda elif internet_speed < 6: print(\"Video quality: 720p (medium)\") # O\u2018rtacha sifat # Yuqori tezlikda else: print(\"Video quality: 1080p (high)\") # Yuqori sifat","title":"\u2705 BIR NECHTA SHARTLARNI BIRGA ISHLATISH"},{"location":"python/conditional-statements/#nested-conditions","text":"\ud83d\udccc Shart operatorlarini bir-birining ichiga joylashtirish orqali murakkabroq mantiqiy holatlar yaratish mumkin. \ud83c\udfaf Foydalanuvchi login kiritadi, agar mavjud bo\u2018lsa, yoshi tekshiriladi. Faqat voyaga yetganlarga ruxsat. # Foydalanuvchi nomi (sistemaga kirishga urinayotgan) username = \"umid\" # Foydalanuvchilar ro'yxati (username: age) users = { \"umid\": 21, \"ali\": 17 } # Avvalo foydalanuvchi ro'yxatda bormi \u2013 tekshiramiz if username in users: age = users[username] # Username bo\u2018yicha yoshni olamiz # Agar foydalanuvchi 18 yoki undan katta bo\u2018lsa \u2013 ruxsat beriladi if age >= 18: print(f\"{username.title()} is allowed to access the system.\") # Ruxsat berildi # Agar foydalanuvchi voyaga yetmagan bo\u2018lsa \u2013 ruxsat berilmaydi else: print(f\"{username.title()} is underage. Access denied.\") # Ruxsat yo\u2018q else: print(\"User not found in the system.\") # Bunday foydalanuvchi yo\u2018q \ud83c\udfaf Foydalanuvchi balansiga qarab faqat ruxsat etilgan tranzaksiyani bajarish mumkin. # User's current balance balance = 500_000 # 500 ming so\u2018m # Transaction type: \"withdraw\" (yechish) yoki \"deposit\" (kiritish) transaction_type = \"withdraw\" # Transaction amount (so\u2018mda) amount = 300_000 # Agar foydalanuvchi pul yechmoqchi bo\u2018lsa if transaction_type == \"withdraw\": # Mablag' yetarlimi? Yechishga ruxsat beriladi if balance >= amount: print(f\"{amount} so'm has been successfully withdrawn.\") # Pul yechildi else: print(\"Insufficient balance.\") # Pul yetarli emas # Agar foydalanuvchi balansga pul kiritmoqchi bo\u2018lsa elif transaction_type == \"deposit\": print(f\"{amount} so'm has been added to your balance.\") # Pul kiritildi # Aks holda, tranzaksiya turi noto\u2018g\u2018ri else: print(\"Invalid transaction type.\") # Noma'lum amal \ud83c\udfaf Agar foydalanuvchi o\u2018qituvchi bo\u2018lsa, yangi kurs yarata oladi. Talaba bo\u2018lsa, faqat yozilishi mumkin. # Foydalanuvchining ma'lumotlari (ismi, roli, holati) user = { \"name\": \"Umid\", \"role\": \"student\", # \"student\" yoki \"teacher\" \"active\": True # Foydalanuvchi faolligi } # Agar foydalanuvchi faollashtirilgan bo\u2018lsa if user[\"active\"]: # Agar foydalanuvchi o\u2018qituvchi bo\u2018lsa if user[\"role\"] == \"teacher\": print(\"You can create a new course.\") # Yangi kurs yaratish huquqi bor # Agar foydalanuvchi talaba bo\u2018lsa elif user[\"role\"] == \"student\": print(\"You can enroll in a course.\") # Kursga yozilish huquqi bor # Boshqa noma'lum rollar uchun else: print(\"Your role is not recognized.\") # Rol noto\u2018g\u2018ri yoki mavjud emas # Agar foydalanuvchi faollashtirilmagan bo\u2018lsa else: print(\"User is not active.\") # Foydalanuvchi faol emas","title":"\u2705 NESTED CONDITIONS"},{"location":"python/conditional-statements/#multiple-levels-of-nested-conditional-statements","text":"\ud83c\udfaf Ma'lumotlar bazasida foydalanuvchi ro\u2018yxatdan o\u2018tganmi, email tasdiqlanganmi va yoshi to\u2018liqmi \u2014 shu tartibda tekshiriladi: # Foydalanuvchining ro\u2018yxatdan o\u2018tganligi, email holati va yoshi user = { \"username\": \"umid\", \"registered\": True, # Foydalanuvchi ro'yxatdan o'tganmi? \"email_verified\": True, # Email tasdiqlanganmi? \"age\": 19 # Foydalanuvchi yoshi } # 1. Avval foydalanuvchi ro\u2018yxatdan o\u2018tganligini tekshiramiz if user[\"registered\"]: # 2. Email tasdiqlanganligini tekshiramiz if user[\"email_verified\"]: # 3. Yoshi 18 yoki undan katta bo\u2018lsa \u2013 to\u2018liq ruxsat beriladi if user[\"age\"] >= 18: print(\"Full access granted to the system.\") # To\u2018liq ruxsat else: print(\"Access denied. You must be at least 18 years old.\") # Yoshi yetmaydi else: print(\"Email not verified. Please verify your email first.\") # Email tasdiqlanmagan else: print(\"You are not registered. Please sign up first.\") # Ro\u2018yxatdan o\u2018tmagan \ud83c\udfaf Avtomobil ijarasi faqat quyidagi shartlar bajarilganda mumkin: Foydalanuvchi ro\u2018yxatdan o\u2018tgan Haydovchilik guvohnomasi mavjud Yoshi 21 dan katta # User data: registration, license availability, and age user = { \"registered\": True, # Foydalanuvchi ro\u2018yxatdan o\u2018tganmi? \"has_license\": True, # Haydovchilik guvohnomasi bormi? \"age\": 25 # Foydalanuvchining yoshi } # 1. Foydalanuvchi ro\u2018yxatdan o\u2018tgan bo\u2018lishi kerak if user[\"registered\"]: # 2. Haydovchilik guvohnomasi mavjud bo\u2018lishi kerak if user[\"has_license\"]: # 3. Yoshi 21 dan katta yoki teng bo\u2018lishi kerak if user[\"age\"] >= 21: print(\"Car rental approved.\") # Ijaraga ruxsat berildi else: print(\"You must be at least 21 years old to rent a car.\") # Yoshi yetmaydi else: print(\"You must have a valid driver\u2019s license.\") # Guvohnoma yo\u2018q else: print(\"Please register before renting a car.\") # Ro\u2018yxatdan o\u2018tmagan","title":"\u2705 MULTIPLE LEVELS OF NESTED CONDITIONAL STATEMENTS"},{"location":"python/conditional-statements/#amaliyot","text":"","title":"\u2705 AMALIYOT"},{"location":"python/conditional-statements/#1-topshiriq","text":"Foydalanuvchidan yoshini so\u2018rang. Agar 18 dan kichik bo\u2018lsa \"Voyaga yetmagan\" , 18 yoki undan katta bo\u2018lsa \"Voyaga yetgan\" deb chiqaring.","title":"\u2705 1-topshiriq:"},{"location":"python/conditional-statements/#2-topshiriq","text":"Quyidagi o\u2018zgaruvchi berilgan: score = 87 Agar score 90 va undan yuqori bo\u2018lsa \"A\" , 80-89 oralig\u2018ida bo\u2018lsa \"B\" , 70-79 oralig\u2018ida bo\u2018lsa \"C\" , boshqacha bo\u2018lsa \"D\" baho chiqaring.","title":"\u2705 2-topshiriq:"},{"location":"python/conditional-statements/#3-topshiriq","text":"Quyidagi o\u2018zgaruvchi berilgan: is_raining = True Agar is_raining True bo\u2018lsa \"Soyabon oling\" , aks holda \"Yomg\u2018ir yo\u2018q\" deb chiqaring.","title":"\u2705 3-topshiriq:"},{"location":"python/conditional-statements/#4-topshiriq","text":"Quyidagi ro\u2018yxat berilgan: fruits = [\"olma\", \"banan\", \"gilos\"] Agar ro\u2018yxatda \"banan\" bo\u2018lsa \"Banan bor\" , bo\u2018lmasa \"Banan yo\u2018q\" deb chiqaring.","title":"\u2705 4-topshiriq:"},{"location":"python/conditional-statements/#5-topshiriq","text":"Ro\u2018yxatda kamida 5 ta element bo\u2018lsa \"Ro\u2018yxat to\u2018la\" , aks holda \"Ro\u2018yxat qisqa\" deb chiqaring: nums = [1, 4, 7, 10]","title":"\u2705 5-topshiriq:"},{"location":"python/conditional-statements/#6-topshiriq","text":"Tuple berilgan: location = (41.2, 69.1) Agar location bo\u2018sh bo\u2018lmasa \"Joylashuv aniqlangan\" , bo\u2018sh bo\u2018lsa \"Joylashuv yo\u2018q\" deb chiqaring.","title":"\u2705 6-topshiriq:"},{"location":"python/conditional-statements/#7-topshiriq","text":"Set berilgan: active_ids = {1, 2, 3} Agar 2-ID setda mavjud bo\u2018lsa \"2-ID mavjud\" , bo\u2018lmasa \"2-ID yo\u2018q\" deb chiqaring.","title":"\u2705 7-topshiriq:"},{"location":"python/conditional-statements/#8-topshiriq","text":"Quyidagi dictionary berilgan: profile = {\"name\": \"Alim\", \"age\": 15} Agar age 18 yoki undan katta bo\u2018lsa \"Voyaga yetgan\" , aks holda \"Voyaga yetmagan\" deb chiqaring.","title":"\u2705 8-topshiriq:"},{"location":"python/conditional-statements/#9-topshiriq","text":"Quyidagi o\u2018zgaruvchilar berilgan: is_logged_in = True is_admin = False Agar foydalanuvchi tizimga kirgan va admin bo\u2018lsa \"Admin panelga xush kelibsiz\" , faqat tizimga kirgan bo\u2018lsa \"Foydalanuvchi paneli\" , har ikkisi ham False bo\u2018lsa \"Kirish talab qilinadi\" .","title":"\u2705 9-topshiriq:"},{"location":"python/conditional-statements/#10-topshiriq","text":"Quyidagi kodni if...elif...else bilan yozing: temp o\u2018zgaruvchisi bo\u2018yicha: - 0 dan past \"Muzlab qolgan\" - 0-15 oralig\u2018ida \"Salqin\" - 16-30 oralig\u2018ida \"Me'yoriy\" - 30 dan yuqori \"Issiq\" temp = 23","title":"\u2705 10-topshiriq:"},{"location":"python/conditional-statements/#11-topshiriq","text":"Ro\u2018yxatda \"python\" va \"sql\" bo\u2018lsa \"Ikkalasi ham bor\" , faqat bittasi bo\u2018lsa \"Bittasi bor\" , ikkalasi ham bo\u2018lmasa \"Ikkalasi ham yo\u2018q\" deb chiqaring: skills = [\"html\", \"python\", \"css\"]","title":"\u2705 11-topshiriq:"},{"location":"python/conditional-statements/#12-topshiriq","text":"Foydalanuvchi parol kiritadi. Agar parol uzunligi 10 dan katta bo\u2018lsa \"Kuchli parol\" , 6-10 oralig\u2018ida bo\u2018lsa \"O\u2018rtacha parol\" , 6 dan kam bo\u2018lsa \"Juda qisqa\" .","title":"\u2705 12-topshiriq:"},{"location":"python/conditional-statements/#13-topshiriq","text":"Quyidagi dictionary berilgan: user = {\"username\": \"nargiza\", \"active\": True, \"role\": \"student\"} Agar user active va roli \"teacher\" bo\u2018lsa \"Yangi kurs yarata oladi\" , active va roli \"student\" bo\u2018lsa \"Faqat kursga yozila oladi\" , aks holda \"Ruxsat yo\u2018q\" .","title":"\u2705 13-topshiriq:"},{"location":"python/conditional-statements/#14-topshiriq","text":"Quyidagi o\u2018zgaruvchilar berilgan: speed = 7.2 is_connected = True Agar is_connected False bo\u2018lsa \"Internet yo\u2018q\" , else if speed < 1 bo\u2018lsa \"Eng past sifat\" , speed < 5 bo\u2018lsa \"O\u2018rtacha sifat\" , else \"Yuqori sifat\" .","title":"\u2705 14-topshiriq:"},{"location":"python/conditional-statements/#15-topshiriq","text":"Quyidagi dictionarylar orqali avtomobil ijarasi uchun quyidagilarni tekshiring: - \"registered\": True - \"has_license\": True - \"age\": 19 Agar hammasi to\u2018g\u2018ri bo\u2018lsa \"Ijaraga ruxsat\" , aks holda qaysi shart bajarilmaganini chiqaring.","title":"\u2705 15-topshiriq:"},{"location":"python/data-types/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 2-DARS DATA TYPES \u2705 MA'LUMOT TURLARI \ud83d\udccc Python dasturlash tilida har bir qiymat (value) \u2014 o\u2018zining ma'lumot turiga (data type) ega. Bu tur qiymatga qanday ishlov berishni aniqlaydi. \ud83d\udccc Python dasturlash tilida 8 ta ma'lumot turi bor, ular quyidagilar: Definition Type Text Type str Numeric Types int , float , complex Sequence Types list , tuple , range Mapping Type dict Set Types set , frozenset Boolean Type bool Binary Types bytes , bytearray , memoryview None Type NoneType \u2705 STRING \ud83d\udccc String \u2014 bu matnli ma\u2019lumotlarni ifodalovchi ma\u2019lumot turi. Ya\u2019ni, harflar, raqamlar, bo\u2018sh joy, belgilardan tashkil topgan qator (yoki matn). \ud83d\udccc Pythonda stringlar ikki yoki uchta qo\u2018shtirnoq (\" \") yoki tirtirnoq (' ') bilan yoziladi. # Double quotes \u2014 ikki tirnoq (\" \") bilan yozilgan oddiy string text = \"Hello world\" print(text) # Single quotes \u2014 bitta tirnoq (' ') bilan yozilgan oddiy string text = 'Hello world' print(text) # Triple double quotes \u2014 uchta ikki tirnoq (\"\"\" \"\"\") bilan yozilgan ko\u2018p qatorli matn (multiline string) text = \"\"\"This is a multiline string.\"\"\" print(text) # Triple single quotes \u2014 uchta bitta tirnoq (''' ''') bilan yozilgan ko\u2018p qatorli matn (multiline string) text = '''This is also a multiline string.''' print(text) \u2747\ufe0f STRING USTIDA AMALLAR \ud83d\udccc Matnlarni qo'shish uchun + operatoridan foydalanamiz. # '+' operatori yordamida ikki yoki undan ortiq stringlarni birlashtirish mumkin name = \"Umid\" print(\"Mening ismim \" + name) # Natija: Mening ismim Umid # Qo\u2018shishda so\u2018zlar orasiga bo\u2018sh joy (space) qo\u2018yish kerak, aks holda ular bir-biriga yopishib qoladi first_name = \"Umid\" last_name = \"G'aybullayev\" print(first_name + last_name) # Natija: UmidG'aybullayev (bo\u2018shliq yo\u2018q) # To\u2018g\u2018ri natija uchun so\u2018zlar orasiga bo\u2018sh joy qo\u2018shamiz print(first_name + \" \" + last_name) # Natija: Umid G'aybullayev \u2747\ufe0f STRING UZUNLIGINI ANIQLASH \ud83d\udccc String uzunligi \u2014 bu stringdagi belgilar (characters) soni. Belgilarga harflar, raqamlar, bo\u2018sh joylar (spaces) va maxsus belgilar kiradi. \ud83d\udccc String uzunligini topish uchun len() funksiyasidan foydalanamiz. # len() funksiyasi yordamida string uzunligini aniqlaymiz text = \"Hello, World!\" # text o'zgaruvchisidagi string uzunligini len() yordamida o'lchaymiz length = len(text) # Natija: 13 # Natijani ekranga chiqaramiz print(length) \u2747\ufe0f STRING E'LEMENTLARIGA MUROJAT QILISH \ud83d\udccc String ichidan o'zimizga kerak bo'lgan e'lementlarni ajratib olish uchun quyidagi usuldan foydalanamiz: # String ichidan kerakli elementlarni olish uchun indekslash (indexing) va kesish (slicing) usullaridan foydalanamiz text = \"Hello world!\" # Birinchi e'lementni olish uchun indeks 0 dan boshlanadi first_char = text[0] # Natija: 'H' # Oxirgi e'lementni olish uchun indeks sifatida -1 ishlatiladi last_char = text[-1] # Natija: '!' # e'lementlarni kesib olish (substring) uchun start va stop indekslar beriladi (stop indeksi kiritilgan indeksdan oldingi belgigacha) substring = text[0:5] # Natija: 'Hello' (0-indeksdan 4-indeksgacha) # Natijalarni ekranga chiqaramiz print(first_char) print(last_char) print(substring) \u2747\ufe0f STRINGLARNI KO'PAYTIRISH \ud83d\udccc Python dasturida string ni ko\u2018paytirish orqali bir xil matnni takrorlash mumkin. Buning uchun * operatoridan foydalanamiz. # Stringni ko\u2018paytirish orqali bir xil e'lementni takrorlash mumkin # Buning uchun '*' operatoridan foydalanamiz text = \"Hello\" # hello so'zini 3 marta takrorlaymiz text_repeated = text * 3 # Natija: 'HelloHelloHello' # Natijani ekranga chiqaramiz print(text_repeated) \u2747\ufe0f F-STRING(Python 3.6+) \ud83d\udccc Python 3.6 versiyasidan boshlab, string ichida o\u2018zgaruvchilarni (variables) va ifodalarni (expressions) to\u2018g\u2018ridan-to\u2018g\u2018ri joylashtirish uchun f-string (formatted string literal) usuli joriy etildi. Bu usul string formattingning eng qulay va tezkor usullaridan biri hisoblanadi. # O'zgaruvchilarni string ichida qulay tarzda qo'shish uchun f-string usulidan foydalanamiz ism = \"Umid\" yosh = 20 # f-string yordamida string ichiga o'zgaruvchilarni joylashtirish text = f\"Mening ismim {ism}, yoshim {yosh}da\" # Natija: Mening ismim Umid, yoshim 20da # Natijani ekranga chiqaramiz print(text) \u2747\ufe0f STRING METODLARI \ud83d\udccc Python dasturlash tilida, stringlar ustida turli xil operatsiyalarni bajarish uchun bir qancha o'rnatilgan metodlar mavjud. Quyida eng ko'p qo'llaniladigan string metodlari va ularning misollari keltirilgan: .upper() # .upper() - Matndagi barcha harflarni katta harfga aylantiradi text = \"hello\" print(text.upper()) # Natija: HELLO # Foydalanuvchi ismini doim katta harflarda saqlash uchun, # bazada bir xil ism turli holatda yozilgan bo\u2018lsa ham xatolik bo\u2018lmasin user_input = \"umid\" username = user_input.upper() print(username) # UMID .lower() # .lower() - Matndagi barcha harflarni kichik harfga aylantiradi text = \"HELLO\" print(text.lower()) # Natija: hello # Email yoki username tekshiruvda har doim kichik harflarga o\u2018zgartirish kerak, # chunki email kichik harflarda yoziladi email = \"User@Example.COM\" email_normalized = email.lower() print(email_normalized) # user@example.com .capitalize() # .capitalize() - Matnning birinchi harfini katta harfga, qolganlarini kichik harfga aylantiradi text = \"hello world\" print(text.capitalize()) # Natija: Hello world # Foydalanuvchi ismini chiroyli ko\u2018rsatish uchun, # faqat birinchi harf katta bo\u2018lsin name = \"umid\" print(name.capitalize()) # Umid .title() # .title() - Matndagi har bir so'zning birinchi harfini katta harfga aylantiradi text = \"hello world\" print(text.title()) # Natija: Hello World # Blog post yoki maqola sarlavhasini # har bir so\u2018zni bosh harfi katta bo\u2018lsin uchun formatlash title = \"python dasturlash asoslari\" print(title.title()) # Python Dasturlash Asoslari .lstrip() # .lstrip() - Matnning boshidagi bo'sh joylarni olib tashlaydi text = \" hello world \" print(text.lstrip()) # Natija: \"hello world \" .rstrip() # .rstrip() - Matnning oxiridagi bo'sh joylarni olib tashlaydi text = \" hello world \" print(text.rstrip()) # Natija: \" hello world\" .strip() # .strip() - Matnning boshidagi va oxiridagi bo'sh joylarni olib tashlaydi text = \" hello world \" print(text.strip()) # Natija: \"hello world\" # toza ma\u2019lumot olish maqsadida user_input = \" umid \" clean_input = user_input.strip() print(clean_input) # \"umid\" .replace(old, new) # 1-qator: \"matn\" nomli o'zgaruvchiga biror matn qiymatini beramiz matn = \"Salom dunyo\" # 2-qator: \"matn\"dagi \"dunyo\" so'zini \"Umid\" so'ziga almashtiramiz. # replace() metodi eski so'zni yangi so'z bilan almashtirib, natijani \"yangi_matn\" ga saqlaydi yangi_matn = matn.replace(\"dunyo\", \"Umid\") # 3-qator: Yangi hosil bo'lgan matnni ekranga chiqaramiz print(yangi_matn) # 1-qator: \"raqam\" o'zgaruvchisiga telefon raqamini matn ko'rinishida beramiz raqam = \"+998 90 123 45 67\" # 2-qator: # .replace(\" \", \"\") - bu yerda barcha bo'sh joylar (\" \") olib tashlanadi # .replace(\"+\", \"\") - bu yerda \"+\" belgisi olib tashlanadi raqam = raqam.replace(\" \", \"\").replace(\"+\", \"\") # 3-qator: Tozalangan raqamni ekranga chiqaramiz print(raqam) .split(separator) # 1-qator: \"text\" o'zgaruvchisiga matn berilgan text = \"Hello world Python\" # 2-qator: .split() metodi bo'sh joy (\" \") bo'yicha matnni bo'lib, ro'yxatga aylantiradi print(text.split()) # Natija: ['Hello', 'world', 'Python'] # 3-qator: .split('o') metodi \"o\" harfi bo'yicha bo'lib ro'yxatga aylantiradi print(text.split('o')) # Natija: ['Hell', ' w', 'rld Pyth', 'n'] # 1-qator: \"qidiruv\" nomli o'zgaruvchiga foydalanuvchi yozgan matn saqlanadi qidiruv = \"telefon kompyuter printer\" # 2-qator: .split() metodi yordamida matn bo'sh joy bo'yicha bo'linadi # Natijada ['telefon', 'kompyuter', 'printer'] degan ro'yxat (list) hosil bo'ladi sozlar = qidiruv.split() # 3-qator: ro'yxatdagi har bir so'z ustida aylanish (for loop) boshlanadi for text in sozlar: # 4-qator: har bir so'z ekranga chiqariladi print(\"Qidirilmoqda:\", text) .join(iterable) # 1-qator: 3 ta so'zdan iborat ro'yxat yaratiladi words = ['Hello', 'world', 'Python'] # 2-qator: ' '.join(words) ro'yxatdagi so'zlarni bo'sh joy bilan birlashtiradi print(' '.join(words)) # Natija: Hello world Python # 3-qator: '-'.join(words) so'zlarni \"-\" bilan birlashtiradi print('-'.join(words)) # Natija: Hello-world-Python # 1-qator: 'kodlar' nomli ro'yxat yaratilmoqda, # ichida 3 ta element - matn ko'rinishidagi kodlar bor kodlar = ['AB12', 'CD34', 'EF56'] # 2-qator: '-'.join(kodlar) yordamida ro'yxat elementlari orasiga # chiziqcha (\"-\") qo'yib, ularni bitta matnga birlashtiramiz parol = '-'.join(kodlar) # 3-qator: natijani ekranga chiqaramiz print(\"Yangi parol:\", parol) .find(substring) # 1-qator: text o'zgaruvchisiga \"Hello world\" matni saqlanmoqda text = \"Hello world\" # 2-qator: .find() metodi yordamida \"world\" so'zining text ichidagi # boshlanish indeksini topamiz. Agar topilsa, indeks qaytariladi print(text.find(\"world\")) # Natija: 6 # 3-qator: .find() metodi yordamida \"Python\" so'zining indeksini izlaymiz, # lekin matnda yo'q, shuning uchun -1 qaytariladi print(text.find(\"Python\")) # Natija: -1 # 1-qator: url o'zgaruvchisiga URL matni saqlanmoqda url = \"https://example.com/page?id=123\" # 2-qator: url ichidan \"id=\" matnining indeksini topamiz pos = url.find(\"id=\") # 3-qator: agar \"id=\" topilgan bo'lsa (indeks -1 emas) if pos != -1: # 4-qator: identifikatorni \"id=\" dan keyingi qismdan ajratib olamiz # pos+3 degani \"id=\" so'zidan keyingi belgidan boshlab olish identifikator = url[pos+3:] # 5-qator: ekranga chiqaramiz print(\"ID:\", identifikator) .startswith(prefix) # 1-qator: text o'zgaruvchisiga \"Hello world\" matni saqlanmoqda text = \"Hello world\" # 2-qator: .startswith() metodi yordamida matn \"Hello\" bilan boshlanishini tekshiramiz print(text.startswith(\"Hello\")) # Natija: True # 3-qator: .startswith() metodi yordamida matn \"world\" bilan boshlanishini tekshiramiz print(text.startswith(\"world\")) # Natija: False # 1-qator: url o'zgaruvchisiga URL manzili saqlanmoqda url = \"https://example.com/api/user\" # 2-qator: url matni \"https://example.com/api/\" bilan boshlanishini tekshiramiz if url.startswith(\"https://example.com/api/\"): # 3-qator: agar to'g'ri bo'lsa, \"API so'rovi\" deb chiqaramiz print(\"API so'rovi\") .endswith(suffix) # 1-qator: text o'zgaruvchisiga \"Hello world\" matni saqlanmoqda text = \"Hello world\" # 2-qator: .endswith() metodi yordamida matn \"world\" bilan tugashini tekshiramiz print(text.endswith(\"world\")) # Natija: True # 3-qator: .endswith() metodi yordamida matn \"Hello\" bilan tugashini tekshiramiz print(text.endswith(\"Hello\")) # Natija: False # 1-qator: filename o'zgaruvchisiga fayl nomi saqlanmoqda filename = \"photo.jpg\" # 2-qator: agar filename \".jpg\" bilan tugasa, shart bajariladi if filename.endswith(\".jpg\"): # 3-qator: ekranga \"Rasm fayli\" deb chiqaramiz print(\"Rasm fayli\") .count(substring) # 1-qator: text o'zgaruvchisiga \"hello hello world\" matni saqlanmoqda text = \"hello hello world\" # 2-qator: .count() metodi yordamida matnda \"hello\" so'zi necha marta takrorlanganini hisoblaymiz print(text.count(\"hello\")) # Natija: 2 \u2705 NUMBERS \ud83d\udccc Numbers \u2014 bu sonlarni ifodalash uchun ishlatiladigan ma'lumot turi. \ud83d\udccc Pythonda asosiy 3ta number type mavjud: int \u2014 butun sonlar (masalan, 5, -10, 100) float \u2014 o'nlik sonlar (masalan, 3.14, -0.001, 2.0) complex \u2014 kompleks sonlar (masalan, 2 + 3j, -1j) \u2747\ufe0f INTEGER \ud83d\udccc Integer ma'lumot turi butun sonlarni ifodalaydi. Bu sonlar manfiy , musbat yoki 0 bo'lishi mumkin. Integerlar cheklanmagan uzunlikka ega, ya'ni Python juda katta sonlarni ham integer sifatida saqlay oladi. x = 10 # musbat butun son y = -5 # manfiy butun son z = 0 # nol a = 12345678901234567890 # juda katta butun son # Quyidagi print() funksiyalari har bir o'zgaruvchining turini ko'rsatadi print(type(x)) # <class 'int'> print(type(y)) # <class 'int'> print(type(z)) # <class 'int'> print(type(a)) # <class 'int'> \u2705 INTEGER USTIDA AMALLAR \ud83d\udccc Integerlar ustida asosiy matematik amallarni bajarish mumkin: # Integerlar (butun sonlar) ustida bajariladigan asosiy matematik amallar a = 10 # Birinchi butun son b = 3 # Ikkinchi butun son # Qo'shish: ikkita sonni qo'shadi, natija 13 bo'ladi print(a + b) # 10 + 3 = 13 # Ayirish: birinchi sondan ikkinchi sonni ayiradi, natija 7 bo'ladi print(a - b) # 10 - 3 = 7 # Ko'paytirish: ikkita sonni ko'paytiradi, natija 30 bo'ladi print(a * b) # 10 * 3 = 30 # Bo'lish: birinchi sonni ikkinchi songa bo'ladi, natija float (kasr) turida chiqadi print(a / b) # 10 / 3 \u2248 3.3333333333333335 # Butun qismini olish: bo'linmaning faqat butun qismini oladi, o'nlik qismi tashlanadi print(a // b) # 10 // 3 = 3 # Qoldiqni olish: bo'linmaning qoldig'ini hisoblaydi (modulus) print(a % b) # 10 % 3 = 1 # Darajaga ko'tarish: birinchi sonni ikkinchi son darajasiga ko'taradi print(a ** b) # 10 ** 3 = 1000 \u2705 UZUN SONLARNI KIRITISH \ud83d\udccc Uzun sonlarni kiritishda, qulaylik uchun, raqamlarni pastki chiziq ( _ ) yordamida guruhlash mumkin. Python - son tarkibidagi pastki chiziqlarni ( _ ) inobatga olmasdan, uzun sonligicha qabul qiladi. # Bank hisobidagi pul miqdori (katta son) bank_hisobi = 1_250_000_000 # 1 milliard 250 million so'm print(\"Sizning hisobingizdagi mablag'\", bank_hisobi, \"so'm\") # Chiqarish: Sizning hisobingizdagi mablag' 1250000000 so'm \u2705 BIR NECHTA O'ZGARUVCHIGA QIYMAT BERISH \ud83d\udccc Birdaniga bir nechta o'zgaruvchiga qiymat berish uchun o'zgaruvchilar va ularga mos qiymatlar vergul ( , ) bilan ajratiladi: # Bir nechta o'zgaruvchilarga bir qatorda qiymat berish mumkin # x ga 10 (integer), y ga -7.25 (float), z ga -30 (integer) qiymatlari bir vaqtning o'zida berildi x, y, z = 10, -7.25, -30 # Natijalarni chiqaramiz print(\"x ning qiymati:\", x) # 10 print(\"y ning qiymati:\", y) # -7.25 print(\"z ning qiymati:\", z) # -30 \u2705 O'ZGARUVCHI TURINI ALMASHTIRISH \ud83d\udccc Python dasturlash tilida o'zgaruvchilar turini bir ma'lumot turidan boshqa ma'lumot turiga o'zgartirish jarayoni type casting deb ataladi. # Type casting misollari \u2014 qiymatlarni o'zgaruvchilarga saqlash va ularni turini tekshirish # 1. int() \u2014 float va stringdan int ga o'tish float_son = 3.7 int_from_float = int(float_son) # 3.7 dan 3 ga (kasr qismi tashlanadi) string_son = \"25\" int_from_string = int(string_son) # \"25\" matnidan 25 (int) hosil bo'ladi # 2. float() \u2014 int va stringdan float ga o'tish int_son = 10 float_from_int = float(int_son) # 10 dan 10.0 ga string_float = \"3.14\" float_from_string = float(string_float) # \"3.14\" matnidan 3.14 hosil bo'ladi # 3. str() \u2014 har qanday qiymatni stringga aylantirish int_num = 123 str_from_int = str(int_num) # int 123 -> string \"123\" float_num = 3.14 str_from_float = str(float_num) # float 3.14 -> string \"3.14\" bool_val = True str_from_bool = str(bool_val) # True -> \"True\" # 4. bool() \u2014 qiymatni True yoki False ga aylantirish bool_from_one = bool(1) # 1 -> True bool_from_zero = bool(0) # 0 -> False bool_from_empty_str = bool(\"\") # bo'sh string -> False bool_from_nonempty_str = bool(\"Hello\") # bo'sh bo'lmagan string -> True bool_from_empty_list = bool([]) # bo'sh ro'yxat -> False bool_from_list = bool([1, 2, 3]) # bo'sh bo'lmagan ro'yxat -> True # Natijalarni chiqaramiz print(int_from_float, type(int_from_float)) # 3 <class 'int'> print(int_from_string, type(int_from_string)) # 25 <class 'int'> print(float_from_int, type(float_from_int)) # 10.0 <class 'float'> print(float_from_string, type(float_from_string)) # 3.14 <class 'float'> print(str_from_int, type(str_from_int)) # '123' <class 'str'> print(str_from_float, type(str_from_float)) # '3.14' <class 'str'> print(str_from_bool, type(str_from_bool)) # 'True' <class 'str'> print(bool_from_one, type(bool_from_one)) # True <class 'bool'> print(bool_from_zero, type(bool_from_zero)) # False <class 'bool'> print(bool_from_empty_str, type(bool_from_empty_str)) # False <class 'bool'> print(bool_from_nonempty_str, type(bool_from_nonempty_str)) # True <class 'bool'> print(bool_from_empty_list, type(bool_from_empty_list)) # False <class 'bool'> print(bool_from_list, type(bool_from_list)) # True <class 'bool'> \u2705 INPUT \ud83d\udccc input() \u2014 bu Python dasturlash tilidagi maxsus funksiya bo\u2018lib, u foydalanuvchidan klaviatura orqali ma'lumot olish uchun ishlatiladi. # input() funksiyasi foydalanuvchidan ma'lumot olish uchun ishlatiladi. # Funksiya ichidagi matn \u2014 bu foydalanuvchiga ko'rsatiladigan savol yoki so'rov. ism = input(\"Ismingizni kiriting: \") # Foydalanuvchidan ismni so'raymiz print(\"Salom,\", ism) # Kiritilgan ismni ekranga chiqaramiz \ud83d\udccc input() har doim matn (string) ko\u2018rinishida qiymat oladi. Agar son kiritilishini istasak, stringni son turiga o\u2018zgartirish kerak. # foydalanuvchi kiritgan matnni butun songa aylantiramiz yosh = int(input(\"Yoshingizni kiriting: \")) print(\"Sizning yoshingiz:\", yosh) # 1. Foydalanuvchidan tug'ilgan yilini so'raymiz t_yil = input(\"Tug'ilgan yilingizni kiriting: \") # 2. input() funksiyasi har doim matn (string) ko'rinishida ma'lumot beradi, # shuning uchun uni butun son (integer) ga o'tkazamiz t_yil = int(t_yil) # 3. Yilni hozirgi yil bilan solishtirib, yoshni hisoblaymiz hozirgi_yil = 2025 yosh = hozirgi_yil - t_yil # 4. Natijani ekranga chiqaramiz print(\"Siz \" + str(yosh) + \" yoshda ekansiz.\") \u2747\ufe0f FLOAT \ud83d\udccc Pythonda o'nlik sonlar floating point numbers yoki qisqa qilib floats deyiladi. Ingliz tilida o'nlik sonlarni yozishda vergul ( , ) emas nuqta ( . ) belgisi ishlatiladi, va bu nuqta sonning katta kichikligiga qarab joyi o'zgargani uchun \"floating\" deyiladi. pi = 3.14159 # o'nlik son, ya'ni float turidagi o'zgaruvchi radius = 10 # butun son, ya'ni int turidagi o'zgaruvchi diametr = 2 * radius # diametrni hisoblaymiz (radiusning 2 barobariga teng) # aylana uzunligini hisoblab, natijani chiqaramiz print(\"Aylana uzunligi \", pi * diametr, \" ga teng.\") \u2747\ufe0f FLOAT USTIDA AMALLAR a = 5.5 # a o'zgaruvchisiga 5.5 (float) qiymat berildi b = 2.0 # b o'zgaruvchisiga 2.0 (float) qiymat berildi print(\"Qo\u2018shish:\", a + b) # a va b ni qo\u2018shish => 7.5 print(\"Ayirish:\", a - b) # a dan b ni ayirish => 3.5 print(\"Ko\u2018paytirish:\", a * b) # a va b ni ko\u2018paytirish => 11.0 print(\"Bo\u2018lish:\", a / b) # a ni b ga bo\u2018lish (haqiqiy bo\u2018lish) => 2.75 print(\"Butun qismga bo\u2018lish:\", a // b) # a ni b ga bo\u2018lish va butun qismni olish => 2.0 print(\"Qoldiq:\", a % b) # a ni b ga bo\u2018lishda qolgan qoldiq => 1.5 print(\"Daraja:\", a ** b) # a ni b-darajaga ko\u2018tarish => 30.25 \u2705 COMPLEX \ud83d\udccc Complex sonlar \u2014 bu ikkita qismdan iborat sonlar: haqiqiy qism (real part) va mavhum qism (imaginary part). \ud83d\udccc Pythonda murakkab sonlar complex tipida saqlanadi. Pythonda imaginary part j yoki J harfi bilan ifodalanadi (elektronika va fizikada j ishlatiladi, matematikada esa i ). \u2747\ufe0f COMPLEX SON YARATISH # Kompleks son yaratamiz: real part 3, imaginary part 4j z1 = 3 + 4j # Kompleks sonni konsolga chiqaramiz print(z1) # Natija: (3+4j) \u2705 KONSTANTA \ud83d\udccc Python dasturlash tilida \"constant\" deb ataladigan o'zgaruvchilar mavjud emas, lekin dasturchilar odatda o'zgaruvchilarni konstantalar sifatida ishlatishadi. Bu odatda o'zgaruvchining qiymati dastur davomida o'zgarmasligini anglatadi. Konstantalarni nomlash: Konstantalarni nomlashda katta harflar ishlatiladi. Bu, dasturchiga o'zgaruvchining qiymati o'zgarmasligini anglatadi. # Bu yerda PI nomli konstanta e'lon qilinmoqda # Odatda konstanta nomlari katta harflarda yoziladi # PI ning qiymati o\u2018zgarmaydi va doim 3.14159 bo\u2018lib qoladi PI = 3.14159 # Bu yerda MAX_USERS nomli konstanta e'lon qilinmoqda # Bu maksimum foydalanuvchilar sonini bildiradi MAX_USERS = 100 Konstantalarni modullarda saqlash: Konstantalarni alohida Python faylida (modulda) saqlash tavsiya etiladi. Bu, konstantalarni boshqa fayllarda ishlatishni osonlashtiradi. Misol uchun, constants.py nomli fayl yaratib, unda konstantalarni saqlash mumkin: # constants.py # constants.py faylida o'zgarmas (konstanta) qiymatlar saqlanadi # Bu konstantalar boshqa fayllardan import qilib ishlatiladi # Aylana uchun PI qiymati PI = 3.14159 # Maksimal foydalanuvchilar soni MAX_USERS = 100 Keyin boshqa faylda bu konstantalarni ishlatish mumkin: # main.py # constants.py modulidagi konstantalarni import qilamiz import constants # PI konstantasini terminalga chiqaramiz print(constants.PI) # Natija: 3.14159 # MAX_USERS konstantasini terminalga chiqaramiz print(constants.MAX_USERS) # Natija: 100 Konstantalarni o'zgartirishga urinish: Python tilida konstantalarni o'zgartirish mumkin, lekin bu tavsiya etilmaydi. Agar siz konstantani o'zgartirmoqchi bo'lsangiz, bu dastur xatolarga olib kelishi mumkin. # PI konstanta deb qaralmoqda, ya'ni doimiy qiymat sifatida ishlatiladi PI = 3.14159 # Ammo bu yerda PI qiymatini o'zgartirib yubordik # Bu sintaktik jihatdan xato emas, lekin yomon amaliyot hisoblanadi # Chunki dasturchilar PI o'zgarmaydi deb o'ylaydi PI = 3.14 # \u274c Bu tavsiya etilmaydi # Dastur davomida bu o'zgarish kutilmagan xatolarga olib kelishi mumkin print(\"PI qiymati:\", PI) # Natija: 3.14 \u2705 AMALIYOT \u2705 1-topshiriq: String birlashtirish Foydalanuvchidan ism va familiya input() orqali oling. Ularni birlashtirib, \"F.I.O: \" tarzida ekranga chiqaring. \u2705 2-topshiriq: String uzunligini topish Foydalanuvchidan matn input() orqali oling va uning uzunligini len() yordamida aniqlang. \u2705 3-topshiriq: String indekslash va kesish \"Python dasturlash\" matnini o\u2018zgaruvchiga saqlang. Birinchi harfini, oxirgi harfini va \"dastur\" so\u2018zini alohida ekranga chiqaring. \u2705 4-topshiriq: String ko\u2018paytirish Foydalanuvchidan so\u2018z oling va uni 4 marta ketma-ket chiqaruvchi dastur yozing. \u2705 5-topshiriq: F-stringdan foydalanish Foydalanuvchidan ism va yosh input() orqali olib, quyidagicha f-string yordamida chiqaring. Misol: Ismingiz: Aziza, Yoshingiz: 19 \u2705 6-topshiriq: String metodlari bilan ishlash Foydalanuvchidan matn input() orqali oling. Uni: - katta harflarga, - kichik harflarga, - birinchi harfini katta qilishga o\u2018zgartirib, har birini alohida ekranga chiqaring. \u2705 7-topshiriq: .replace() va .split() metodi Foydalanuvchidan telefon raqami oling (masalan: \"+998 90 123 45 67\") va uni bo\u2018sh joylar va \"+\" belgisidan tozalang, so\u2018ng split() yordamida 2 xonali bloklarga ajrating. \u2705 8-topshiriq: .join() va .count() Foydalanuvchidan so\u2018zlar ro\u2018yxatini input() orqali so\u2018rab, ularni vergul bilan birlashtiring va \"a\" harfi necha marta qatnashganini hisoblang. \u2705 9-topshiriq: .find(), .startswith(), .endswith() Foydalanuvchidan matn va so\u2018z oling. Matnda so\u2018z qayerdan boshlanishini, matn aynan shu so\u2018z bilan boshlanish yoki tugashini aniqlang. \u2705 10-topshiriq: Integer va float ustida amallar Foydalanuvchidan ikkita butun son va bir float son oling. Ularning yig\u2018indisi, ko\u2018paytmasi va o\u2018zaro bo\u2018linmasini hisoblang. \u2705 11-topshiriq: Uzoq sonni guruhlash Bank hisobingizdagi pul miqdorini pastki chiziq yordamida o\u2018qish oson bo\u2018ladigan formatda yozing va ekranga chiqaring. \u2705 12-topshiriq: Type casting (turini o\u2018zgartirish) Foydalanuvchidan raqamli matn oling va uni int, float, str va bool turiga o\u2018tkazib, har birini va turini chiqaring. \u2705 13-topshiriq: Kompleks son Real va imag qismlarni input orqali olib, kompleks son yarating va uni ekranga chiqaring. \u2705 14-topshiriq: Konstantadan foydalanish PI va MAX_USERS konstantasini yarating (katta harflar bilan). Ularni ekranga chiqaruvchi dastur yozing. \u2705 15-topshiriq: Foydalanuvchi yoshi va input Foydalanuvchidan tug\u2018ilgan yilini input orqali olib, yoshini hisoblab chiqaring (hozirgi yilni o\u2018zingiz yozing). Misol: Siz 20 yoshdasiz.","title":"Data Types"},{"location":"python/data-types/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/data-types/#2-dars-data-types","text":"","title":"\ud83e\udde9 2-DARS DATA TYPES"},{"location":"python/data-types/#malumot-turlari","text":"\ud83d\udccc Python dasturlash tilida har bir qiymat (value) \u2014 o\u2018zining ma'lumot turiga (data type) ega. Bu tur qiymatga qanday ishlov berishni aniqlaydi. \ud83d\udccc Python dasturlash tilida 8 ta ma'lumot turi bor, ular quyidagilar: Definition Type Text Type str Numeric Types int , float , complex Sequence Types list , tuple , range Mapping Type dict Set Types set , frozenset Boolean Type bool Binary Types bytes , bytearray , memoryview None Type NoneType","title":"\u2705 MA'LUMOT TURLARI"},{"location":"python/data-types/#string","text":"\ud83d\udccc String \u2014 bu matnli ma\u2019lumotlarni ifodalovchi ma\u2019lumot turi. Ya\u2019ni, harflar, raqamlar, bo\u2018sh joy, belgilardan tashkil topgan qator (yoki matn). \ud83d\udccc Pythonda stringlar ikki yoki uchta qo\u2018shtirnoq (\" \") yoki tirtirnoq (' ') bilan yoziladi. # Double quotes \u2014 ikki tirnoq (\" \") bilan yozilgan oddiy string text = \"Hello world\" print(text) # Single quotes \u2014 bitta tirnoq (' ') bilan yozilgan oddiy string text = 'Hello world' print(text) # Triple double quotes \u2014 uchta ikki tirnoq (\"\"\" \"\"\") bilan yozilgan ko\u2018p qatorli matn (multiline string) text = \"\"\"This is a multiline string.\"\"\" print(text) # Triple single quotes \u2014 uchta bitta tirnoq (''' ''') bilan yozilgan ko\u2018p qatorli matn (multiline string) text = '''This is also a multiline string.''' print(text)","title":"\u2705 STRING"},{"location":"python/data-types/#string-ustida-amallar","text":"\ud83d\udccc Matnlarni qo'shish uchun + operatoridan foydalanamiz. # '+' operatori yordamida ikki yoki undan ortiq stringlarni birlashtirish mumkin name = \"Umid\" print(\"Mening ismim \" + name) # Natija: Mening ismim Umid # Qo\u2018shishda so\u2018zlar orasiga bo\u2018sh joy (space) qo\u2018yish kerak, aks holda ular bir-biriga yopishib qoladi first_name = \"Umid\" last_name = \"G'aybullayev\" print(first_name + last_name) # Natija: UmidG'aybullayev (bo\u2018shliq yo\u2018q) # To\u2018g\u2018ri natija uchun so\u2018zlar orasiga bo\u2018sh joy qo\u2018shamiz print(first_name + \" \" + last_name) # Natija: Umid G'aybullayev","title":"\u2747\ufe0f STRING USTIDA AMALLAR"},{"location":"python/data-types/#string-uzunligini-aniqlash","text":"\ud83d\udccc String uzunligi \u2014 bu stringdagi belgilar (characters) soni. Belgilarga harflar, raqamlar, bo\u2018sh joylar (spaces) va maxsus belgilar kiradi. \ud83d\udccc String uzunligini topish uchun len() funksiyasidan foydalanamiz. # len() funksiyasi yordamida string uzunligini aniqlaymiz text = \"Hello, World!\" # text o'zgaruvchisidagi string uzunligini len() yordamida o'lchaymiz length = len(text) # Natija: 13 # Natijani ekranga chiqaramiz print(length)","title":"\u2747\ufe0f STRING UZUNLIGINI ANIQLASH"},{"location":"python/data-types/#string-elementlariga-murojat-qilish","text":"\ud83d\udccc String ichidan o'zimizga kerak bo'lgan e'lementlarni ajratib olish uchun quyidagi usuldan foydalanamiz: # String ichidan kerakli elementlarni olish uchun indekslash (indexing) va kesish (slicing) usullaridan foydalanamiz text = \"Hello world!\" # Birinchi e'lementni olish uchun indeks 0 dan boshlanadi first_char = text[0] # Natija: 'H' # Oxirgi e'lementni olish uchun indeks sifatida -1 ishlatiladi last_char = text[-1] # Natija: '!' # e'lementlarni kesib olish (substring) uchun start va stop indekslar beriladi (stop indeksi kiritilgan indeksdan oldingi belgigacha) substring = text[0:5] # Natija: 'Hello' (0-indeksdan 4-indeksgacha) # Natijalarni ekranga chiqaramiz print(first_char) print(last_char) print(substring)","title":"\u2747\ufe0f STRING E'LEMENTLARIGA MUROJAT QILISH"},{"location":"python/data-types/#stringlarni-kopaytirish","text":"\ud83d\udccc Python dasturida string ni ko\u2018paytirish orqali bir xil matnni takrorlash mumkin. Buning uchun * operatoridan foydalanamiz. # Stringni ko\u2018paytirish orqali bir xil e'lementni takrorlash mumkin # Buning uchun '*' operatoridan foydalanamiz text = \"Hello\" # hello so'zini 3 marta takrorlaymiz text_repeated = text * 3 # Natija: 'HelloHelloHello' # Natijani ekranga chiqaramiz print(text_repeated)","title":"\u2747\ufe0f STRINGLARNI KO'PAYTIRISH"},{"location":"python/data-types/#f-stringpython-36","text":"\ud83d\udccc Python 3.6 versiyasidan boshlab, string ichida o\u2018zgaruvchilarni (variables) va ifodalarni (expressions) to\u2018g\u2018ridan-to\u2018g\u2018ri joylashtirish uchun f-string (formatted string literal) usuli joriy etildi. Bu usul string formattingning eng qulay va tezkor usullaridan biri hisoblanadi. # O'zgaruvchilarni string ichida qulay tarzda qo'shish uchun f-string usulidan foydalanamiz ism = \"Umid\" yosh = 20 # f-string yordamida string ichiga o'zgaruvchilarni joylashtirish text = f\"Mening ismim {ism}, yoshim {yosh}da\" # Natija: Mening ismim Umid, yoshim 20da # Natijani ekranga chiqaramiz print(text)","title":"\u2747\ufe0f F-STRING(Python 3.6+)"},{"location":"python/data-types/#string-metodlari","text":"\ud83d\udccc Python dasturlash tilida, stringlar ustida turli xil operatsiyalarni bajarish uchun bir qancha o'rnatilgan metodlar mavjud. Quyida eng ko'p qo'llaniladigan string metodlari va ularning misollari keltirilgan: .upper() # .upper() - Matndagi barcha harflarni katta harfga aylantiradi text = \"hello\" print(text.upper()) # Natija: HELLO # Foydalanuvchi ismini doim katta harflarda saqlash uchun, # bazada bir xil ism turli holatda yozilgan bo\u2018lsa ham xatolik bo\u2018lmasin user_input = \"umid\" username = user_input.upper() print(username) # UMID .lower() # .lower() - Matndagi barcha harflarni kichik harfga aylantiradi text = \"HELLO\" print(text.lower()) # Natija: hello # Email yoki username tekshiruvda har doim kichik harflarga o\u2018zgartirish kerak, # chunki email kichik harflarda yoziladi email = \"User@Example.COM\" email_normalized = email.lower() print(email_normalized) # user@example.com .capitalize() # .capitalize() - Matnning birinchi harfini katta harfga, qolganlarini kichik harfga aylantiradi text = \"hello world\" print(text.capitalize()) # Natija: Hello world # Foydalanuvchi ismini chiroyli ko\u2018rsatish uchun, # faqat birinchi harf katta bo\u2018lsin name = \"umid\" print(name.capitalize()) # Umid .title() # .title() - Matndagi har bir so'zning birinchi harfini katta harfga aylantiradi text = \"hello world\" print(text.title()) # Natija: Hello World # Blog post yoki maqola sarlavhasini # har bir so\u2018zni bosh harfi katta bo\u2018lsin uchun formatlash title = \"python dasturlash asoslari\" print(title.title()) # Python Dasturlash Asoslari .lstrip() # .lstrip() - Matnning boshidagi bo'sh joylarni olib tashlaydi text = \" hello world \" print(text.lstrip()) # Natija: \"hello world \" .rstrip() # .rstrip() - Matnning oxiridagi bo'sh joylarni olib tashlaydi text = \" hello world \" print(text.rstrip()) # Natija: \" hello world\" .strip() # .strip() - Matnning boshidagi va oxiridagi bo'sh joylarni olib tashlaydi text = \" hello world \" print(text.strip()) # Natija: \"hello world\" # toza ma\u2019lumot olish maqsadida user_input = \" umid \" clean_input = user_input.strip() print(clean_input) # \"umid\" .replace(old, new) # 1-qator: \"matn\" nomli o'zgaruvchiga biror matn qiymatini beramiz matn = \"Salom dunyo\" # 2-qator: \"matn\"dagi \"dunyo\" so'zini \"Umid\" so'ziga almashtiramiz. # replace() metodi eski so'zni yangi so'z bilan almashtirib, natijani \"yangi_matn\" ga saqlaydi yangi_matn = matn.replace(\"dunyo\", \"Umid\") # 3-qator: Yangi hosil bo'lgan matnni ekranga chiqaramiz print(yangi_matn) # 1-qator: \"raqam\" o'zgaruvchisiga telefon raqamini matn ko'rinishida beramiz raqam = \"+998 90 123 45 67\" # 2-qator: # .replace(\" \", \"\") - bu yerda barcha bo'sh joylar (\" \") olib tashlanadi # .replace(\"+\", \"\") - bu yerda \"+\" belgisi olib tashlanadi raqam = raqam.replace(\" \", \"\").replace(\"+\", \"\") # 3-qator: Tozalangan raqamni ekranga chiqaramiz print(raqam) .split(separator) # 1-qator: \"text\" o'zgaruvchisiga matn berilgan text = \"Hello world Python\" # 2-qator: .split() metodi bo'sh joy (\" \") bo'yicha matnni bo'lib, ro'yxatga aylantiradi print(text.split()) # Natija: ['Hello', 'world', 'Python'] # 3-qator: .split('o') metodi \"o\" harfi bo'yicha bo'lib ro'yxatga aylantiradi print(text.split('o')) # Natija: ['Hell', ' w', 'rld Pyth', 'n'] # 1-qator: \"qidiruv\" nomli o'zgaruvchiga foydalanuvchi yozgan matn saqlanadi qidiruv = \"telefon kompyuter printer\" # 2-qator: .split() metodi yordamida matn bo'sh joy bo'yicha bo'linadi # Natijada ['telefon', 'kompyuter', 'printer'] degan ro'yxat (list) hosil bo'ladi sozlar = qidiruv.split() # 3-qator: ro'yxatdagi har bir so'z ustida aylanish (for loop) boshlanadi for text in sozlar: # 4-qator: har bir so'z ekranga chiqariladi print(\"Qidirilmoqda:\", text) .join(iterable) # 1-qator: 3 ta so'zdan iborat ro'yxat yaratiladi words = ['Hello', 'world', 'Python'] # 2-qator: ' '.join(words) ro'yxatdagi so'zlarni bo'sh joy bilan birlashtiradi print(' '.join(words)) # Natija: Hello world Python # 3-qator: '-'.join(words) so'zlarni \"-\" bilan birlashtiradi print('-'.join(words)) # Natija: Hello-world-Python # 1-qator: 'kodlar' nomli ro'yxat yaratilmoqda, # ichida 3 ta element - matn ko'rinishidagi kodlar bor kodlar = ['AB12', 'CD34', 'EF56'] # 2-qator: '-'.join(kodlar) yordamida ro'yxat elementlari orasiga # chiziqcha (\"-\") qo'yib, ularni bitta matnga birlashtiramiz parol = '-'.join(kodlar) # 3-qator: natijani ekranga chiqaramiz print(\"Yangi parol:\", parol) .find(substring) # 1-qator: text o'zgaruvchisiga \"Hello world\" matni saqlanmoqda text = \"Hello world\" # 2-qator: .find() metodi yordamida \"world\" so'zining text ichidagi # boshlanish indeksini topamiz. Agar topilsa, indeks qaytariladi print(text.find(\"world\")) # Natija: 6 # 3-qator: .find() metodi yordamida \"Python\" so'zining indeksini izlaymiz, # lekin matnda yo'q, shuning uchun -1 qaytariladi print(text.find(\"Python\")) # Natija: -1 # 1-qator: url o'zgaruvchisiga URL matni saqlanmoqda url = \"https://example.com/page?id=123\" # 2-qator: url ichidan \"id=\" matnining indeksini topamiz pos = url.find(\"id=\") # 3-qator: agar \"id=\" topilgan bo'lsa (indeks -1 emas) if pos != -1: # 4-qator: identifikatorni \"id=\" dan keyingi qismdan ajratib olamiz # pos+3 degani \"id=\" so'zidan keyingi belgidan boshlab olish identifikator = url[pos+3:] # 5-qator: ekranga chiqaramiz print(\"ID:\", identifikator) .startswith(prefix) # 1-qator: text o'zgaruvchisiga \"Hello world\" matni saqlanmoqda text = \"Hello world\" # 2-qator: .startswith() metodi yordamida matn \"Hello\" bilan boshlanishini tekshiramiz print(text.startswith(\"Hello\")) # Natija: True # 3-qator: .startswith() metodi yordamida matn \"world\" bilan boshlanishini tekshiramiz print(text.startswith(\"world\")) # Natija: False # 1-qator: url o'zgaruvchisiga URL manzili saqlanmoqda url = \"https://example.com/api/user\" # 2-qator: url matni \"https://example.com/api/\" bilan boshlanishini tekshiramiz if url.startswith(\"https://example.com/api/\"): # 3-qator: agar to'g'ri bo'lsa, \"API so'rovi\" deb chiqaramiz print(\"API so'rovi\") .endswith(suffix) # 1-qator: text o'zgaruvchisiga \"Hello world\" matni saqlanmoqda text = \"Hello world\" # 2-qator: .endswith() metodi yordamida matn \"world\" bilan tugashini tekshiramiz print(text.endswith(\"world\")) # Natija: True # 3-qator: .endswith() metodi yordamida matn \"Hello\" bilan tugashini tekshiramiz print(text.endswith(\"Hello\")) # Natija: False # 1-qator: filename o'zgaruvchisiga fayl nomi saqlanmoqda filename = \"photo.jpg\" # 2-qator: agar filename \".jpg\" bilan tugasa, shart bajariladi if filename.endswith(\".jpg\"): # 3-qator: ekranga \"Rasm fayli\" deb chiqaramiz print(\"Rasm fayli\") .count(substring) # 1-qator: text o'zgaruvchisiga \"hello hello world\" matni saqlanmoqda text = \"hello hello world\" # 2-qator: .count() metodi yordamida matnda \"hello\" so'zi necha marta takrorlanganini hisoblaymiz print(text.count(\"hello\")) # Natija: 2","title":"\u2747\ufe0f STRING METODLARI"},{"location":"python/data-types/#numbers","text":"\ud83d\udccc Numbers \u2014 bu sonlarni ifodalash uchun ishlatiladigan ma'lumot turi. \ud83d\udccc Pythonda asosiy 3ta number type mavjud: int \u2014 butun sonlar (masalan, 5, -10, 100) float \u2014 o'nlik sonlar (masalan, 3.14, -0.001, 2.0) complex \u2014 kompleks sonlar (masalan, 2 + 3j, -1j)","title":"\u2705 NUMBERS"},{"location":"python/data-types/#integer","text":"\ud83d\udccc Integer ma'lumot turi butun sonlarni ifodalaydi. Bu sonlar manfiy , musbat yoki 0 bo'lishi mumkin. Integerlar cheklanmagan uzunlikka ega, ya'ni Python juda katta sonlarni ham integer sifatida saqlay oladi. x = 10 # musbat butun son y = -5 # manfiy butun son z = 0 # nol a = 12345678901234567890 # juda katta butun son # Quyidagi print() funksiyalari har bir o'zgaruvchining turini ko'rsatadi print(type(x)) # <class 'int'> print(type(y)) # <class 'int'> print(type(z)) # <class 'int'> print(type(a)) # <class 'int'>","title":"\u2747\ufe0f INTEGER"},{"location":"python/data-types/#integer-ustida-amallar","text":"\ud83d\udccc Integerlar ustida asosiy matematik amallarni bajarish mumkin: # Integerlar (butun sonlar) ustida bajariladigan asosiy matematik amallar a = 10 # Birinchi butun son b = 3 # Ikkinchi butun son # Qo'shish: ikkita sonni qo'shadi, natija 13 bo'ladi print(a + b) # 10 + 3 = 13 # Ayirish: birinchi sondan ikkinchi sonni ayiradi, natija 7 bo'ladi print(a - b) # 10 - 3 = 7 # Ko'paytirish: ikkita sonni ko'paytiradi, natija 30 bo'ladi print(a * b) # 10 * 3 = 30 # Bo'lish: birinchi sonni ikkinchi songa bo'ladi, natija float (kasr) turida chiqadi print(a / b) # 10 / 3 \u2248 3.3333333333333335 # Butun qismini olish: bo'linmaning faqat butun qismini oladi, o'nlik qismi tashlanadi print(a // b) # 10 // 3 = 3 # Qoldiqni olish: bo'linmaning qoldig'ini hisoblaydi (modulus) print(a % b) # 10 % 3 = 1 # Darajaga ko'tarish: birinchi sonni ikkinchi son darajasiga ko'taradi print(a ** b) # 10 ** 3 = 1000","title":"\u2705 INTEGER USTIDA AMALLAR"},{"location":"python/data-types/#uzun-sonlarni-kiritish","text":"\ud83d\udccc Uzun sonlarni kiritishda, qulaylik uchun, raqamlarni pastki chiziq ( _ ) yordamida guruhlash mumkin. Python - son tarkibidagi pastki chiziqlarni ( _ ) inobatga olmasdan, uzun sonligicha qabul qiladi. # Bank hisobidagi pul miqdori (katta son) bank_hisobi = 1_250_000_000 # 1 milliard 250 million so'm print(\"Sizning hisobingizdagi mablag'\", bank_hisobi, \"so'm\") # Chiqarish: Sizning hisobingizdagi mablag' 1250000000 so'm","title":"\u2705 UZUN SONLARNI KIRITISH"},{"location":"python/data-types/#bir-nechta-ozgaruvchiga-qiymat-berish","text":"\ud83d\udccc Birdaniga bir nechta o'zgaruvchiga qiymat berish uchun o'zgaruvchilar va ularga mos qiymatlar vergul ( , ) bilan ajratiladi: # Bir nechta o'zgaruvchilarga bir qatorda qiymat berish mumkin # x ga 10 (integer), y ga -7.25 (float), z ga -30 (integer) qiymatlari bir vaqtning o'zida berildi x, y, z = 10, -7.25, -30 # Natijalarni chiqaramiz print(\"x ning qiymati:\", x) # 10 print(\"y ning qiymati:\", y) # -7.25 print(\"z ning qiymati:\", z) # -30","title":"\u2705 BIR NECHTA O'ZGARUVCHIGA QIYMAT BERISH"},{"location":"python/data-types/#ozgaruvchi-turini-almashtirish","text":"\ud83d\udccc Python dasturlash tilida o'zgaruvchilar turini bir ma'lumot turidan boshqa ma'lumot turiga o'zgartirish jarayoni type casting deb ataladi. # Type casting misollari \u2014 qiymatlarni o'zgaruvchilarga saqlash va ularni turini tekshirish # 1. int() \u2014 float va stringdan int ga o'tish float_son = 3.7 int_from_float = int(float_son) # 3.7 dan 3 ga (kasr qismi tashlanadi) string_son = \"25\" int_from_string = int(string_son) # \"25\" matnidan 25 (int) hosil bo'ladi # 2. float() \u2014 int va stringdan float ga o'tish int_son = 10 float_from_int = float(int_son) # 10 dan 10.0 ga string_float = \"3.14\" float_from_string = float(string_float) # \"3.14\" matnidan 3.14 hosil bo'ladi # 3. str() \u2014 har qanday qiymatni stringga aylantirish int_num = 123 str_from_int = str(int_num) # int 123 -> string \"123\" float_num = 3.14 str_from_float = str(float_num) # float 3.14 -> string \"3.14\" bool_val = True str_from_bool = str(bool_val) # True -> \"True\" # 4. bool() \u2014 qiymatni True yoki False ga aylantirish bool_from_one = bool(1) # 1 -> True bool_from_zero = bool(0) # 0 -> False bool_from_empty_str = bool(\"\") # bo'sh string -> False bool_from_nonempty_str = bool(\"Hello\") # bo'sh bo'lmagan string -> True bool_from_empty_list = bool([]) # bo'sh ro'yxat -> False bool_from_list = bool([1, 2, 3]) # bo'sh bo'lmagan ro'yxat -> True # Natijalarni chiqaramiz print(int_from_float, type(int_from_float)) # 3 <class 'int'> print(int_from_string, type(int_from_string)) # 25 <class 'int'> print(float_from_int, type(float_from_int)) # 10.0 <class 'float'> print(float_from_string, type(float_from_string)) # 3.14 <class 'float'> print(str_from_int, type(str_from_int)) # '123' <class 'str'> print(str_from_float, type(str_from_float)) # '3.14' <class 'str'> print(str_from_bool, type(str_from_bool)) # 'True' <class 'str'> print(bool_from_one, type(bool_from_one)) # True <class 'bool'> print(bool_from_zero, type(bool_from_zero)) # False <class 'bool'> print(bool_from_empty_str, type(bool_from_empty_str)) # False <class 'bool'> print(bool_from_nonempty_str, type(bool_from_nonempty_str)) # True <class 'bool'> print(bool_from_empty_list, type(bool_from_empty_list)) # False <class 'bool'> print(bool_from_list, type(bool_from_list)) # True <class 'bool'>","title":"\u2705 O'ZGARUVCHI TURINI ALMASHTIRISH"},{"location":"python/data-types/#input","text":"\ud83d\udccc input() \u2014 bu Python dasturlash tilidagi maxsus funksiya bo\u2018lib, u foydalanuvchidan klaviatura orqali ma'lumot olish uchun ishlatiladi. # input() funksiyasi foydalanuvchidan ma'lumot olish uchun ishlatiladi. # Funksiya ichidagi matn \u2014 bu foydalanuvchiga ko'rsatiladigan savol yoki so'rov. ism = input(\"Ismingizni kiriting: \") # Foydalanuvchidan ismni so'raymiz print(\"Salom,\", ism) # Kiritilgan ismni ekranga chiqaramiz \ud83d\udccc input() har doim matn (string) ko\u2018rinishida qiymat oladi. Agar son kiritilishini istasak, stringni son turiga o\u2018zgartirish kerak. # foydalanuvchi kiritgan matnni butun songa aylantiramiz yosh = int(input(\"Yoshingizni kiriting: \")) print(\"Sizning yoshingiz:\", yosh) # 1. Foydalanuvchidan tug'ilgan yilini so'raymiz t_yil = input(\"Tug'ilgan yilingizni kiriting: \") # 2. input() funksiyasi har doim matn (string) ko'rinishida ma'lumot beradi, # shuning uchun uni butun son (integer) ga o'tkazamiz t_yil = int(t_yil) # 3. Yilni hozirgi yil bilan solishtirib, yoshni hisoblaymiz hozirgi_yil = 2025 yosh = hozirgi_yil - t_yil # 4. Natijani ekranga chiqaramiz print(\"Siz \" + str(yosh) + \" yoshda ekansiz.\")","title":"\u2705 INPUT"},{"location":"python/data-types/#float","text":"\ud83d\udccc Pythonda o'nlik sonlar floating point numbers yoki qisqa qilib floats deyiladi. Ingliz tilida o'nlik sonlarni yozishda vergul ( , ) emas nuqta ( . ) belgisi ishlatiladi, va bu nuqta sonning katta kichikligiga qarab joyi o'zgargani uchun \"floating\" deyiladi. pi = 3.14159 # o'nlik son, ya'ni float turidagi o'zgaruvchi radius = 10 # butun son, ya'ni int turidagi o'zgaruvchi diametr = 2 * radius # diametrni hisoblaymiz (radiusning 2 barobariga teng) # aylana uzunligini hisoblab, natijani chiqaramiz print(\"Aylana uzunligi \", pi * diametr, \" ga teng.\")","title":"\u2747\ufe0f FLOAT"},{"location":"python/data-types/#float-ustida-amallar","text":"a = 5.5 # a o'zgaruvchisiga 5.5 (float) qiymat berildi b = 2.0 # b o'zgaruvchisiga 2.0 (float) qiymat berildi print(\"Qo\u2018shish:\", a + b) # a va b ni qo\u2018shish => 7.5 print(\"Ayirish:\", a - b) # a dan b ni ayirish => 3.5 print(\"Ko\u2018paytirish:\", a * b) # a va b ni ko\u2018paytirish => 11.0 print(\"Bo\u2018lish:\", a / b) # a ni b ga bo\u2018lish (haqiqiy bo\u2018lish) => 2.75 print(\"Butun qismga bo\u2018lish:\", a // b) # a ni b ga bo\u2018lish va butun qismni olish => 2.0 print(\"Qoldiq:\", a % b) # a ni b ga bo\u2018lishda qolgan qoldiq => 1.5 print(\"Daraja:\", a ** b) # a ni b-darajaga ko\u2018tarish => 30.25","title":"\u2747\ufe0f FLOAT USTIDA AMALLAR"},{"location":"python/data-types/#complex","text":"\ud83d\udccc Complex sonlar \u2014 bu ikkita qismdan iborat sonlar: haqiqiy qism (real part) va mavhum qism (imaginary part). \ud83d\udccc Pythonda murakkab sonlar complex tipida saqlanadi. Pythonda imaginary part j yoki J harfi bilan ifodalanadi (elektronika va fizikada j ishlatiladi, matematikada esa i ).","title":"\u2705 COMPLEX"},{"location":"python/data-types/#complex-son-yaratish","text":"# Kompleks son yaratamiz: real part 3, imaginary part 4j z1 = 3 + 4j # Kompleks sonni konsolga chiqaramiz print(z1) # Natija: (3+4j)","title":"\u2747\ufe0f COMPLEX SON YARATISH"},{"location":"python/data-types/#konstanta","text":"\ud83d\udccc Python dasturlash tilida \"constant\" deb ataladigan o'zgaruvchilar mavjud emas, lekin dasturchilar odatda o'zgaruvchilarni konstantalar sifatida ishlatishadi. Bu odatda o'zgaruvchining qiymati dastur davomida o'zgarmasligini anglatadi. Konstantalarni nomlash: Konstantalarni nomlashda katta harflar ishlatiladi. Bu, dasturchiga o'zgaruvchining qiymati o'zgarmasligini anglatadi. # Bu yerda PI nomli konstanta e'lon qilinmoqda # Odatda konstanta nomlari katta harflarda yoziladi # PI ning qiymati o\u2018zgarmaydi va doim 3.14159 bo\u2018lib qoladi PI = 3.14159 # Bu yerda MAX_USERS nomli konstanta e'lon qilinmoqda # Bu maksimum foydalanuvchilar sonini bildiradi MAX_USERS = 100 Konstantalarni modullarda saqlash: Konstantalarni alohida Python faylida (modulda) saqlash tavsiya etiladi. Bu, konstantalarni boshqa fayllarda ishlatishni osonlashtiradi. Misol uchun, constants.py nomli fayl yaratib, unda konstantalarni saqlash mumkin: # constants.py # constants.py faylida o'zgarmas (konstanta) qiymatlar saqlanadi # Bu konstantalar boshqa fayllardan import qilib ishlatiladi # Aylana uchun PI qiymati PI = 3.14159 # Maksimal foydalanuvchilar soni MAX_USERS = 100 Keyin boshqa faylda bu konstantalarni ishlatish mumkin: # main.py # constants.py modulidagi konstantalarni import qilamiz import constants # PI konstantasini terminalga chiqaramiz print(constants.PI) # Natija: 3.14159 # MAX_USERS konstantasini terminalga chiqaramiz print(constants.MAX_USERS) # Natija: 100 Konstantalarni o'zgartirishga urinish: Python tilida konstantalarni o'zgartirish mumkin, lekin bu tavsiya etilmaydi. Agar siz konstantani o'zgartirmoqchi bo'lsangiz, bu dastur xatolarga olib kelishi mumkin. # PI konstanta deb qaralmoqda, ya'ni doimiy qiymat sifatida ishlatiladi PI = 3.14159 # Ammo bu yerda PI qiymatini o'zgartirib yubordik # Bu sintaktik jihatdan xato emas, lekin yomon amaliyot hisoblanadi # Chunki dasturchilar PI o'zgarmaydi deb o'ylaydi PI = 3.14 # \u274c Bu tavsiya etilmaydi # Dastur davomida bu o'zgarish kutilmagan xatolarga olib kelishi mumkin print(\"PI qiymati:\", PI) # Natija: 3.14","title":"\u2705 KONSTANTA"},{"location":"python/data-types/#amaliyot","text":"","title":"\u2705 AMALIYOT"},{"location":"python/data-types/#1-topshiriq-string-birlashtirish","text":"Foydalanuvchidan ism va familiya input() orqali oling. Ularni birlashtirib, \"F.I.O: \" tarzida ekranga chiqaring.","title":"\u2705 1-topshiriq: String birlashtirish"},{"location":"python/data-types/#2-topshiriq-string-uzunligini-topish","text":"Foydalanuvchidan matn input() orqali oling va uning uzunligini len() yordamida aniqlang.","title":"\u2705 2-topshiriq: String uzunligini topish"},{"location":"python/data-types/#3-topshiriq-string-indekslash-va-kesish","text":"\"Python dasturlash\" matnini o\u2018zgaruvchiga saqlang. Birinchi harfini, oxirgi harfini va \"dastur\" so\u2018zini alohida ekranga chiqaring.","title":"\u2705 3-topshiriq: String indekslash va kesish"},{"location":"python/data-types/#4-topshiriq-string-kopaytirish","text":"Foydalanuvchidan so\u2018z oling va uni 4 marta ketma-ket chiqaruvchi dastur yozing.","title":"\u2705 4-topshiriq: String ko\u2018paytirish"},{"location":"python/data-types/#5-topshiriq-f-stringdan-foydalanish","text":"Foydalanuvchidan ism va yosh input() orqali olib, quyidagicha f-string yordamida chiqaring. Misol: Ismingiz: Aziza, Yoshingiz: 19","title":"\u2705 5-topshiriq: F-stringdan foydalanish"},{"location":"python/data-types/#6-topshiriq-string-metodlari-bilan-ishlash","text":"Foydalanuvchidan matn input() orqali oling. Uni: - katta harflarga, - kichik harflarga, - birinchi harfini katta qilishga o\u2018zgartirib, har birini alohida ekranga chiqaring.","title":"\u2705 6-topshiriq: String metodlari bilan ishlash"},{"location":"python/data-types/#7-topshiriq-replace-va-split-metodi","text":"Foydalanuvchidan telefon raqami oling (masalan: \"+998 90 123 45 67\") va uni bo\u2018sh joylar va \"+\" belgisidan tozalang, so\u2018ng split() yordamida 2 xonali bloklarga ajrating.","title":"\u2705 7-topshiriq: .replace() va .split() metodi"},{"location":"python/data-types/#8-topshiriq-join-va-count","text":"Foydalanuvchidan so\u2018zlar ro\u2018yxatini input() orqali so\u2018rab, ularni vergul bilan birlashtiring va \"a\" harfi necha marta qatnashganini hisoblang.","title":"\u2705 8-topshiriq: .join() va .count()"},{"location":"python/data-types/#9-topshiriq-find-startswith-endswith","text":"Foydalanuvchidan matn va so\u2018z oling. Matnda so\u2018z qayerdan boshlanishini, matn aynan shu so\u2018z bilan boshlanish yoki tugashini aniqlang.","title":"\u2705 9-topshiriq: .find(), .startswith(), .endswith()"},{"location":"python/data-types/#10-topshiriq-integer-va-float-ustida-amallar","text":"Foydalanuvchidan ikkita butun son va bir float son oling. Ularning yig\u2018indisi, ko\u2018paytmasi va o\u2018zaro bo\u2018linmasini hisoblang.","title":"\u2705 10-topshiriq: Integer va float ustida amallar"},{"location":"python/data-types/#11-topshiriq-uzoq-sonni-guruhlash","text":"Bank hisobingizdagi pul miqdorini pastki chiziq yordamida o\u2018qish oson bo\u2018ladigan formatda yozing va ekranga chiqaring.","title":"\u2705 11-topshiriq: Uzoq sonni guruhlash"},{"location":"python/data-types/#12-topshiriq-type-casting-turini-ozgartirish","text":"Foydalanuvchidan raqamli matn oling va uni int, float, str va bool turiga o\u2018tkazib, har birini va turini chiqaring.","title":"\u2705 12-topshiriq: Type casting (turini o\u2018zgartirish)"},{"location":"python/data-types/#13-topshiriq-kompleks-son","text":"Real va imag qismlarni input orqali olib, kompleks son yarating va uni ekranga chiqaring.","title":"\u2705 13-topshiriq: Kompleks son"},{"location":"python/data-types/#14-topshiriq-konstantadan-foydalanish","text":"PI va MAX_USERS konstantasini yarating (katta harflar bilan). Ularni ekranga chiqaruvchi dastur yozing.","title":"\u2705 14-topshiriq: Konstantadan foydalanish"},{"location":"python/data-types/#15-topshiriq-foydalanuvchi-yoshi-va-input","text":"Foydalanuvchidan tug\u2018ilgan yilini input orqali olib, yoshini hisoblab chiqaring (hozirgi yilni o\u2018zingiz yozing). Misol: Siz 20 yoshdasiz.","title":"\u2705 15-topshiriq: Foydalanuvchi yoshi va input"},{"location":"python/database/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 15-DARS DATABASE \u2705 MA'LUMOTLAR BAZASI VA PYTHON HAQIDA TUSHUNCHA [!NOTE] SQLite \u2014 bu kichik, mustaqil va yengil ma\u2019lumotlar bazasi tizimi. U server talab qilmaydi, ya\u2019ni barcha ma\u2019lumotlar bitta faylda saqlanadi. Python sqlite3 moduli orqali biz SQLite bilan to\u2018g\u2018ridan-to\u2018g\u2018ri ishlashimiz mumkin. \u2705 SQLite AFZALLIKLARI: \u2705 Kichik va tez ishlaydi \u2705 Server talab qilmaydi \u2705 Platformadan mustaqil \u2705 Python\u2019da sqlite3 moduli bilan oson ishlaydi \u2705 DATABASE BILAN ISHLASH BOSQICHLARI \ud83d\udccc SQLite bilan ishlash uchun 5 asosiy bosqich mavjud: Bazaga ulanish \u2013 SQLite bazasiga ulanish yoki yangi fayl yaratish. Jadval yaratish \u2013 Ma\u2019lumotlarni saqlash uchun jadval hosil qilish. Ma\u2019lumot qo\u2018shish \u2013 Bazaga yangi malumotlar kiritish. Ma\u2019lumotlarni o\u2018qish \u2013 Jadvaldagi ma\u2019lumotlarni olish. Ma\u2019lumotlarni yangilash va o\u2018chirish \u2013 Malumotlarni o\u2018zgartirish yoki o\u2018chirish. \u2705 DATABASE BILAN ISHLASHNI BOSHLASH \u2705 MA'LUMOTLAR BAZASIGA ULANISH \ud83d\udccc Ma\u2019lumotlar bazasiga ulanish uchun sqlite3.connect() funksiyasidan foydalanamiz. # sqlite3 modulini import qilamiz \u2014 SQLite ma'lumotlar bazasi bilan ishlash uchun kerak import sqlite3 # students.db nomli SQLite ma'lumotlar bazasiga ulanamiz # Agar bunday fayl bo\u2018lmasa, yangi ma'lumotlar bazasi yaratiladi conn = sqlite3.connect(\"students.db\") # Cursor obyekti yaratamiz \u2014 bu orqali SQL buyruqlarini bajarish mumkin bo\u2018ladi cur = conn.cursor() # Bazaga muvaffaqiyatli ulanganimiz haqida xabar chiqaramiz print(\"Ma\u2019lumotlar bazasiga bog\u2018landik!\") # Ma'lumotlar bazasi bilan ish tugagach, ulanishni yopamiz conn.close() \u2705 JADVAL YARATISH \ud83d\udccc Jadval yaratish uchun CREATE TABLE SQL buyrug\u2018idan foydalanamiz. # sqlite3 modulini import qilamiz \u2014 SQLite bilan ishlash uchun kerak import sqlite3 # Bazaga ulanamiz (\"students.db\" fayl ko\u2018rinishida bo\u2018ladi) conn = sqlite3.connect(\"students.db\") # Cursor obyekti yaratamiz \u2014 SQL buyruqlarini bajarish uchun kerak cur = conn.cursor() # Studentlar jadvalini yaratamiz agar mavjud bo\u2018lmasa # Jadvalda quyidagi ustunlar bo\u2018ladi: # id - unikal ID, avtomatik raqamlanadi # name - talabaning ismi (string, bo\u2018sh bo\u2018lishi mumkin emas) # age - talabaning yoshi (integer, bo\u2018sh bo\u2018lishi mumkin emas) # grade - talabaning bahosi yoki kursi (string, bo\u2018sh bo\u2018lishi mumkin emas) cur.execute(\"\"\" CREATE TABLE IF NOT EXISTS students ( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, age INTEGER NOT NULL, grade TEXT NOT NULL ) \"\"\") # Jadval yaratildi degan xabarni chiqaramiz print(\"Jadval yaratildi!\") # O\u2018zgartirishlarni saqlaymiz (commit qilamiz) conn.commit() # Bazaga ulanishni yopamiz conn.close() \u2705 MA'LUMOT QO'SHISH \ud83d\udccc Ma\u2019lumot qo\u2018shish uchun INSERT INTO buyrug\u2018idan foydalanamiz. # Bazaga ulanamiz conn = sqlite3.connect(\"students.db\") # Cursor obyekti yaratamiz cur = conn.cursor() # students jadvaliga yangi talaba ma'lumotini qo\u2018shamiz # SQL so\u2018rovda parametrlar o\u2018rnida ? ishlatiladi, bu xavfsizroq va SQL injection xavfini kamaytiradi # (\"Ali\", 20, \"A\") \u2014 bu parametrlar name, age va grade ustunlariga mos keladi cur.execute(\"INSERT INTO students (name, age, grade) VALUES (?, ?, ?)\", (\"Ali\", 20, \"A\")) # Ma'lumot qo\u2018shilgani haqida xabar chiqaramiz print(\"Ma\u2019lumot qo\u2018shildi!\") # O\u2018zgarishlarni saqlaymiz conn.commit() # Bazaga ulanishni yopamiz conn.close() \ud83d\udccc Agar bir nechta ma\u2019lumot qo\u2018shmoqchi bo\u2018lsak: # Bazaga ulanamiz conn = sqlite3.connect(\"students.db\") # Cursor obyekti yaratamiz cur = conn.cursor() # Bir nechta talaba ma'lumotlarini ro'yxat shaklida tayyorlaymiz students = [ (\"Vali\", 19, \"B\"), (\"Hasan\", 21, \"A\"), (\"Shahnoza\", 20, \"C\") ] # Ro'yxatdagi barcha ma'lumotlarni jadvalga bir vaqtning o'zida qo'shamiz cur.executemany(\"INSERT INTO students (name, age, grade) VALUES (?, ?, ?)\", students) # Ma'lumotlar qo'shilganini bildiruvchi xabar chiqaramiz print(\"Bir nechta yozuv qo\u2018shildi!\") # O'zgarishlarni saqlaymiz conn.commit() # Bazaga ulanishni yopamiz conn.close() \u2705 MA'LUMOTLARNI O'QISH \ud83d\udccc Jadvaldagi barcha ma\u2019lumotlarni olish uchun SELECT buyrug\u2018idan foydalanamiz. # Bazaga ulanamiz conn = sqlite3.connect(\"students.db\") # Cursor obyekti yaratamiz cur = conn.cursor() # students jadvalidan barcha ustunlarni tanlab olamiz cur.execute(\"SELECT * FROM students\") # \"SELECT *\" \u2014 jadvaldagi barcha ustunlar va qatorlar # Barcha natijalarni list ko\u2018rinishida olamiz students = cur.fetchall() # Har bir talaba ma'lumotini alohida chiqaramiz for student in students: print(student) # Bazaga ulanishni yopamiz conn.close() \ud83d\udccc Agar faqat bitta ma\u2019lumot olish kerak bo\u2018lsa: # students jadvalidan name ustuni \"Ali\" ga teng bo\u2018lgan birinchi qatorni tanlab olish cur.execute(\"SELECT * FROM students WHERE name = ?\", (\"Ali\",)) # Natijadan faqat bitta qatorni olish (birinchi topilgan) student = cur.fetchone() # Topilgan yozuvni konsolga chiqarish print(student) \u2705 MA'LUMOTLARNI YANGILASH \ud83d\udccc Ma\u2019lumotlarni o\u2018zgartirish uchun UPDATE buyrug\u2018idan foydalanamiz. # Bazaga ulanamiz conn = sqlite3.connect(\"students.db\") # Cursor obyekti yaratamiz cur = conn.cursor() # students jadvalidagi name ustuni \"Ali\" bo\u2018lgan qatorni age ustunini 21 ga o\u2018zgartiramiz cur.execute(\"UPDATE students SET age = ? WHERE name = ?\", (21, \"Ali\")) # Yangilanganini bildiruvchi xabar chiqaramiz print(\"Ma\u2019lumot yangilandi!\") # O\u2018zgarishlarni saqlaymiz conn.commit() # Bazaga ulanishni yopamiz conn.close() \u2705 MA'LUMOTLARNI O'CHIRISH \ud83d\udccc Ma\u2019lumotlarni o\u2018chirish uchun DELETE FROM buyrug\u2018idan foydalanamiz. # Bazaga ulanamiz conn = sqlite3.connect(\"students.db\") # Cursor obyekti yaratamiz cur = conn.cursor() # students jadvalidan name ustuni \"Ali\" bo\u2018lgan qatorni o\u2018chiramiz cur.execute(\"DELETE FROM students WHERE name = ?\", (\"Ali\",)) # O\u2018chirildi degan xabarni chiqaramiz print(\"Ma\u2019lumot o\u2018chirildi!\") # O\u2018zgarishlarni saqlaymiz conn.commit() # Bazaga ulanishni yopamiz conn.close() \u2705 XATOLIKLARNI USHLASH \ud83d\udccc Ma\u2019lumotlar bazasi bilan ishlaganda xatoliklarni ushlash muhim. # try-except-finally blokida kod yozamiz \u2014 xatolik yuz berganda uni ushlab, boshqarish uchun try: # Bazaga ulanamiz conn = sqlite3.connect(\"students.db\") # Cursor obyekti yaratamiz cur = conn.cursor() # students jadvalidan barcha ustunlar va qatorlarni olamiz cur.execute(\"SELECT * FROM students\") # Natijalarni list sifatida saqlaymiz students = cur.fetchall() # Har bir ma'lumotni ekranga chiqaramiz for student in students: print(student) # Agar sqlite3 bilan bog\u2018liq xatolik yuz bersa, uni ushlaymiz va xabar chiqaramiz except sqlite3.Error as e: print(\"Xatolik yuz berdi:\", e) # Nihoyat, kod tugagach (xato bo\u2018lsa ham yoki bo\u2018lmasa ham) bazaga ulanishni yopamiz finally: conn.close() \u2705 AMALIYOT \u2705 1-topshiriq: \"library.db\" nomli SQLite bazasini yarating. \"books\" nomli jadval yarating ( id , title , author , year ). - id INTEGER PRIMARY KEY AUTOINCREMENT - title , author , year NOT NULL \u2705 2-topshiriq: \"books\" jadvaliga quyidagi ma\u2019lumotlarni kiriting ( executemany() funksiyasidan foydalaning): | id | title | author | year | |-----|--------------------|---------------|-------| | 1 | Python Basics | John Smith | 2020 | | 2 | SQL for Beginners | Alice Brown | 2018 | | 3 | Data Science Guide | Michael Clark | 2021 | \u2705 3-topshiriq: \"books\" jadvalidagi barcha kitoblarni ekranga chiqaring. Natija id , title , author , year formatida bo\u2018lsin. \u2705 4-topshiriq: Foydalanuvchidan muallif nomini so\u2018rang. Shu muallif tomonidan yozilgan barcha kitoblarni chiqaring. Agar kitob topilmasa, \"Bu muallifning kitoblari yo'q\" deb chiqaring. \u2705 5-topshiriq: \"SQL for Beginners\" kitobining chiqish yilini 2019 ga o\u2018zgartiring. Yangilangan ma\u2019lumotni ekranga chiqaring. \u2705 6-topshiriq: \"books\" jadvalidan chiqish yili eng kichik bo\u2018lgan kitobni toping (eng eski kitob). \u2705 7-topshiriq: \"books\" jadvalidan 2020 yildan keyin chiqqan kitoblarni chiqarish kodini yozing. \u2705 8-topshiriq: \"Data Science Guide\" kitobini \"books\" jadvalidan o\u2018chiring. O\u2018chirilganidan keyin jadvaldagi barcha kitoblarni ekranga chiqaring. \u2705 9-topshiriq: \"university.db\" bazasini yarating va \"students\" jadvalini yarating: - id INTEGER PRIMARY KEY AUTOINCREMENT - name TEXT NOT NULL - age INTEGER NOT NULL - faculty TEXT NOT NULL \u2705 10-topshiriq: \"students\" jadvaliga kamida 5 ta talaba haqida ma\u2019lumot kiriting. \u2705 11-topshiriq: Foydalanuvchidan fakultet nomini so\u2018rang va shu fakultetdagi talabalarni chiqaring. \u2705 12-topshiriq: \"students\" jadvalidan eng yosh talabani toping. \u2705 13-topshiriq: \"name\" ismli talabaning yoshini 21 ga o\u2018zgartiring. \u2705 14-topshiriq: \"students\" jadvalidagi har bir fakultet bo\u2018yicha nechta talaba borligini hisoblang. \u2705 15-topshiriq: \"students\" jadvalidan eng ko\u2018p talabaga ega bo\u2018lgan fakultetni aniqlang.","title":"Database"},{"location":"python/database/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/database/#15-dars-database","text":"","title":"\ud83e\udde9 15-DARS DATABASE"},{"location":"python/database/#malumotlar-bazasi-va-python-haqida-tushuncha","text":"[!NOTE] SQLite \u2014 bu kichik, mustaqil va yengil ma\u2019lumotlar bazasi tizimi. U server talab qilmaydi, ya\u2019ni barcha ma\u2019lumotlar bitta faylda saqlanadi. Python sqlite3 moduli orqali biz SQLite bilan to\u2018g\u2018ridan-to\u2018g\u2018ri ishlashimiz mumkin. \u2705 SQLite AFZALLIKLARI: \u2705 Kichik va tez ishlaydi \u2705 Server talab qilmaydi \u2705 Platformadan mustaqil \u2705 Python\u2019da sqlite3 moduli bilan oson ishlaydi","title":"\u2705 MA'LUMOTLAR BAZASI VA PYTHON HAQIDA TUSHUNCHA"},{"location":"python/database/#database-bilan-ishlash-bosqichlari","text":"\ud83d\udccc SQLite bilan ishlash uchun 5 asosiy bosqich mavjud: Bazaga ulanish \u2013 SQLite bazasiga ulanish yoki yangi fayl yaratish. Jadval yaratish \u2013 Ma\u2019lumotlarni saqlash uchun jadval hosil qilish. Ma\u2019lumot qo\u2018shish \u2013 Bazaga yangi malumotlar kiritish. Ma\u2019lumotlarni o\u2018qish \u2013 Jadvaldagi ma\u2019lumotlarni olish. Ma\u2019lumotlarni yangilash va o\u2018chirish \u2013 Malumotlarni o\u2018zgartirish yoki o\u2018chirish.","title":"\u2705 DATABASE BILAN ISHLASH BOSQICHLARI"},{"location":"python/database/#database-bilan-ishlashni-boshlash","text":"","title":"\u2705 DATABASE BILAN ISHLASHNI BOSHLASH"},{"location":"python/database/#malumotlar-bazasiga-ulanish","text":"\ud83d\udccc Ma\u2019lumotlar bazasiga ulanish uchun sqlite3.connect() funksiyasidan foydalanamiz. # sqlite3 modulini import qilamiz \u2014 SQLite ma'lumotlar bazasi bilan ishlash uchun kerak import sqlite3 # students.db nomli SQLite ma'lumotlar bazasiga ulanamiz # Agar bunday fayl bo\u2018lmasa, yangi ma'lumotlar bazasi yaratiladi conn = sqlite3.connect(\"students.db\") # Cursor obyekti yaratamiz \u2014 bu orqali SQL buyruqlarini bajarish mumkin bo\u2018ladi cur = conn.cursor() # Bazaga muvaffaqiyatli ulanganimiz haqida xabar chiqaramiz print(\"Ma\u2019lumotlar bazasiga bog\u2018landik!\") # Ma'lumotlar bazasi bilan ish tugagach, ulanishni yopamiz conn.close()","title":"\u2705 MA'LUMOTLAR BAZASIGA ULANISH"},{"location":"python/database/#jadval-yaratish","text":"\ud83d\udccc Jadval yaratish uchun CREATE TABLE SQL buyrug\u2018idan foydalanamiz. # sqlite3 modulini import qilamiz \u2014 SQLite bilan ishlash uchun kerak import sqlite3 # Bazaga ulanamiz (\"students.db\" fayl ko\u2018rinishida bo\u2018ladi) conn = sqlite3.connect(\"students.db\") # Cursor obyekti yaratamiz \u2014 SQL buyruqlarini bajarish uchun kerak cur = conn.cursor() # Studentlar jadvalini yaratamiz agar mavjud bo\u2018lmasa # Jadvalda quyidagi ustunlar bo\u2018ladi: # id - unikal ID, avtomatik raqamlanadi # name - talabaning ismi (string, bo\u2018sh bo\u2018lishi mumkin emas) # age - talabaning yoshi (integer, bo\u2018sh bo\u2018lishi mumkin emas) # grade - talabaning bahosi yoki kursi (string, bo\u2018sh bo\u2018lishi mumkin emas) cur.execute(\"\"\" CREATE TABLE IF NOT EXISTS students ( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, age INTEGER NOT NULL, grade TEXT NOT NULL ) \"\"\") # Jadval yaratildi degan xabarni chiqaramiz print(\"Jadval yaratildi!\") # O\u2018zgartirishlarni saqlaymiz (commit qilamiz) conn.commit() # Bazaga ulanishni yopamiz conn.close()","title":"\u2705 JADVAL YARATISH"},{"location":"python/database/#malumot-qoshish","text":"\ud83d\udccc Ma\u2019lumot qo\u2018shish uchun INSERT INTO buyrug\u2018idan foydalanamiz. # Bazaga ulanamiz conn = sqlite3.connect(\"students.db\") # Cursor obyekti yaratamiz cur = conn.cursor() # students jadvaliga yangi talaba ma'lumotini qo\u2018shamiz # SQL so\u2018rovda parametrlar o\u2018rnida ? ishlatiladi, bu xavfsizroq va SQL injection xavfini kamaytiradi # (\"Ali\", 20, \"A\") \u2014 bu parametrlar name, age va grade ustunlariga mos keladi cur.execute(\"INSERT INTO students (name, age, grade) VALUES (?, ?, ?)\", (\"Ali\", 20, \"A\")) # Ma'lumot qo\u2018shilgani haqida xabar chiqaramiz print(\"Ma\u2019lumot qo\u2018shildi!\") # O\u2018zgarishlarni saqlaymiz conn.commit() # Bazaga ulanishni yopamiz conn.close() \ud83d\udccc Agar bir nechta ma\u2019lumot qo\u2018shmoqchi bo\u2018lsak: # Bazaga ulanamiz conn = sqlite3.connect(\"students.db\") # Cursor obyekti yaratamiz cur = conn.cursor() # Bir nechta talaba ma'lumotlarini ro'yxat shaklida tayyorlaymiz students = [ (\"Vali\", 19, \"B\"), (\"Hasan\", 21, \"A\"), (\"Shahnoza\", 20, \"C\") ] # Ro'yxatdagi barcha ma'lumotlarni jadvalga bir vaqtning o'zida qo'shamiz cur.executemany(\"INSERT INTO students (name, age, grade) VALUES (?, ?, ?)\", students) # Ma'lumotlar qo'shilganini bildiruvchi xabar chiqaramiz print(\"Bir nechta yozuv qo\u2018shildi!\") # O'zgarishlarni saqlaymiz conn.commit() # Bazaga ulanishni yopamiz conn.close()","title":"\u2705 MA'LUMOT QO'SHISH"},{"location":"python/database/#malumotlarni-oqish","text":"\ud83d\udccc Jadvaldagi barcha ma\u2019lumotlarni olish uchun SELECT buyrug\u2018idan foydalanamiz. # Bazaga ulanamiz conn = sqlite3.connect(\"students.db\") # Cursor obyekti yaratamiz cur = conn.cursor() # students jadvalidan barcha ustunlarni tanlab olamiz cur.execute(\"SELECT * FROM students\") # \"SELECT *\" \u2014 jadvaldagi barcha ustunlar va qatorlar # Barcha natijalarni list ko\u2018rinishida olamiz students = cur.fetchall() # Har bir talaba ma'lumotini alohida chiqaramiz for student in students: print(student) # Bazaga ulanishni yopamiz conn.close() \ud83d\udccc Agar faqat bitta ma\u2019lumot olish kerak bo\u2018lsa: # students jadvalidan name ustuni \"Ali\" ga teng bo\u2018lgan birinchi qatorni tanlab olish cur.execute(\"SELECT * FROM students WHERE name = ?\", (\"Ali\",)) # Natijadan faqat bitta qatorni olish (birinchi topilgan) student = cur.fetchone() # Topilgan yozuvni konsolga chiqarish print(student)","title":"\u2705 MA'LUMOTLARNI O'QISH"},{"location":"python/database/#malumotlarni-yangilash","text":"\ud83d\udccc Ma\u2019lumotlarni o\u2018zgartirish uchun UPDATE buyrug\u2018idan foydalanamiz. # Bazaga ulanamiz conn = sqlite3.connect(\"students.db\") # Cursor obyekti yaratamiz cur = conn.cursor() # students jadvalidagi name ustuni \"Ali\" bo\u2018lgan qatorni age ustunini 21 ga o\u2018zgartiramiz cur.execute(\"UPDATE students SET age = ? WHERE name = ?\", (21, \"Ali\")) # Yangilanganini bildiruvchi xabar chiqaramiz print(\"Ma\u2019lumot yangilandi!\") # O\u2018zgarishlarni saqlaymiz conn.commit() # Bazaga ulanishni yopamiz conn.close()","title":"\u2705 MA'LUMOTLARNI YANGILASH"},{"location":"python/database/#malumotlarni-ochirish","text":"\ud83d\udccc Ma\u2019lumotlarni o\u2018chirish uchun DELETE FROM buyrug\u2018idan foydalanamiz. # Bazaga ulanamiz conn = sqlite3.connect(\"students.db\") # Cursor obyekti yaratamiz cur = conn.cursor() # students jadvalidan name ustuni \"Ali\" bo\u2018lgan qatorni o\u2018chiramiz cur.execute(\"DELETE FROM students WHERE name = ?\", (\"Ali\",)) # O\u2018chirildi degan xabarni chiqaramiz print(\"Ma\u2019lumot o\u2018chirildi!\") # O\u2018zgarishlarni saqlaymiz conn.commit() # Bazaga ulanishni yopamiz conn.close()","title":"\u2705 MA'LUMOTLARNI O'CHIRISH"},{"location":"python/database/#xatoliklarni-ushlash","text":"\ud83d\udccc Ma\u2019lumotlar bazasi bilan ishlaganda xatoliklarni ushlash muhim. # try-except-finally blokida kod yozamiz \u2014 xatolik yuz berganda uni ushlab, boshqarish uchun try: # Bazaga ulanamiz conn = sqlite3.connect(\"students.db\") # Cursor obyekti yaratamiz cur = conn.cursor() # students jadvalidan barcha ustunlar va qatorlarni olamiz cur.execute(\"SELECT * FROM students\") # Natijalarni list sifatida saqlaymiz students = cur.fetchall() # Har bir ma'lumotni ekranga chiqaramiz for student in students: print(student) # Agar sqlite3 bilan bog\u2018liq xatolik yuz bersa, uni ushlaymiz va xabar chiqaramiz except sqlite3.Error as e: print(\"Xatolik yuz berdi:\", e) # Nihoyat, kod tugagach (xato bo\u2018lsa ham yoki bo\u2018lmasa ham) bazaga ulanishni yopamiz finally: conn.close()","title":"\u2705 XATOLIKLARNI USHLASH"},{"location":"python/database/#amaliyot","text":"","title":"\u2705 AMALIYOT"},{"location":"python/database/#1-topshiriq","text":"\"library.db\" nomli SQLite bazasini yarating. \"books\" nomli jadval yarating ( id , title , author , year ). - id INTEGER PRIMARY KEY AUTOINCREMENT - title , author , year NOT NULL","title":"\u2705 1-topshiriq:"},{"location":"python/database/#2-topshiriq","text":"\"books\" jadvaliga quyidagi ma\u2019lumotlarni kiriting ( executemany() funksiyasidan foydalaning): | id | title | author | year | |-----|--------------------|---------------|-------| | 1 | Python Basics | John Smith | 2020 | | 2 | SQL for Beginners | Alice Brown | 2018 | | 3 | Data Science Guide | Michael Clark | 2021 |","title":"\u2705 2-topshiriq:"},{"location":"python/database/#3-topshiriq","text":"\"books\" jadvalidagi barcha kitoblarni ekranga chiqaring. Natija id , title , author , year formatida bo\u2018lsin.","title":"\u2705 3-topshiriq:"},{"location":"python/database/#4-topshiriq","text":"Foydalanuvchidan muallif nomini so\u2018rang. Shu muallif tomonidan yozilgan barcha kitoblarni chiqaring. Agar kitob topilmasa, \"Bu muallifning kitoblari yo'q\" deb chiqaring.","title":"\u2705 4-topshiriq:"},{"location":"python/database/#5-topshiriq","text":"\"SQL for Beginners\" kitobining chiqish yilini 2019 ga o\u2018zgartiring. Yangilangan ma\u2019lumotni ekranga chiqaring.","title":"\u2705 5-topshiriq:"},{"location":"python/database/#6-topshiriq","text":"\"books\" jadvalidan chiqish yili eng kichik bo\u2018lgan kitobni toping (eng eski kitob).","title":"\u2705 6-topshiriq:"},{"location":"python/database/#7-topshiriq","text":"\"books\" jadvalidan 2020 yildan keyin chiqqan kitoblarni chiqarish kodini yozing.","title":"\u2705 7-topshiriq:"},{"location":"python/database/#8-topshiriq","text":"\"Data Science Guide\" kitobini \"books\" jadvalidan o\u2018chiring. O\u2018chirilganidan keyin jadvaldagi barcha kitoblarni ekranga chiqaring.","title":"\u2705 8-topshiriq:"},{"location":"python/database/#9-topshiriq","text":"\"university.db\" bazasini yarating va \"students\" jadvalini yarating: - id INTEGER PRIMARY KEY AUTOINCREMENT - name TEXT NOT NULL - age INTEGER NOT NULL - faculty TEXT NOT NULL","title":"\u2705 9-topshiriq:"},{"location":"python/database/#10-topshiriq","text":"\"students\" jadvaliga kamida 5 ta talaba haqida ma\u2019lumot kiriting.","title":"\u2705 10-topshiriq:"},{"location":"python/database/#11-topshiriq","text":"Foydalanuvchidan fakultet nomini so\u2018rang va shu fakultetdagi talabalarni chiqaring.","title":"\u2705 11-topshiriq:"},{"location":"python/database/#12-topshiriq","text":"\"students\" jadvalidan eng yosh talabani toping.","title":"\u2705 12-topshiriq:"},{"location":"python/database/#13-topshiriq","text":"\"name\" ismli talabaning yoshini 21 ga o\u2018zgartiring.","title":"\u2705 13-topshiriq:"},{"location":"python/database/#14-topshiriq","text":"\"students\" jadvalidagi har bir fakultet bo\u2018yicha nechta talaba borligini hisoblang.","title":"\u2705 14-topshiriq:"},{"location":"python/database/#15-topshiriq","text":"\"students\" jadvalidan eng ko\u2018p talabaga ega bo\u2018lgan fakultetni aniqlang.","title":"\u2705 15-topshiriq:"},{"location":"python/dictionaries/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 7-DARS DICTIONARY \u2705 DICTIONARY NIMA? \ud83d\udccc Python dasturlash tilida dictionary \u2014 bu kalit-qiymat (key-value) juftliklarini saqlovchi ma\u2019lumotlar turidir. Har bir kalit yagona bo\u2018ladi va unga mos qiymat bo\u2018ladi. Dictionary ma\u2019lumotlar {} qavslar ichida yoziladi va har bir kalit bilan qiymat : bilan ajratiladi. Bu ma'lumot turi ma\u2019lumotlarni tartibli saqlash, oson topish va boshqarish uchun ishlatiladi. \u2705 DICTIONARY YARATISH \u2747\ufe0f BO'SH DICTIONARY YARATISH # Bo'sh dictionary yaratish user_info = {} \u2747\ufe0f E'LEMENTLAR BILAN DICTIONARY YARATISH # Kalit-qiymatlar bilan dictionary yaratish user_info = { 'name': 'Alice', # Foydalanuvchining ismi 'age': 30, # Foydalanuvchining yoshi 'city': 'New York' # Foydalanuvchining shahri } \u2705 DICTIONARYGA E'LEMENT QO'SHISH \ud83d\udccc Dictionaryga e'lement qo'shish uchun o'zgaruvchi nomidan kn [] qavs ochib ichiga keyni beramiz, undan keyin qo'shmoqchi bo'lgan value yani qiymatni beramiz. # Bo'sh dictionary yaratilyapti student_info = {} # Dictionary ga yangi kalit-qiymat juftligi qo\u2018shilmoqda: ism student_info[\"name\"] = \"Umid\" # Dictionary ga yangi kalit-qiymat juftligi qo\u2018shilmoqda: yosh student_info[\"age\"] = 20 # Dictionary ga yangi kalit-qiymat juftligi qo\u2018shilmoqda: kurs student_info[\"course\"] = \"Python Programming\" # Dictionary ga yangi kalit-qiymat juftligi qo\u2018shilmoqda: talabalik holati student_info[\"is_student\"] = True # Natijani ekranga chiqarish print(student_info) \u2705 E'LEMENTLARNI YANGILASH # Talaba haqida ma'lumotlarni saqlovchi dictionary yaratilmoqda student_profile = { \"full_name\": \"Azizbek Tursunov\", \"age\": 19, \"faculty\": \"Computer Science\", \"is_active\": True } # \"age\" kalitiga yangi yosh qiymati berilmoqda (19 dan 20 ga yangilanmoqda) student_profile[\"age\"] = 20 # \"faculty\" kalitidagi qiymat o\u2018zgartirilmoqda (Computer Science dan Data Science ga) student_profile[\"faculty\"] = \"Data Science\" # \"is_active\" kalitidagi qiymat yangilanmoqda (True dan False ga) student_profile[\"is_active\"] = False # Natija ekranga chiqarilmoqda print(student_profile) \u2705 E'LEMENT O'CHIRISH \u2747\ufe0f DEL \ud83d\udccc Lug'at ichidagi e'lementlarni o'chirish uchun del funksiyasidan foydalanamiz. # Kitob haqida ma'lumotlar saqlanayotgan dictionary yaratilmoqda book_info = { \"title\": \"Python Basics\", \"author\": \"John Smith\", \"year\": 2021, \"price\": 150000 } # \"price\" kalitidagi element dictionary dan o\u2018chirilmoqda del book_info[\"price\"] # Natija ekranga chiqarilmoqda print(book_info) \u2747\ufe0f POP \ud83d\udccc Lug'atdagi e'lementlarni o'chirish uchun .pop() metodidan ham foydalansak bo'ladi. # Telefon ma'lumotlari saqlanayotgan dictionary yaratilmoqda phone_details = { \"brand\": \"Samsung\", \"model\": \"Galaxy S21\", \"storage\": \"128GB\", \"price\": 900 } # \"storage\" kalitli element .pop() orqali o\u2018chirilmoqda va qiymati o'zgaruvchiga saqlanmoqda removed_value = phone_details.pop(\"storage\") # O\u2018chirilgan qiymat ekranga chiqarilmoqda print(\"Removed:\", removed_value) # Yangilangan dictionary ekranga chiqarilmoqda print(phone_details) \u2705 E'LEMENTLARGA MUROJAT QILISH \u2747\ufe0f KEYS \ud83d\udccc Kalitlarni olish. # Foydalanuvchi haqida ma'lumot saqlanmoqda user_info = { \"name\": \"Alice\", \"city\": \"New York\" } # Barcha kalitlar (key) alohida olinmoqda keys = user_info.keys() # Kalitlar ekranga chiqarilmoqda print(keys) \u2747\ufe0f VALUES \ud83d\udccc Qiymatlarni olish. # Foydalanuvchi haqida ma'lumot saqlanmoqda user_info = { \"name\": \"Alice\", \"city\": \"New York\" } # Barcha qiymatlar (value) alohida olinmoqda values = user_info.values() # Qiymatlar ekranga chiqarilmoqda print(values) \u2747\ufe0f ITEMS \ud83d\udccc Kalit-qiymat juftliklarini olish: # Foydalanuvchi haqida ma'lumot saqlanmoqda user_info = { \"name\": \"Alice\", \"city\": \"New York\" } # Barcha kalit-qiymat juftliklari alohida olinmoqda items = user_info.items() # Juftliklar ekranga chiqarilmoqda print(items) \u2705 FOYDALI METODLAR \u2747\ufe0f GET \ud83d\udccc Kalit bo'yicha qiymatni oladi. Kalit mavjud bo'lmasa, None qaytaradi. # Avtomobil haqida ma'lumotlar saqlanmoqda car_info = { \"brand\": \"Chevrolet\", \"model\": \"Malibu\", \"year\": 2022 } # \"model\" kaliti orqali qiymat olinmoqda, agar mavjud bo\u2018lsa \u2014 shu qiymat qaytadi car_model = car_info.get(\"model\", \"Not Found\") print(\"Model:\", car_model) # Natija: Malibu # \"color\" degan kalit mavjud emas, shuning uchun \"Not Found\" qiymati qaytadi car_color = car_info.get(\"color\", \"Not Found\") print(\"Color:\", car_color) # Natija: Not Found \u2747\ufe0f UPDATE \ud83d\udccc Dictionaryga yangi ma'lumot qo'shish yoki yangilash uchun ishlatiladi. # Talaba haqida dastlabki ma'lumotlar saqlanmoqda student_info = { \"name\": \"Diyor\", \"age\": 18, \"course\": \"Python\" } # update() metodi yordamida yangi ma'lumotlar qo\u2018shilmoqda yoki mavjudlari yangilanmoqda student_info.update({ \"age\": 19, # age mavjud edi \u2014 yangilanmoqda \"course\": \"Django\", # course mavjud edi \u2014 yangilanmoqda \"is_active\": True # yangi kalit \u2014 qo\u2018shilmoqda }) # Natijani ekranga chiqarish print(student_info) \u2747\ufe0f POPINTEM \ud83d\udccc Dictionarydan oxirgi qo\u2018shilgan kalit-qiymat juftligini olib tashlaydi va o\u2018sha juftlikni qaytaradi. # Mehmon haqida ma'lumotlar saqlanmoqda guest_info = { \"name\": \"Javlon\", \"room\": 305, \"nights\": 3 } # Oxirgi qo\u2018shilgan kalit-qiymat juftligi dictionary dan o\u2018chirilmoqda removed_item = guest_info.popitem() # O\u2018chirilgan juftlik (tuple shaklida) ekranga chiqarilmoqda print(\"Removed:\", removed_item) # Yangilangan dictionary ekranga chiqarilmoqda print(\"Updated:\", guest_info) \u2747\ufe0f SETDEFAULT \ud83d\udccc Kalit mavjud bo'lmasa, qiymat qo'shadi va qaytaradi. # Foydalanuvchi haqida boshlang\u2018ich ma\u2019lumotlar user_info = { \"username\": \"umiddev\", \"email\": \"umid@example.com\" } # \"email\" kaliti mavjud bo\u2018lgani uchun mavjud qiymatni qaytaradi email = user_info.setdefault(\"email\", \"default@example.com\") print(\"Email:\", email) # \"phone\" kaliti yo\u2018q edi, shuning uchun u yaratilib, berilgan qiymat qo\u2018shiladi phone = user_info.setdefault(\"phone\", \"+998901234567\") print(\"Phone:\", phone) # Yangilangan dictionary ekranga chiqarilmoqda print(\"Updated user_info:\", user_info) \u2705 AMALIYOT \u2705 1-topshiriq: Bo\u2018sh dictionary yarating va unga quyidagi kalit-qiymatlarni qo\u2018shing: - \"name\" : \"John\" - \"age\" : 25 - \"city\" : \"Tashkent\" So\u2018ng dictionaryni ekranga chiqaring. \u2705 2-topshiriq: Quyidagi dictionary berilgan: person = {\"name\": \"Ali\", \"age\": 30, \"job\": \"Engineer\"} Undagi \"age\" qiymatini 31 ga yangilang va dictionaryni chop eting. \u2705 3-topshiriq: Yuqoridagi person dictionarydan \"job\" elementini del yordamida o\u2018chiring. Keyin dictionaryni ekranga chiqarib ko\u2018ring. \u2705 4-topshiriq: Quyidagi dictionarydan .pop() metodi yordamida \"model\" kalitli elementni olib tashlang: car = {\"brand\": \"BMW\", \"model\": \"X5\", \"year\": 2020} O\u2018chirilgan qiymatni va yangilangan dictionaryni ekranga chiqaring. \u2705 5-topshiriq: Bo\u2018sh dictionary yarating va setdefault() yordamida quyidagi elementlarni qo\u2018shing: - \"username\" : \"coder123\" - \"email\" : \"coder@example.com\" Agar \"email\" mavjud bo\u2018lsa, uni yangilamasin. \u2705 6-topshiriq: Quyidagi dictionarydan .popitem() yordamida oxirgi elementni o\u2018chirib tashlang: movie = {\"title\": \"Inception\", \"director\": \"Nolan\", \"year\": 2010} O\u2018chirilgan element va yangilangan dictionaryni chop eting. \u2705 7-topshiriq: Quyidagi dictionary berilgan: student = {\"name\": \"Ziyoda\", \"course\": \"Python\", \"age\": 21} update() yordamida quyidagicha o\u2018zgartiring: - \"course\" : \"Django\" - \"is_active\" : True So\u2018ng natijani chop eting. \u2705 8-topshiriq: Quyidagi dictionarydan get() yordamida \"email\" va \"phone\" qiymatlarini ajrating: user = {\"username\": \"umiddev\", \"email\": \"umid@example.com\"} Agar \"phone\" mavjud bo\u2018lmasa, \"No number\" qiymatini qaytaring. \u2705 9-topshiriq: Quyidagi dictionaryda keys() , values() , items() metodlaridan foydalanib ularni alohida chop eting: laptop = {\"brand\": \"Lenovo\", \"ram\": \"16GB\", \"ssd\": \"512GB\"} \u2705 10-topshiriq: Quyidagi dictionary berilgan: book = {\"title\": \"Python 101\", \"author\": \"Alex\", \"pages\": 300} Agar \"pages\" kaliti mavjud bo\u2018lsa \u2014 yangilang, mavjud bo\u2018lmasa \u2014 250 qiymatini qo\u2018shing. \u2705 11-topshiriq: Quyidagi dictionaryda \"price\" mavjudligini tekshirib ko\u2018ring va mavjud bo\u2018lsa \u2014 del yordamida o\u2018chirib tashlang: product = {\"name\": \"Mouse\", \"brand\": \"Logitech\", \"price\": 150000} \u2705 12-topshiriq: Quyidagi ikkita dictionaryni update() yordamida birlashtiring: a = {\"a\": 1, \"b\": 2} b = {\"b\": 3, \"c\": 4} Natijada a dictionaryni yangilang va chop eting. \u2705 13-topshiriq: Quyidagi dictionaryga \"skills\" degan yangi kalit qo\u2018shing va qiymat sifatida [\"Python\", \"SQL\"] ro\u2018yxatini bering. \u2705 14-topshiriq: Quyidagi dictionaryda \"status\" kaliti mavjud emas. setdefault() yordamida \"active\" qiymatini qo\u2018shing: account = {\"username\": \"admin\"} \u2705 15-topshiriq: Quyidagi dictionarydagi barcha kalit va qiymatlarni alohida ro\u2018yxatlarga ajrating: info = {\"x\": 10, \"y\": 20, \"z\": 30} Kalitlar keys_list nomli ro\u2018yxatga, qiymatlar esa values_list nomli ro\u2018yxatga saqlansin.","title":"Dictionaries"},{"location":"python/dictionaries/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/dictionaries/#7-dars-dictionary","text":"","title":"\ud83e\udde9 7-DARS DICTIONARY"},{"location":"python/dictionaries/#dictionary-nima","text":"\ud83d\udccc Python dasturlash tilida dictionary \u2014 bu kalit-qiymat (key-value) juftliklarini saqlovchi ma\u2019lumotlar turidir. Har bir kalit yagona bo\u2018ladi va unga mos qiymat bo\u2018ladi. Dictionary ma\u2019lumotlar {} qavslar ichida yoziladi va har bir kalit bilan qiymat : bilan ajratiladi. Bu ma'lumot turi ma\u2019lumotlarni tartibli saqlash, oson topish va boshqarish uchun ishlatiladi.","title":"\u2705 DICTIONARY NIMA?"},{"location":"python/dictionaries/#dictionary-yaratish","text":"","title":"\u2705 DICTIONARY YARATISH"},{"location":"python/dictionaries/#bosh-dictionary-yaratish","text":"# Bo'sh dictionary yaratish user_info = {}","title":"\u2747\ufe0f BO'SH DICTIONARY YARATISH"},{"location":"python/dictionaries/#elementlar-bilan-dictionary-yaratish","text":"# Kalit-qiymatlar bilan dictionary yaratish user_info = { 'name': 'Alice', # Foydalanuvchining ismi 'age': 30, # Foydalanuvchining yoshi 'city': 'New York' # Foydalanuvchining shahri }","title":"\u2747\ufe0f E'LEMENTLAR BILAN DICTIONARY YARATISH"},{"location":"python/dictionaries/#dictionaryga-element-qoshish","text":"\ud83d\udccc Dictionaryga e'lement qo'shish uchun o'zgaruvchi nomidan kn [] qavs ochib ichiga keyni beramiz, undan keyin qo'shmoqchi bo'lgan value yani qiymatni beramiz. # Bo'sh dictionary yaratilyapti student_info = {} # Dictionary ga yangi kalit-qiymat juftligi qo\u2018shilmoqda: ism student_info[\"name\"] = \"Umid\" # Dictionary ga yangi kalit-qiymat juftligi qo\u2018shilmoqda: yosh student_info[\"age\"] = 20 # Dictionary ga yangi kalit-qiymat juftligi qo\u2018shilmoqda: kurs student_info[\"course\"] = \"Python Programming\" # Dictionary ga yangi kalit-qiymat juftligi qo\u2018shilmoqda: talabalik holati student_info[\"is_student\"] = True # Natijani ekranga chiqarish print(student_info)","title":"\u2705 DICTIONARYGA E'LEMENT QO'SHISH"},{"location":"python/dictionaries/#elementlarni-yangilash","text":"# Talaba haqida ma'lumotlarni saqlovchi dictionary yaratilmoqda student_profile = { \"full_name\": \"Azizbek Tursunov\", \"age\": 19, \"faculty\": \"Computer Science\", \"is_active\": True } # \"age\" kalitiga yangi yosh qiymati berilmoqda (19 dan 20 ga yangilanmoqda) student_profile[\"age\"] = 20 # \"faculty\" kalitidagi qiymat o\u2018zgartirilmoqda (Computer Science dan Data Science ga) student_profile[\"faculty\"] = \"Data Science\" # \"is_active\" kalitidagi qiymat yangilanmoqda (True dan False ga) student_profile[\"is_active\"] = False # Natija ekranga chiqarilmoqda print(student_profile)","title":"\u2705 E'LEMENTLARNI YANGILASH"},{"location":"python/dictionaries/#element-ochirish","text":"","title":"\u2705 E'LEMENT O'CHIRISH"},{"location":"python/dictionaries/#del","text":"\ud83d\udccc Lug'at ichidagi e'lementlarni o'chirish uchun del funksiyasidan foydalanamiz. # Kitob haqida ma'lumotlar saqlanayotgan dictionary yaratilmoqda book_info = { \"title\": \"Python Basics\", \"author\": \"John Smith\", \"year\": 2021, \"price\": 150000 } # \"price\" kalitidagi element dictionary dan o\u2018chirilmoqda del book_info[\"price\"] # Natija ekranga chiqarilmoqda print(book_info)","title":"\u2747\ufe0f DEL"},{"location":"python/dictionaries/#pop","text":"\ud83d\udccc Lug'atdagi e'lementlarni o'chirish uchun .pop() metodidan ham foydalansak bo'ladi. # Telefon ma'lumotlari saqlanayotgan dictionary yaratilmoqda phone_details = { \"brand\": \"Samsung\", \"model\": \"Galaxy S21\", \"storage\": \"128GB\", \"price\": 900 } # \"storage\" kalitli element .pop() orqali o\u2018chirilmoqda va qiymati o'zgaruvchiga saqlanmoqda removed_value = phone_details.pop(\"storage\") # O\u2018chirilgan qiymat ekranga chiqarilmoqda print(\"Removed:\", removed_value) # Yangilangan dictionary ekranga chiqarilmoqda print(phone_details)","title":"\u2747\ufe0f POP"},{"location":"python/dictionaries/#elementlarga-murojat-qilish","text":"","title":"\u2705 E'LEMENTLARGA MUROJAT QILISH"},{"location":"python/dictionaries/#keys","text":"\ud83d\udccc Kalitlarni olish. # Foydalanuvchi haqida ma'lumot saqlanmoqda user_info = { \"name\": \"Alice\", \"city\": \"New York\" } # Barcha kalitlar (key) alohida olinmoqda keys = user_info.keys() # Kalitlar ekranga chiqarilmoqda print(keys)","title":"\u2747\ufe0f KEYS"},{"location":"python/dictionaries/#values","text":"\ud83d\udccc Qiymatlarni olish. # Foydalanuvchi haqida ma'lumot saqlanmoqda user_info = { \"name\": \"Alice\", \"city\": \"New York\" } # Barcha qiymatlar (value) alohida olinmoqda values = user_info.values() # Qiymatlar ekranga chiqarilmoqda print(values)","title":"\u2747\ufe0f VALUES"},{"location":"python/dictionaries/#items","text":"\ud83d\udccc Kalit-qiymat juftliklarini olish: # Foydalanuvchi haqida ma'lumot saqlanmoqda user_info = { \"name\": \"Alice\", \"city\": \"New York\" } # Barcha kalit-qiymat juftliklari alohida olinmoqda items = user_info.items() # Juftliklar ekranga chiqarilmoqda print(items)","title":"\u2747\ufe0f ITEMS"},{"location":"python/dictionaries/#foydali-metodlar","text":"","title":"\u2705 FOYDALI METODLAR"},{"location":"python/dictionaries/#get","text":"\ud83d\udccc Kalit bo'yicha qiymatni oladi. Kalit mavjud bo'lmasa, None qaytaradi. # Avtomobil haqida ma'lumotlar saqlanmoqda car_info = { \"brand\": \"Chevrolet\", \"model\": \"Malibu\", \"year\": 2022 } # \"model\" kaliti orqali qiymat olinmoqda, agar mavjud bo\u2018lsa \u2014 shu qiymat qaytadi car_model = car_info.get(\"model\", \"Not Found\") print(\"Model:\", car_model) # Natija: Malibu # \"color\" degan kalit mavjud emas, shuning uchun \"Not Found\" qiymati qaytadi car_color = car_info.get(\"color\", \"Not Found\") print(\"Color:\", car_color) # Natija: Not Found","title":"\u2747\ufe0f GET"},{"location":"python/dictionaries/#update","text":"\ud83d\udccc Dictionaryga yangi ma'lumot qo'shish yoki yangilash uchun ishlatiladi. # Talaba haqida dastlabki ma'lumotlar saqlanmoqda student_info = { \"name\": \"Diyor\", \"age\": 18, \"course\": \"Python\" } # update() metodi yordamida yangi ma'lumotlar qo\u2018shilmoqda yoki mavjudlari yangilanmoqda student_info.update({ \"age\": 19, # age mavjud edi \u2014 yangilanmoqda \"course\": \"Django\", # course mavjud edi \u2014 yangilanmoqda \"is_active\": True # yangi kalit \u2014 qo\u2018shilmoqda }) # Natijani ekranga chiqarish print(student_info)","title":"\u2747\ufe0f UPDATE"},{"location":"python/dictionaries/#popintem","text":"\ud83d\udccc Dictionarydan oxirgi qo\u2018shilgan kalit-qiymat juftligini olib tashlaydi va o\u2018sha juftlikni qaytaradi. # Mehmon haqida ma'lumotlar saqlanmoqda guest_info = { \"name\": \"Javlon\", \"room\": 305, \"nights\": 3 } # Oxirgi qo\u2018shilgan kalit-qiymat juftligi dictionary dan o\u2018chirilmoqda removed_item = guest_info.popitem() # O\u2018chirilgan juftlik (tuple shaklida) ekranga chiqarilmoqda print(\"Removed:\", removed_item) # Yangilangan dictionary ekranga chiqarilmoqda print(\"Updated:\", guest_info)","title":"\u2747\ufe0f POPINTEM"},{"location":"python/dictionaries/#setdefault","text":"\ud83d\udccc Kalit mavjud bo'lmasa, qiymat qo'shadi va qaytaradi. # Foydalanuvchi haqida boshlang\u2018ich ma\u2019lumotlar user_info = { \"username\": \"umiddev\", \"email\": \"umid@example.com\" } # \"email\" kaliti mavjud bo\u2018lgani uchun mavjud qiymatni qaytaradi email = user_info.setdefault(\"email\", \"default@example.com\") print(\"Email:\", email) # \"phone\" kaliti yo\u2018q edi, shuning uchun u yaratilib, berilgan qiymat qo\u2018shiladi phone = user_info.setdefault(\"phone\", \"+998901234567\") print(\"Phone:\", phone) # Yangilangan dictionary ekranga chiqarilmoqda print(\"Updated user_info:\", user_info)","title":"\u2747\ufe0f SETDEFAULT"},{"location":"python/dictionaries/#amaliyot","text":"","title":"\u2705 AMALIYOT"},{"location":"python/dictionaries/#1-topshiriq","text":"Bo\u2018sh dictionary yarating va unga quyidagi kalit-qiymatlarni qo\u2018shing: - \"name\" : \"John\" - \"age\" : 25 - \"city\" : \"Tashkent\" So\u2018ng dictionaryni ekranga chiqaring.","title":"\u2705 1-topshiriq:"},{"location":"python/dictionaries/#2-topshiriq","text":"Quyidagi dictionary berilgan: person = {\"name\": \"Ali\", \"age\": 30, \"job\": \"Engineer\"} Undagi \"age\" qiymatini 31 ga yangilang va dictionaryni chop eting.","title":"\u2705 2-topshiriq:"},{"location":"python/dictionaries/#3-topshiriq","text":"Yuqoridagi person dictionarydan \"job\" elementini del yordamida o\u2018chiring. Keyin dictionaryni ekranga chiqarib ko\u2018ring.","title":"\u2705 3-topshiriq:"},{"location":"python/dictionaries/#4-topshiriq","text":"Quyidagi dictionarydan .pop() metodi yordamida \"model\" kalitli elementni olib tashlang: car = {\"brand\": \"BMW\", \"model\": \"X5\", \"year\": 2020} O\u2018chirilgan qiymatni va yangilangan dictionaryni ekranga chiqaring.","title":"\u2705 4-topshiriq:"},{"location":"python/dictionaries/#5-topshiriq","text":"Bo\u2018sh dictionary yarating va setdefault() yordamida quyidagi elementlarni qo\u2018shing: - \"username\" : \"coder123\" - \"email\" : \"coder@example.com\" Agar \"email\" mavjud bo\u2018lsa, uni yangilamasin.","title":"\u2705 5-topshiriq:"},{"location":"python/dictionaries/#6-topshiriq","text":"Quyidagi dictionarydan .popitem() yordamida oxirgi elementni o\u2018chirib tashlang: movie = {\"title\": \"Inception\", \"director\": \"Nolan\", \"year\": 2010} O\u2018chirilgan element va yangilangan dictionaryni chop eting.","title":"\u2705 6-topshiriq:"},{"location":"python/dictionaries/#7-topshiriq","text":"Quyidagi dictionary berilgan: student = {\"name\": \"Ziyoda\", \"course\": \"Python\", \"age\": 21} update() yordamida quyidagicha o\u2018zgartiring: - \"course\" : \"Django\" - \"is_active\" : True So\u2018ng natijani chop eting.","title":"\u2705 7-topshiriq:"},{"location":"python/dictionaries/#8-topshiriq","text":"Quyidagi dictionarydan get() yordamida \"email\" va \"phone\" qiymatlarini ajrating: user = {\"username\": \"umiddev\", \"email\": \"umid@example.com\"} Agar \"phone\" mavjud bo\u2018lmasa, \"No number\" qiymatini qaytaring.","title":"\u2705 8-topshiriq:"},{"location":"python/dictionaries/#9-topshiriq","text":"Quyidagi dictionaryda keys() , values() , items() metodlaridan foydalanib ularni alohida chop eting: laptop = {\"brand\": \"Lenovo\", \"ram\": \"16GB\", \"ssd\": \"512GB\"}","title":"\u2705 9-topshiriq:"},{"location":"python/dictionaries/#10-topshiriq","text":"Quyidagi dictionary berilgan: book = {\"title\": \"Python 101\", \"author\": \"Alex\", \"pages\": 300} Agar \"pages\" kaliti mavjud bo\u2018lsa \u2014 yangilang, mavjud bo\u2018lmasa \u2014 250 qiymatini qo\u2018shing.","title":"\u2705 10-topshiriq:"},{"location":"python/dictionaries/#11-topshiriq","text":"Quyidagi dictionaryda \"price\" mavjudligini tekshirib ko\u2018ring va mavjud bo\u2018lsa \u2014 del yordamida o\u2018chirib tashlang: product = {\"name\": \"Mouse\", \"brand\": \"Logitech\", \"price\": 150000}","title":"\u2705 11-topshiriq:"},{"location":"python/dictionaries/#12-topshiriq","text":"Quyidagi ikkita dictionaryni update() yordamida birlashtiring: a = {\"a\": 1, \"b\": 2} b = {\"b\": 3, \"c\": 4} Natijada a dictionaryni yangilang va chop eting.","title":"\u2705 12-topshiriq:"},{"location":"python/dictionaries/#13-topshiriq","text":"Quyidagi dictionaryga \"skills\" degan yangi kalit qo\u2018shing va qiymat sifatida [\"Python\", \"SQL\"] ro\u2018yxatini bering.","title":"\u2705 13-topshiriq:"},{"location":"python/dictionaries/#14-topshiriq","text":"Quyidagi dictionaryda \"status\" kaliti mavjud emas. setdefault() yordamida \"active\" qiymatini qo\u2018shing: account = {\"username\": \"admin\"}","title":"\u2705 14-topshiriq:"},{"location":"python/dictionaries/#15-topshiriq","text":"Quyidagi dictionarydagi barcha kalit va qiymatlarni alohida ro\u2018yxatlarga ajrating: info = {\"x\": 10, \"y\": 20, \"z\": 30} Kalitlar keys_list nomli ro\u2018yxatga, qiymatlar esa values_list nomli ro\u2018yxatga saqlansin.","title":"\u2705 15-topshiriq:"},{"location":"python/exception-handling/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 12-DARS EXCEPTION HANDLING [!NOTE] Eslatma: Pythonda istisno holatlarni boshqarish dasturda yuzaga keladigan xatoliklarni to'g'ri boshqarish va dasturimizni barqaror ishlashini ta'minlash uchun muhim hisoblanadi. Bu try , except , else , va finally bloklari orqali amalga oshiriladi. \u2705 EXCEPTION HANDLING HAQIDA UMUMIY TUSHUNCHA \ud83d\udccc Dastur bajarilishi davomida foydalanuvchidan noto\u2018g\u2018ri ma'lumot kiritilishi, fayl topilmasligi, nolga bo\u2018lish holati yoki boshqa xatoliklar yuz berishi mumkin. Exception Handling orqali bu xatoliklar dastur to\u2018xtab qolmasdan, foydalanuvchiga tushunarli tarzda xabar berib, dasturni davom ettirish imkonini beradi. \u2705 EXCEPTION HANDLING SINTAKSISI try: # Xato chiqishi mumkin bo'lgan kod except XatoNomi: # Xato yuz bersa ishlaydigan kod else: # Xato chiqmasa ishlaydigan kod finally: # Har doim ishlaydigan kod \u2705 try, except \ud83d\udccc try blokida xatolik chiqishi mumkin bo\u2018lgan kod yoziladi. except blokida aniq xatolik turi bilan uni ushlab qolamiz. try: # Foydalanuvchidan son so\u2018raymiz va butun songa o\u2018girib olamiz son = int(input(\"Biror son kiriting: \")) # 10 ni kiritilgan songa bo\u2018lamiz natija = 10 / son # Hisoblangan natijani chiqaramiz print(f\"Natija: {natija}\") except ZeroDivisionError: # Agar son 0 bo\u2018lsa, bo\u2018lish amali xatoga olib keladi va bu xabar chiqadi print(\"Xatolik: Nolga bo'lish mumkin emas!\") except ValueError: # Agar son emas, noto\u2018g\u2018ri qiymat kiritsa, bu xato yuz beradi va bu xabar chiqadi print(\"Xatolik: Iltimos, butun son kiriting!\") \u2705 else \ud83d\udccc Agar try blokida xatolik yuz bermasa, else bloki ishga tushadi. Bu blokda xatoliklar bo'lmasa bajarilishi kerak bo'lgan kodlar yoziladi. try: # Foydalanuvchidan son so\u2018raymiz va butun songa o\u2018girib olamiz son = int(input(\"Biror son kiriting: \")) # 10 ni kiritilgan songa bo\u2018lamiz natija = 10 / son except ZeroDivisionError: # Agar son 0 bo\u2018lsa, bu xatolik chiqadi print(\"Xatolik: Nolga bo'lish mumkin emas!\") except ValueError: # Agar son emas, noto\u2018g\u2018ri qiymat kiritsa, bu xatolik chiqadi print(\"Xatolik: Iltimos, butun son kiriting!\") else: # Agar xatolik bo\u2018lmasa, natijani chiqaramiz print(f\"Natija: {natija}\") \u2705 finally \ud83d\udccc finally bloki har qanday holatda ham, xatolik yuz bergan yoki bermagan bo'lsa ham, bajariladi. Bu blok, masalan, resurslarni tozalash yoki fayllarni yopish uchun ishlatilishi mumkin. try: # Foydalanuvchidan son so\u2018raymiz va butun songa o\u2018girib olamiz son = int(input(\"Biror son kiriting: \")) # 10 ni kiritilgan songa bo\u2018lamiz natija = 10 / son except Exception as e: # Har qanday xatolik yuz bersa, xato haqida ma\u2019lumot chiqaramiz print(f\"Xatolik: {e}\") finally: # Bu blok har doim, xato bo\u2018lsa ham, bo\u2018lmasa ham ishlaydi print(\"Dastur yakunlandi.\") \u2705 XATONI NOMI BILAN CHIQARISH \ud83d\udccc Ba'zi hollarda, sodir bo'lgan xatoni dasturiy tilda yozib chiqish kerak bo'lishi mumkin. Bunda as kalit so'zi orqali xato ob'ektiga nom berish mumkin: try: # \"malumot.txt\" faylini ochamiz file = open(\"malumot.txt\") # Fayldagi barcha ma'lumotlarni o\u2018qiymiz data = file.read() # O\u2018qilgan ma'lumotlarni ekranga chiqaramiz print(data) except FileNotFoundError as xato: # Agar fayl mavjud bo\u2018lmasa, xato xabari chiqariladi print(f\"Xatolik: {xato}\") \u2705 BIR NECHTA XATOLARNI BITTA except DA USHLASH \ud83d\udccc Bir nechta xatolarni bitta except blokida ushlash mumkin. try: # Foydalanuvchidan son so\u2018raymiz va uni butun songa o\u2018giramiz x = int(input(\"Son kiriting: \")) # 10 ni kiritilgan songa bo\u2018lamiz y = 10 / x # Agar foydalanuvchi son o\u2018rniga matn kiritsa (ValueError), # yoki 0 kiritsa (ZeroDivisionError), bu except bloki ishga tushadi except (ValueError, ZeroDivisionError) as x: # Xatolik haqida foydalanuvchiga xabar beramiz print(f\"Xatolik: {x}\") \u2705 MAXSUS XATOLIK YARATISH (raise) [!NOTE] Pythonda raise \u2014 bu sun'iy (ya'ni o\u2018zimiz xohlagan paytda) xatolik chaqirish uchun ishlatiladi. Ayniqsa, foydalanuvchi noto\u2018g\u2018ri ma'lumot kiritsa, unga aniq xatolik berish uchun foydalidir. # Manfiy son kiritilsa xatolik (ValueError) chiqaradigan funksiya def tekshir(son): # Agar son manfiy bo\u2018lsa, xatolik chiqaramiz if son < 0: raise ValueError(\"Manfiy son kiritish mumkin emas!\") # Aks holda, sonni qaytaramiz return son try: # Funksiyani manfiy son bilan chaqiramiz (bu xatoga olib keladi) tekshir(-5) except ValueError as x: # Agar ValueError yuz bersa, xatolik haqida xabar chiqaramiz print(f\"Xatolik: {x}\") \u2705 AMALIYOT \u2705 1-topshiriq: Foydalanuvchidan ikkita son oling va birinchisini ikkinchisiga bo\u2018ling. Nolga bo\u2018lishdan himoyalangan holda exception handling bilan dastur tuzing. \u2705 2-topshiriq: Foydalanuvchidan matn ko\u2018rinishida qiymat oling va uni int yoki float ga aylantiring. Agar foydalanuvchi harf kiritsa, xatolik chiqsin. \u2705 3-topshiriq: Foydalanuvchi ikkita son va bitta operator kiritsin ( + , - , * , / ). Operator noto\u2018g\u2018ri bo\u2018lsa, xatolik chiqsin. \u2705 4-topshiriq: Foydalanuvchi son kiritadi. Agar son manfiy bo\u2018lsa, raise orqali ValueError chiqarilsin: \"Manfiy son kiritish mumkin emas!\" \u2705 5-topshiriq: Berilgan ro\u2018yxatdan ( list ) indeks orqali element oling. Agar noto\u2018g\u2018ri indeks kiritilsa, IndexError chiqsin. \u2705 6-topshiriq: Foydalanuvchi lug\u2018atdan key bo\u2018yicha ma\u2019lumot olishga harakat qiladi. Agar key mavjud bo\u2018lmasa, KeyError chiqsin. \u2705 7-topshiriq: Foydalanuvchi parol kiritadi. Agar parol bo\u2018sh bo\u2018lsa, raise ValueError bilan xatolik chiqarilsin. \u2705 8-topshiriq: Foydalanuvchi son kiritadi va uni int ga aylantirib chiqarasiz. finally blokida \"Dastur tugadi\" degan matn chiqsin. \u2705 9-topshiriq: Foydalanuvchidan son kiriting va 10 ni ushbu songa bo\u2018ling. ValueError yoki ZeroDivisionError yuz bersa, bitta except bilan ushlang. \u2705 10-topshiriq: Funksiya yarating: son kiritsa va u 100 dan katta bo\u2018lsa, raise ValueError(\"100 dan katta son kiritish mumkin emas\") chiqsin. \u2705 11-topshiriq: Foydalanuvchi haqiqiy son kiritsin. Agar son butun bo\u2018lsa, raise ValueError(\"Faqat haqiqiy son kiriting\") chiqsin. \u2705 12-topshiriq: Fayl ochishga harakat qiling. Fayl mavjud bo\u2018lmasa, xatolik xabarini chiqaring (FileNotFoundError). \u2705 13-topshiriq: Biror list yarating va foydalanuvchidan indeks so\u2018rang. Indeks noto\u2018g\u2018ri bo\u2018lsa, foydalanuvchiga tushunarli xabar chiqaring. \u2705 14-topshiriq: Foydalanuvchidan yoshini so\u2018raydigan funksiya yozing. Agar foydalanuvchi manfiy yoki 120 dan katta yosh kiritsa, raise ValueError chiqsin. \u2705 15-topshiriq: Foydalanuvchidan ikkita raqamli string so\u2018rang va ularni son sifatida qo\u2018shing. Agar harflar kiritsa, xatolikdan foydalanuvchiga ogohlantirish chiqaring.","title":"Exception Handling"},{"location":"python/exception-handling/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/exception-handling/#12-dars-exception-handling","text":"[!NOTE] Eslatma: Pythonda istisno holatlarni boshqarish dasturda yuzaga keladigan xatoliklarni to'g'ri boshqarish va dasturimizni barqaror ishlashini ta'minlash uchun muhim hisoblanadi. Bu try , except , else , va finally bloklari orqali amalga oshiriladi.","title":"\ud83e\udde9 12-DARS EXCEPTION HANDLING"},{"location":"python/exception-handling/#exception-handling-haqida-umumiy-tushuncha","text":"\ud83d\udccc Dastur bajarilishi davomida foydalanuvchidan noto\u2018g\u2018ri ma'lumot kiritilishi, fayl topilmasligi, nolga bo\u2018lish holati yoki boshqa xatoliklar yuz berishi mumkin. Exception Handling orqali bu xatoliklar dastur to\u2018xtab qolmasdan, foydalanuvchiga tushunarli tarzda xabar berib, dasturni davom ettirish imkonini beradi.","title":"\u2705 EXCEPTION HANDLING HAQIDA UMUMIY TUSHUNCHA"},{"location":"python/exception-handling/#exception-handling-sintaksisi","text":"try: # Xato chiqishi mumkin bo'lgan kod except XatoNomi: # Xato yuz bersa ishlaydigan kod else: # Xato chiqmasa ishlaydigan kod finally: # Har doim ishlaydigan kod","title":"\u2705 EXCEPTION HANDLING SINTAKSISI"},{"location":"python/exception-handling/#try-except","text":"\ud83d\udccc try blokida xatolik chiqishi mumkin bo\u2018lgan kod yoziladi. except blokida aniq xatolik turi bilan uni ushlab qolamiz. try: # Foydalanuvchidan son so\u2018raymiz va butun songa o\u2018girib olamiz son = int(input(\"Biror son kiriting: \")) # 10 ni kiritilgan songa bo\u2018lamiz natija = 10 / son # Hisoblangan natijani chiqaramiz print(f\"Natija: {natija}\") except ZeroDivisionError: # Agar son 0 bo\u2018lsa, bo\u2018lish amali xatoga olib keladi va bu xabar chiqadi print(\"Xatolik: Nolga bo'lish mumkin emas!\") except ValueError: # Agar son emas, noto\u2018g\u2018ri qiymat kiritsa, bu xato yuz beradi va bu xabar chiqadi print(\"Xatolik: Iltimos, butun son kiriting!\")","title":"\u2705 try, except"},{"location":"python/exception-handling/#else","text":"\ud83d\udccc Agar try blokida xatolik yuz bermasa, else bloki ishga tushadi. Bu blokda xatoliklar bo'lmasa bajarilishi kerak bo'lgan kodlar yoziladi. try: # Foydalanuvchidan son so\u2018raymiz va butun songa o\u2018girib olamiz son = int(input(\"Biror son kiriting: \")) # 10 ni kiritilgan songa bo\u2018lamiz natija = 10 / son except ZeroDivisionError: # Agar son 0 bo\u2018lsa, bu xatolik chiqadi print(\"Xatolik: Nolga bo'lish mumkin emas!\") except ValueError: # Agar son emas, noto\u2018g\u2018ri qiymat kiritsa, bu xatolik chiqadi print(\"Xatolik: Iltimos, butun son kiriting!\") else: # Agar xatolik bo\u2018lmasa, natijani chiqaramiz print(f\"Natija: {natija}\")","title":"\u2705 else"},{"location":"python/exception-handling/#finally","text":"\ud83d\udccc finally bloki har qanday holatda ham, xatolik yuz bergan yoki bermagan bo'lsa ham, bajariladi. Bu blok, masalan, resurslarni tozalash yoki fayllarni yopish uchun ishlatilishi mumkin. try: # Foydalanuvchidan son so\u2018raymiz va butun songa o\u2018girib olamiz son = int(input(\"Biror son kiriting: \")) # 10 ni kiritilgan songa bo\u2018lamiz natija = 10 / son except Exception as e: # Har qanday xatolik yuz bersa, xato haqida ma\u2019lumot chiqaramiz print(f\"Xatolik: {e}\") finally: # Bu blok har doim, xato bo\u2018lsa ham, bo\u2018lmasa ham ishlaydi print(\"Dastur yakunlandi.\")","title":"\u2705 finally"},{"location":"python/exception-handling/#xatoni-nomi-bilan-chiqarish","text":"\ud83d\udccc Ba'zi hollarda, sodir bo'lgan xatoni dasturiy tilda yozib chiqish kerak bo'lishi mumkin. Bunda as kalit so'zi orqali xato ob'ektiga nom berish mumkin: try: # \"malumot.txt\" faylini ochamiz file = open(\"malumot.txt\") # Fayldagi barcha ma'lumotlarni o\u2018qiymiz data = file.read() # O\u2018qilgan ma'lumotlarni ekranga chiqaramiz print(data) except FileNotFoundError as xato: # Agar fayl mavjud bo\u2018lmasa, xato xabari chiqariladi print(f\"Xatolik: {xato}\")","title":"\u2705 XATONI NOMI BILAN CHIQARISH"},{"location":"python/exception-handling/#bir-nechta-xatolarni-bitta-except-da-ushlash","text":"\ud83d\udccc Bir nechta xatolarni bitta except blokida ushlash mumkin. try: # Foydalanuvchidan son so\u2018raymiz va uni butun songa o\u2018giramiz x = int(input(\"Son kiriting: \")) # 10 ni kiritilgan songa bo\u2018lamiz y = 10 / x # Agar foydalanuvchi son o\u2018rniga matn kiritsa (ValueError), # yoki 0 kiritsa (ZeroDivisionError), bu except bloki ishga tushadi except (ValueError, ZeroDivisionError) as x: # Xatolik haqida foydalanuvchiga xabar beramiz print(f\"Xatolik: {x}\")","title":"\u2705 BIR NECHTA XATOLARNI BITTA except DA USHLASH"},{"location":"python/exception-handling/#maxsus-xatolik-yaratish-raise","text":"[!NOTE] Pythonda raise \u2014 bu sun'iy (ya'ni o\u2018zimiz xohlagan paytda) xatolik chaqirish uchun ishlatiladi. Ayniqsa, foydalanuvchi noto\u2018g\u2018ri ma'lumot kiritsa, unga aniq xatolik berish uchun foydalidir. # Manfiy son kiritilsa xatolik (ValueError) chiqaradigan funksiya def tekshir(son): # Agar son manfiy bo\u2018lsa, xatolik chiqaramiz if son < 0: raise ValueError(\"Manfiy son kiritish mumkin emas!\") # Aks holda, sonni qaytaramiz return son try: # Funksiyani manfiy son bilan chaqiramiz (bu xatoga olib keladi) tekshir(-5) except ValueError as x: # Agar ValueError yuz bersa, xatolik haqida xabar chiqaramiz print(f\"Xatolik: {x}\")","title":"\u2705 MAXSUS XATOLIK YARATISH (raise)"},{"location":"python/exception-handling/#amaliyot","text":"","title":"\u2705 AMALIYOT"},{"location":"python/exception-handling/#1-topshiriq","text":"Foydalanuvchidan ikkita son oling va birinchisini ikkinchisiga bo\u2018ling. Nolga bo\u2018lishdan himoyalangan holda exception handling bilan dastur tuzing.","title":"\u2705 1-topshiriq:"},{"location":"python/exception-handling/#2-topshiriq","text":"Foydalanuvchidan matn ko\u2018rinishida qiymat oling va uni int yoki float ga aylantiring. Agar foydalanuvchi harf kiritsa, xatolik chiqsin.","title":"\u2705 2-topshiriq:"},{"location":"python/exception-handling/#3-topshiriq","text":"Foydalanuvchi ikkita son va bitta operator kiritsin ( + , - , * , / ). Operator noto\u2018g\u2018ri bo\u2018lsa, xatolik chiqsin.","title":"\u2705 3-topshiriq:"},{"location":"python/exception-handling/#4-topshiriq","text":"Foydalanuvchi son kiritadi. Agar son manfiy bo\u2018lsa, raise orqali ValueError chiqarilsin: \"Manfiy son kiritish mumkin emas!\"","title":"\u2705 4-topshiriq:"},{"location":"python/exception-handling/#5-topshiriq","text":"Berilgan ro\u2018yxatdan ( list ) indeks orqali element oling. Agar noto\u2018g\u2018ri indeks kiritilsa, IndexError chiqsin.","title":"\u2705 5-topshiriq:"},{"location":"python/exception-handling/#6-topshiriq","text":"Foydalanuvchi lug\u2018atdan key bo\u2018yicha ma\u2019lumot olishga harakat qiladi. Agar key mavjud bo\u2018lmasa, KeyError chiqsin.","title":"\u2705 6-topshiriq:"},{"location":"python/exception-handling/#7-topshiriq","text":"Foydalanuvchi parol kiritadi. Agar parol bo\u2018sh bo\u2018lsa, raise ValueError bilan xatolik chiqarilsin.","title":"\u2705 7-topshiriq:"},{"location":"python/exception-handling/#8-topshiriq","text":"Foydalanuvchi son kiritadi va uni int ga aylantirib chiqarasiz. finally blokida \"Dastur tugadi\" degan matn chiqsin.","title":"\u2705 8-topshiriq:"},{"location":"python/exception-handling/#9-topshiriq","text":"Foydalanuvchidan son kiriting va 10 ni ushbu songa bo\u2018ling. ValueError yoki ZeroDivisionError yuz bersa, bitta except bilan ushlang.","title":"\u2705 9-topshiriq:"},{"location":"python/exception-handling/#10-topshiriq","text":"Funksiya yarating: son kiritsa va u 100 dan katta bo\u2018lsa, raise ValueError(\"100 dan katta son kiritish mumkin emas\") chiqsin.","title":"\u2705 10-topshiriq:"},{"location":"python/exception-handling/#11-topshiriq","text":"Foydalanuvchi haqiqiy son kiritsin. Agar son butun bo\u2018lsa, raise ValueError(\"Faqat haqiqiy son kiriting\") chiqsin.","title":"\u2705 11-topshiriq:"},{"location":"python/exception-handling/#12-topshiriq","text":"Fayl ochishga harakat qiling. Fayl mavjud bo\u2018lmasa, xatolik xabarini chiqaring (FileNotFoundError).","title":"\u2705 12-topshiriq:"},{"location":"python/exception-handling/#13-topshiriq","text":"Biror list yarating va foydalanuvchidan indeks so\u2018rang. Indeks noto\u2018g\u2018ri bo\u2018lsa, foydalanuvchiga tushunarli xabar chiqaring.","title":"\u2705 13-topshiriq:"},{"location":"python/exception-handling/#14-topshiriq","text":"Foydalanuvchidan yoshini so\u2018raydigan funksiya yozing. Agar foydalanuvchi manfiy yoki 120 dan katta yosh kiritsa, raise ValueError chiqsin.","title":"\u2705 14-topshiriq:"},{"location":"python/exception-handling/#15-topshiriq","text":"Foydalanuvchidan ikkita raqamli string so\u2018rang va ularni son sifatida qo\u2018shing. Agar harflar kiritsa, xatolikdan foydalanuvchiga ogohlantirish chiqaring.","title":"\u2705 15-topshiriq:"},{"location":"python/file-handling/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 14-DARS FILE HANDLING \ud83d\udccc Fayl \u2014 bu kompyuterda ma'lumotlar saqlanadigan obyekt. U matn, rasm, ovoz yoki dasturiy kod bo\u2018lishi mumkin. Biz dasturda aynan matnli fayllar bilan ko\u2018p ishlaymiz, masalan: .txt, .csv, .json fayllar. \u2753 FAYL NIMA UCHUN KERAK? \ud83d\udcdd Ma'lumotlarni saqlash \u2014 Dastur tugagandan keyin ham ma'lumot yo\u2018qolmasligi uchun. \ud83d\udd01 Qayta ishlash \u2014 Avval yozilgan ma'lumotlarni o\u2018qib, tahlil qilish yoki o\u2018zgartirish. \ud83d\udce4 Boshqa dasturlar bilan almashish \u2014 Fayllar orqali boshqa dasturlar bilan axborot almashiladi. \ud83d\udcda Katta hajmdagi ma'lumotlar \u2014 Ma'lumot bazasidan oldin oddiy fayllarda saqlanadi (masalan, .csv fayllar). \u2705 FAYLNI OCHISH \ud83d\udccc Faylni ochish uchun open() funksiyasidan foydalaniladi. Bu funksiya fayl nomini va rejimini qabul qiladi. open() funksiyasida ikkinchi parametr sifatida fayl rejimini ko'rsatishingiz mumkin: \u2705 FAYL REJIMLARI \ud83d\udccc r \u2013 Faylni o'qish uchun ochish. Fayl mavjud bo'lishi kerak. \ud83d\udccc w \u2013 Faylga yozish uchun ochish. Agar fayl mavjud bo'lmasa, yangi fayl yaratadi. Mavjud fayl bo'lsa, ma'lumotlarni o'chirib yuboradi. \ud83d\udccc a \u2013 Faylga qo'shish uchun ochish. Mavjud faylga yangi ma'lumot qo'shadi, agar fayl mavjud bo'lmasa, yangi fayl yaratadi. \ud83d\udccc x \u2013 Faylni faqat yangi fayl yaratish uchun ochadi. Agar fayl allaqachon mavjud bo'lsa, xato chiqaradi. # Faylni o'qish uchun ochish f = open(\"file.txt\", \"r\") # Faylga yozish uchun ochish f = open(\"file.txt\", \"w\") # Faylga qo'shish uchun ochish f = open(\"file.txt\", \"a\") # Fayl mavjud emasligini tekshirib, yaratish f = open(\"file.txt\", \"x\") \u2705 FAYLNI O'QISH \ud83d\udccc Fayl ichidagi ma'lumotlarni o'qish uchun bir necha usullar mavjud: - read() \u2013 Faylni to'liq o'qiydi. - readline() \u2013 Fayldan bir qatorni o'qiydi. - readlines() \u2013 Fayldagi barcha qatorlarni ro'yxat sifatida o'qiydi. f = open(\"file.txt\", \"r\") # Barcha ma'lumotni o'qish content = f.read() print(content) # Bir qatorni o'qish line = f.readline() print(line) # Barcha qatorlarni ro'yxatga o'qish lines = f.readlines() print(lines) f.close() \u2705 FAYLGA YOZISH \ud83d\udccc Faylga yozish uchun write() yoki writelines() metodlaridan foydalaniladi: - write() \u2013 Faylga matn yozadi. - writelines() \u2013 Ro'yxatdagi barcha qatorlarni faylga yozadi. # Faylga ma'lumot yozish # \"file.txt\" nomli faylni yozish (\"w\") rejimida ochyapti f = open(\"file.txt\", \"w\") # Faylga \"Hello, Python!\" matnini yozadi va yangi qatordan boshlaydi f.write(\"Hello, Python!\\n\") # Faylga ikkinchi qatorda matn yozadi f.write(\"This is a second line.\\n\") # Faylni yopadi, bu majburiy \u2014 ma'lumotlar saqlanadi va fayl yopiladi f.close() # Ro'yxatni faylga yozish # Yoziladigan har bir element yangi qatordan iborat bo\u2018lgan ro'yxat lines = [\"First line\\n\", \"Second line\\n\", \"Third line\\n\"] # \"file.txt\" nomli faylni yana yozish rejimida ochyapti (eski ma'lumot o\u2018chiriladi) f = open(\"file.txt\", \"w\") # Ro'yxatdagi barcha elementlarni faylga ketma-ket yozadi f.writelines(lines) # Faylni yopadi f.close() \u2705 FAYLNI YOPISH \ud83d\udccc Fayl bilan ish tugagandan so'ng, uni yopish kerak. Faylni yopish uchun close() metodidan foydalaniladi. f = open(\"file.txt\", \"r\") # Fayldan o'qish jarayoni f.close() # Faylni yopish [!NOTE] Yana bir usul \u2013 faylni with bloki yordamida ochish, bunda fayl avtomatik ravishda yopiladi: with open(\"file.txt\", \"r\") as f: content = f.read() print(content) # Bu usulda faylni yopish shart emas, fayl avtomatik ravishda yopiladi. \u2705 FAYLNI YOPMASA NIMA BO'LADI? \u2705 1. MA'LUMOTLAR FAYLGA YOZILMASLIGI MUMKIN (YOKI KECHIKIB YOZILISHI) \ud83d\udccc Python faylga yozayotgan paytda ma'lumotlarni dastlab xotira buferida saqlaydi. Faylni yopsangizgina bu ma'lumotlar diskka to\u2018liq yoziladi. # \"data.txt\" nomli faylni yozish (\"w\") rejimida ochadi (agar fayl bo'lmasa, yangi yaratadi) f = open(\"data.txt\", \"w\") # Faylga \"Bu matn faylga yoziladi.\" matnini yozadi f.write(\"Bu matn faylga yoziladi.\") # Faylni yopish yo\u2018q, shuning uchun yozilgan ma'lumot faylga saqlanmasligi yoki fayl ochiq qolishi mumkin # f.close() qatori bo\u2018lmasa, ma'lumotlar operatsion tizimning fayl keshida qolishi ehtimoli bor \u2705 2. FAYL BOSHQALAR UCHUN BAND BO\u2018LIB QOLADI \ud83d\udccc Agar siz faylni yopmasangiz, u operatsion tizim tomonidan \"ochiq\" deb hisoblanadi va boshqa dasturlar (yoki boshqa kod qismlari) uni o\u2018qiy olmaydi yoki tahrirlay olmaydi. \u2705 3. XOTIRA RESURSLARI ORTIQCHA BAND BO\u2018LADI \ud83d\udccc Har bir ochilgan fayl tizimda resurs (file descriptor) sifatida band qilinadi. Fayllar yopiqlmasa, bu resurslar ortadi va dastur sekinlashishi yoki xatoliklar chiqishi mumkin. \u2705 4. MA'LUMOTLAR BUZILISHI YOKI YO\u2018QOLISHI MUMKIN \ud83d\udccc Agar yozish davomida fayl yopilmasa va dastur to\u2018satdan to\u2018xtasa, yozilgan ma'lumotlar saqlanmasligi yoki fayl buzilishi mumkin. \u2705 FAYL REJIMLARI t \u2013 Matn rejimi. Fayllarni matn sifatida ochadi. Bu rejim r va w bilan birga ishlatiladi. Masalan, rt yoki wt . b \u2013 Ikkilik ( binary ) rejimi. Fayllarni ikkilik rejimda ochadi. Masalan, rb yoki wb . # Ikkilik faylni o'qish with open(\"image.png\", \"rb\") as img: data = img.read() print(data) # Ikkilik faylga yozish with open(\"output.bin\", \"wb\") as bin_file: bin_file.write(b\"Binary data\") \u2705 FAYLLAR BILAN BOG'LIQ BAZI FUNKSIYALAR os.remove() \u2013 Faylni o'chirish. os.rename() \u2013 Fayl nomini o'zgartirish. os.path.exists() \u2013 Fayl mavjudligini tekshirish. # OS (Operating System) moduli \u2014 fayllar bilan ishlash, o\u2018chirish, nomini o\u2018zgartirish uchun kerak import os # \"file.txt\" nomli faylni o\u2018chiradi # Agar bu fayl mavjud bo\u2018lmasa, xatolik (FileNotFoundError) yuz beradi os.remove(\"file.txt\") # \"old_name.txt\" nomli faylni \"new_name.txt\" deb o\u2018zgartiradi # Agar \"old_name.txt\" mavjud bo\u2018lmasa, yoki allaqachon \"new_name.txt\" mavjud bo\u2018lsa, xatolik beradi os.rename(\"old_name.txt\", \"new_name.txt\") # Fayl mavjudligini tekshiradi # Agar \"file.txt\" mavjud bo\u2018lsa, \"File exists\" chiqadi, bo\u2018lmasa \"File not found\" if os.path.exists(\"file.txt\"): print(\"File exists\") else: print(\"File not found\") \u2705 AMALIYOT \u2705 1-topshiriq: example.txt faylini ochib, uning ichidagi matnni to\u2018liq o\u2018qing va ekranga chiqaring. \u2705 2-topshiriq: info.txt nomli yangi fayl yarating va foydalanuvchidan ism , familiya va yosh so\u2018rab, faylga yozing. \u2705 3-topshiriq: numbers.txt nomli faylga 1 dan 10 gacha bo\u2018lgan sonlarni har birini yangi qatordan yozing. \u2705 4-topshiriq: numbers.txt faylini o\u2018qing va har bir qatordagi sonni ikkiga ko\u2018paytirib ekranga chiqaring. \u2705 5-topshiriq: append_example.txt fayliga har safar dasturni ishga tushirganingizda \"New line\" yozuvi qo\u2018shilsin. \u2705 6-topshiriq: Foydalanuvchidan 3 ta gap yozdirib oling va ularni sentences.txt fayliga yozing. \u2705 7-topshiriq: sentences.txt faylidan faqat birinchi qatorni o\u2018qib chiqaring va chop eting. \u2705 8-topshiriq: lines.txt faylida 5 ta qatordan iborat matn bor deb tasavvur qiling. Har bir qatordagi belgilar sonini chiqaring. \u2705 9-topshiriq: data.txt fayli mavjud bo\u2018lsa, uni o\u2018chiring. Mavjud emasligini tekshirib, foydalanuvchiga bildiring. \u2705 10-topshiriq: old.txt faylini new.txt deb o\u2018zgartiring. Fayl mavjud emas bo\u2018lsa, \u201cFayl topilmadi\u201d deb chiqaring. \u2705 11-topshiriq: users.txt faylida foydalanuvchilarning ismlari bo\u2018lsin. Fayldan ro\u2018yxatni o\u2018qib, har bir ismni Hello, <ism>! shaklida ekranga chiqaring. \u2705 12-topshiriq: text.txt fayliga inglizcha 3 gap yozing. So\u2018ng ushbu faylni o\u2018qib, har bir gapdagi so\u2018zlar sonini hisoblang. \u2705 13-topshiriq: Rasmlar uchun photo.jpg faylini rb (binary read) rejimida oching va fayl hajmini (baytlarda) aniqlang. \u2705 14-topshiriq: items.txt faylidan barcha qatorlarni ro\u2018yxatga o\u2018qing, ushbu ro\u2018yxatni output.txt fayliga nusxa ko\u2018chiring.","title":"File Handling"},{"location":"python/file-handling/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/file-handling/#14-dars-file-handling","text":"\ud83d\udccc Fayl \u2014 bu kompyuterda ma'lumotlar saqlanadigan obyekt. U matn, rasm, ovoz yoki dasturiy kod bo\u2018lishi mumkin. Biz dasturda aynan matnli fayllar bilan ko\u2018p ishlaymiz, masalan: .txt, .csv, .json fayllar.","title":"\ud83e\udde9 14-DARS FILE HANDLING"},{"location":"python/file-handling/#fayl-nima-uchun-kerak","text":"\ud83d\udcdd Ma'lumotlarni saqlash \u2014 Dastur tugagandan keyin ham ma'lumot yo\u2018qolmasligi uchun. \ud83d\udd01 Qayta ishlash \u2014 Avval yozilgan ma'lumotlarni o\u2018qib, tahlil qilish yoki o\u2018zgartirish. \ud83d\udce4 Boshqa dasturlar bilan almashish \u2014 Fayllar orqali boshqa dasturlar bilan axborot almashiladi. \ud83d\udcda Katta hajmdagi ma'lumotlar \u2014 Ma'lumot bazasidan oldin oddiy fayllarda saqlanadi (masalan, .csv fayllar).","title":"\u2753 FAYL NIMA UCHUN KERAK?"},{"location":"python/file-handling/#faylni-ochish","text":"\ud83d\udccc Faylni ochish uchun open() funksiyasidan foydalaniladi. Bu funksiya fayl nomini va rejimini qabul qiladi. open() funksiyasida ikkinchi parametr sifatida fayl rejimini ko'rsatishingiz mumkin:","title":"\u2705 FAYLNI OCHISH"},{"location":"python/file-handling/#fayl-rejimlari","text":"\ud83d\udccc r \u2013 Faylni o'qish uchun ochish. Fayl mavjud bo'lishi kerak. \ud83d\udccc w \u2013 Faylga yozish uchun ochish. Agar fayl mavjud bo'lmasa, yangi fayl yaratadi. Mavjud fayl bo'lsa, ma'lumotlarni o'chirib yuboradi. \ud83d\udccc a \u2013 Faylga qo'shish uchun ochish. Mavjud faylga yangi ma'lumot qo'shadi, agar fayl mavjud bo'lmasa, yangi fayl yaratadi. \ud83d\udccc x \u2013 Faylni faqat yangi fayl yaratish uchun ochadi. Agar fayl allaqachon mavjud bo'lsa, xato chiqaradi. # Faylni o'qish uchun ochish f = open(\"file.txt\", \"r\") # Faylga yozish uchun ochish f = open(\"file.txt\", \"w\") # Faylga qo'shish uchun ochish f = open(\"file.txt\", \"a\") # Fayl mavjud emasligini tekshirib, yaratish f = open(\"file.txt\", \"x\")","title":"\u2705 FAYL REJIMLARI"},{"location":"python/file-handling/#faylni-oqish","text":"\ud83d\udccc Fayl ichidagi ma'lumotlarni o'qish uchun bir necha usullar mavjud: - read() \u2013 Faylni to'liq o'qiydi. - readline() \u2013 Fayldan bir qatorni o'qiydi. - readlines() \u2013 Fayldagi barcha qatorlarni ro'yxat sifatida o'qiydi. f = open(\"file.txt\", \"r\") # Barcha ma'lumotni o'qish content = f.read() print(content) # Bir qatorni o'qish line = f.readline() print(line) # Barcha qatorlarni ro'yxatga o'qish lines = f.readlines() print(lines) f.close()","title":"\u2705 FAYLNI O'QISH"},{"location":"python/file-handling/#faylga-yozish","text":"\ud83d\udccc Faylga yozish uchun write() yoki writelines() metodlaridan foydalaniladi: - write() \u2013 Faylga matn yozadi. - writelines() \u2013 Ro'yxatdagi barcha qatorlarni faylga yozadi. # Faylga ma'lumot yozish # \"file.txt\" nomli faylni yozish (\"w\") rejimida ochyapti f = open(\"file.txt\", \"w\") # Faylga \"Hello, Python!\" matnini yozadi va yangi qatordan boshlaydi f.write(\"Hello, Python!\\n\") # Faylga ikkinchi qatorda matn yozadi f.write(\"This is a second line.\\n\") # Faylni yopadi, bu majburiy \u2014 ma'lumotlar saqlanadi va fayl yopiladi f.close() # Ro'yxatni faylga yozish # Yoziladigan har bir element yangi qatordan iborat bo\u2018lgan ro'yxat lines = [\"First line\\n\", \"Second line\\n\", \"Third line\\n\"] # \"file.txt\" nomli faylni yana yozish rejimida ochyapti (eski ma'lumot o\u2018chiriladi) f = open(\"file.txt\", \"w\") # Ro'yxatdagi barcha elementlarni faylga ketma-ket yozadi f.writelines(lines) # Faylni yopadi f.close()","title":"\u2705 FAYLGA YOZISH"},{"location":"python/file-handling/#faylni-yopish","text":"\ud83d\udccc Fayl bilan ish tugagandan so'ng, uni yopish kerak. Faylni yopish uchun close() metodidan foydalaniladi. f = open(\"file.txt\", \"r\") # Fayldan o'qish jarayoni f.close() # Faylni yopish [!NOTE] Yana bir usul \u2013 faylni with bloki yordamida ochish, bunda fayl avtomatik ravishda yopiladi: with open(\"file.txt\", \"r\") as f: content = f.read() print(content) # Bu usulda faylni yopish shart emas, fayl avtomatik ravishda yopiladi.","title":"\u2705 FAYLNI YOPISH"},{"location":"python/file-handling/#faylni-yopmasa-nima-boladi","text":"","title":"\u2705 FAYLNI YOPMASA NIMA BO'LADI?"},{"location":"python/file-handling/#1-malumotlar-faylga-yozilmasligi-mumkin-yoki-kechikib-yozilishi","text":"\ud83d\udccc Python faylga yozayotgan paytda ma'lumotlarni dastlab xotira buferida saqlaydi. Faylni yopsangizgina bu ma'lumotlar diskka to\u2018liq yoziladi. # \"data.txt\" nomli faylni yozish (\"w\") rejimida ochadi (agar fayl bo'lmasa, yangi yaratadi) f = open(\"data.txt\", \"w\") # Faylga \"Bu matn faylga yoziladi.\" matnini yozadi f.write(\"Bu matn faylga yoziladi.\") # Faylni yopish yo\u2018q, shuning uchun yozilgan ma'lumot faylga saqlanmasligi yoki fayl ochiq qolishi mumkin # f.close() qatori bo\u2018lmasa, ma'lumotlar operatsion tizimning fayl keshida qolishi ehtimoli bor","title":"\u2705 1. MA'LUMOTLAR FAYLGA YOZILMASLIGI MUMKIN (YOKI KECHIKIB YOZILISHI)"},{"location":"python/file-handling/#2-fayl-boshqalar-uchun-band-bolib-qoladi","text":"\ud83d\udccc Agar siz faylni yopmasangiz, u operatsion tizim tomonidan \"ochiq\" deb hisoblanadi va boshqa dasturlar (yoki boshqa kod qismlari) uni o\u2018qiy olmaydi yoki tahrirlay olmaydi.","title":"\u2705 2. FAYL BOSHQALAR UCHUN BAND BO\u2018LIB QOLADI"},{"location":"python/file-handling/#3-xotira-resurslari-ortiqcha-band-boladi","text":"\ud83d\udccc Har bir ochilgan fayl tizimda resurs (file descriptor) sifatida band qilinadi. Fayllar yopiqlmasa, bu resurslar ortadi va dastur sekinlashishi yoki xatoliklar chiqishi mumkin.","title":"\u2705 3. XOTIRA RESURSLARI ORTIQCHA BAND BO\u2018LADI"},{"location":"python/file-handling/#4-malumotlar-buzilishi-yoki-yoqolishi-mumkin","text":"\ud83d\udccc Agar yozish davomida fayl yopilmasa va dastur to\u2018satdan to\u2018xtasa, yozilgan ma'lumotlar saqlanmasligi yoki fayl buzilishi mumkin.","title":"\u2705 4. MA'LUMOTLAR BUZILISHI YOKI YO\u2018QOLISHI MUMKIN"},{"location":"python/file-handling/#fayl-rejimlari_1","text":"t \u2013 Matn rejimi. Fayllarni matn sifatida ochadi. Bu rejim r va w bilan birga ishlatiladi. Masalan, rt yoki wt . b \u2013 Ikkilik ( binary ) rejimi. Fayllarni ikkilik rejimda ochadi. Masalan, rb yoki wb . # Ikkilik faylni o'qish with open(\"image.png\", \"rb\") as img: data = img.read() print(data) # Ikkilik faylga yozish with open(\"output.bin\", \"wb\") as bin_file: bin_file.write(b\"Binary data\")","title":"\u2705 FAYL REJIMLARI"},{"location":"python/file-handling/#fayllar-bilan-bogliq-bazi-funksiyalar","text":"os.remove() \u2013 Faylni o'chirish. os.rename() \u2013 Fayl nomini o'zgartirish. os.path.exists() \u2013 Fayl mavjudligini tekshirish. # OS (Operating System) moduli \u2014 fayllar bilan ishlash, o\u2018chirish, nomini o\u2018zgartirish uchun kerak import os # \"file.txt\" nomli faylni o\u2018chiradi # Agar bu fayl mavjud bo\u2018lmasa, xatolik (FileNotFoundError) yuz beradi os.remove(\"file.txt\") # \"old_name.txt\" nomli faylni \"new_name.txt\" deb o\u2018zgartiradi # Agar \"old_name.txt\" mavjud bo\u2018lmasa, yoki allaqachon \"new_name.txt\" mavjud bo\u2018lsa, xatolik beradi os.rename(\"old_name.txt\", \"new_name.txt\") # Fayl mavjudligini tekshiradi # Agar \"file.txt\" mavjud bo\u2018lsa, \"File exists\" chiqadi, bo\u2018lmasa \"File not found\" if os.path.exists(\"file.txt\"): print(\"File exists\") else: print(\"File not found\")","title":"\u2705 FAYLLAR BILAN BOG'LIQ BAZI FUNKSIYALAR"},{"location":"python/file-handling/#amaliyot","text":"","title":"\u2705 AMALIYOT"},{"location":"python/file-handling/#1-topshiriq","text":"example.txt faylini ochib, uning ichidagi matnni to\u2018liq o\u2018qing va ekranga chiqaring.","title":"\u2705 1-topshiriq:"},{"location":"python/file-handling/#2-topshiriq","text":"info.txt nomli yangi fayl yarating va foydalanuvchidan ism , familiya va yosh so\u2018rab, faylga yozing.","title":"\u2705 2-topshiriq:"},{"location":"python/file-handling/#3-topshiriq","text":"numbers.txt nomli faylga 1 dan 10 gacha bo\u2018lgan sonlarni har birini yangi qatordan yozing.","title":"\u2705 3-topshiriq:"},{"location":"python/file-handling/#4-topshiriq","text":"numbers.txt faylini o\u2018qing va har bir qatordagi sonni ikkiga ko\u2018paytirib ekranga chiqaring.","title":"\u2705 4-topshiriq:"},{"location":"python/file-handling/#5-topshiriq","text":"append_example.txt fayliga har safar dasturni ishga tushirganingizda \"New line\" yozuvi qo\u2018shilsin.","title":"\u2705 5-topshiriq:"},{"location":"python/file-handling/#6-topshiriq","text":"Foydalanuvchidan 3 ta gap yozdirib oling va ularni sentences.txt fayliga yozing.","title":"\u2705 6-topshiriq:"},{"location":"python/file-handling/#7-topshiriq","text":"sentences.txt faylidan faqat birinchi qatorni o\u2018qib chiqaring va chop eting.","title":"\u2705 7-topshiriq:"},{"location":"python/file-handling/#8-topshiriq","text":"lines.txt faylida 5 ta qatordan iborat matn bor deb tasavvur qiling. Har bir qatordagi belgilar sonini chiqaring.","title":"\u2705 8-topshiriq:"},{"location":"python/file-handling/#9-topshiriq","text":"data.txt fayli mavjud bo\u2018lsa, uni o\u2018chiring. Mavjud emasligini tekshirib, foydalanuvchiga bildiring.","title":"\u2705 9-topshiriq:"},{"location":"python/file-handling/#10-topshiriq","text":"old.txt faylini new.txt deb o\u2018zgartiring. Fayl mavjud emas bo\u2018lsa, \u201cFayl topilmadi\u201d deb chiqaring.","title":"\u2705 10-topshiriq:"},{"location":"python/file-handling/#11-topshiriq","text":"users.txt faylida foydalanuvchilarning ismlari bo\u2018lsin. Fayldan ro\u2018yxatni o\u2018qib, har bir ismni Hello, <ism>! shaklida ekranga chiqaring.","title":"\u2705 11-topshiriq:"},{"location":"python/file-handling/#12-topshiriq","text":"text.txt fayliga inglizcha 3 gap yozing. So\u2018ng ushbu faylni o\u2018qib, har bir gapdagi so\u2018zlar sonini hisoblang.","title":"\u2705 12-topshiriq:"},{"location":"python/file-handling/#13-topshiriq","text":"Rasmlar uchun photo.jpg faylini rb (binary read) rejimida oching va fayl hajmini (baytlarda) aniqlang.","title":"\u2705 13-topshiriq:"},{"location":"python/file-handling/#14-topshiriq","text":"items.txt faylidan barcha qatorlarni ro\u2018yxatga o\u2018qing, ushbu ro\u2018yxatni output.txt fayliga nusxa ko\u2018chiring.","title":"\u2705 14-topshiriq:"},{"location":"python/for-loop/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 9-DARS FOR LOOP \ud83d\udccc for \u2013 bu tsikl operatori , ya\u2019ni takrorlovchi kod . Agar sizda bir nechta qiymatlar bo\u2018lsa (masalan, ro\u2018yxat, sonlar, harflar), for tsikli ularni birma-bir olib, har biriga bir xil amalni bajarish uchun ishlatiladi. # 'salom' degan matnli o'zgaruvchi yaratildi soz = \"salom\" # soz o'zgaruvchisidagi har bir harf bo'yicha yuramiz for harf in soz: # Har bir harfni alohida qilib ekranga chiqaramiz print(harf) \u2705 LISTLAR BILAN ISHLASH \ud83d\udccc Ro'yxatlar eng keng tarqalgan takrorlanadigan obyektlardan biri hisoblanadi. \ud83c\udfaf Buyurtmalar ro\u2018yxatini ekranga chiqarish # Buyurtma qilingan mahsulotlar ro'yxati orders = [\"bread\", \"milk\", \"eggs\", \"cheese\"] # Har bir mahsulot bo'yicha yurib chiqamiz for item in orders: # Mahsulot nomini ekranga chiqaramiz print(f\"Ordered item: {item}\") \ud83c\udfaf Narxlar ro'yxati bilan umumiy xarajatni hisoblash # Har bir mahsulot narxi (dollar) prices = [2.5, 1.0, 3.2, 4.8] # Umumiy summa uchun o'zgaruvchi total_cost = 0 # Har bir narx ustida yuramiz for price in prices: # Narxni umumiy summaga qo'shamiz total_cost += price # Umumiy narxni ekranga chiqaramiz print(f\"Total cost: ${total_cost}\") \ud83c\udfaf Email ro'yxatidan foydalanuvchilarga xabar yuborish (simulyatsiya) # Email manzillar ro'yxati emails = [\"ali@example.com\", \"vali@example.com\", \"sara@example.com\"] # Har bir foydalanuvchiga xabar yuboramiz (simulyatsiya) for email in emails: # Xabar yuborilganini bildiruvchi matn print(f\"Sending email to: {email}\") \ud83c\udfaf Login bo\u2018lgan foydalanuvchilarni filtrlash # Foydalanuvchilar va ularning login statusi (True - tizimga kirgan) users = [ {\"username\": \"admin\", \"logged_in\": True}, {\"username\": \"john\", \"logged_in\": False}, {\"username\": \"alice\", \"logged_in\": True}, ] # Faqat login bo'lgan foydalanuvchilarni chiqaramiz for user in users: if user[\"logged_in\"]: print(f\"{user['username']} is currently online.\") \ud83c\udfaf Mahsulot narxlarini chegirma bilan yangilash # Mahsulotlar va ularning narxlari ro'yxati products = [ {\"name\": \"laptop\", \"price\": 1000}, {\"name\": \"keyboard\", \"price\": 100}, {\"name\": \"mouse\", \"price\": 50}, ] # Har bir mahsulotga 10% chegirma beramiz for product in products: # Chegirma miqdorini hisoblaymiz discount = product[\"price\"] * 0.1 # Narxni yangilaymiz product[\"price\"] -= discount # Natijani chiqaramiz print(\"Discounted products:\") for product in products: print(f\"{product['name']}: ${product['price']}\") \ud83c\udfaf Foydalanuvchi ismlarini bosh harf bilan yozib chiqish # Foydalanuvchilar ismlari ro'yxati (kichik harflarda) usernames = [\"ali\", \"sara\", \"bekzod\", \"nigora\"] # Har bir ismni bosh harf bilan yangilaymiz for i in range(len(usernames)): # `.capitalize()` birinchi harfni katta qiladi usernames[i] = usernames[i].capitalize() # Natijani chiqaramiz print(\"Capitalized usernames:\", usernames) \ud83c\udfaf Sonlar ro'yxatidan faqat toq sonlarni ajratib olish # Sonlar ro'yxati numbers = [4, 7, 12, 9, 15, 2, 8] # Faqat toq sonlar uchun yangi ro'yxat odd_numbers = [] # Har bir sonni tekshiramiz for number in numbers: if number % 2 != 0: # Toq bo'lsa yangi ro'yxatga qo'shamiz odd_numbers.append(number) # Natijani chiqaramiz print(\"Odd numbers:\", odd_numbers) \u2705 RANGE \ud83d\udccc Python dasturlash tilida range() funksiyasi ketma-ket sonlar qatorini yaratish uchun ishlatiladi. Bu funksiya odatda for loop bilan birga ishlatiladi va bizga ma\u2019lum bir sonlar oralig\u2018ida takrorlash (aylanib chiqish) imkonini beradi. \ud83c\udfaf Oddiy range() ishlatilishi # 0 dan 4 gacha (5 kirmaydi) for i in range(5): print(i) \ud83c\udfaf Belgilangan oraliqdagi qiymatlar # 3 dan 8 gacha bo'lgan sonlarni chiqaramiz for i in range(3, 9): print(i) \ud83c\udfaf Step bilan yurish # 0 dan 10 gacha bo'lgan juft sonlarni chiqaramiz (2 qadam bilan) for index in range(0, 11, 2): print(index) \ud83c\udfaf Orqaga qarab sanash # 10 dan 1 gacha orqaga qarab for i in range(10, 0, -1): print(i) \ud83c\udfaf Har bir foydalanuvchiga ID berish # 3 ta foydalanuvchi nomi users = [\"Ali\", \"Vali\", \"Sardor\"] # Foydalanuvchilarga ID raqam berish (1 dan boshlab) for i in range(len(users)): print(f\"User ID: {i+1} - Name: {users[i]}\") \u2705 DICTIONARY BILAN ISHLASH \ud83c\udfaf Foydalanuvchi profillari ro\u2018yxati # Bir nechta foydalanuvchilarning profillari users = [ {\"username\": \"ali\", \"email\": \"ali@example.com\", \"is_active\": True}, {\"username\": \"sara\", \"email\": \"sara@example.com\", \"is_active\": False}, {\"username\": \"diyor\", \"email\": \"diyor@example.com\", \"is_active\": True}, ] # Faqat aktiv foydalanuvchilarni chiqaramiz for user in users: if user[\"is_active\"]: print(f\"{user['username']} (email: {user['email']}) is active.\") \ud83c\udfaf Savatdagi mahsulotlar va umumiy narxni hisoblash # Xarid savatidagi mahsulotlar cart = [ {\"name\": \"laptop\", \"price\": 850.0, \"quantity\": 1}, {\"name\": \"mouse\", \"price\": 25.0, \"quantity\": 2}, {\"name\": \"keyboard\", \"price\": 45.0, \"quantity\": 1}, ] # Umumiy narxni hisoblaymiz total = 0 for item in cart: total += item[\"price\"] * item[\"quantity\"] print(f\"Umumiy summa: ${total}\") \ud83c\udfaf Talabalar baholari bo\u2018yicha statistika # Talabalar va ularning baholari grades = { \"Ali\": 87, \"Sardor\": 92, \"Nigora\": 78, \"Lola\": 85 } # O\u2018rtacha bahoni hisoblaymiz average = sum(grades.values()) / len(grades) print(f\"O\u2018rtacha baho: {average}\") \ud83c\udfaf Chegirma tizimi (promo code) # Promo kodlar va ularning chegirmalari (%) promo_codes = { \"SALE10\": 10, \"WELCOME15\": 15, \"VIP20\": 20 } code = input(\"Promo kodni kiriting: \").upper() # Kodni tekshirib chegirma beramiz if code in promo_codes: print(f\"Sizga {promo_codes[code]}% chegirma berildi!\") else: print(\"Noto\u2018g\u2018ri promo kod!\") \ud83c\udfaf API javobini tahlil qilish (dictionary ko\u2018rinishida) # API dan kelgan javob response = { \"status\": \"success\", \"data\": { \"id\": 102, \"title\": \"New blog post\", \"author\": \"Umid\", \"views\": 1234 } } # Ma'lumotni tahlil qilish if response[\"status\"] == \"success\": blog = response[\"data\"] print(f\"Post: {blog['title']} (Author: {blog['author']}) \u2014 {blog['views']} views\") else: print(\"Xatolik yuz berdi.\") \u2705 SETS BILAN ISHLASH \ud83c\udfaf Foydalanuvchi kirgan sahifalarni yagona ro\u2018yxatga olish # Sahifalar bo'yicha foydalanuvchi harakati (ba'zilari takrorlangan) visited_pages = [\"home\", \"about\", \"contact\", \"home\", \"products\", \"contact\"] # Takrorlangan sahifalarni set orqali avtomatik chiqarib tashlaymiz unique_pages = set(visited_pages) print(\"Foydalanuvchi kirgan noyob sahifalar:\") for page in unique_pages: print(page) \ud83c\udfaf Email ro'yxatlaridagi dublikatlarni olib tashlash # Ro'yxatda takrorlanuvchi email manzillar bor emails = [ \"ali@example.com\", \"sara@example.com\", \"ali@example.com\", \"jamshid@example.com\", \"sara@example.com\" ] # set yordamida faqat noyob email manzillarni olamiz unique_emails = set(emails) print(\"Yagona email manzillar:\") for email in unique_emails: print(email) \ud83c\udfaf Ikkita foydalanuvchi orasidagi umumiy do\u2018stlarni topish # Foydalanuvchilarning do'stlari friends_1 = {\"Ali\", \"Sara\", \"Lola\", \"Bekzod\"} friends_2 = {\"Lola\", \"Sardor\", \"Ali\", \"Diyor\"} # Umumiy do'stlar: kesishma (intersection) common_friends = friends_1 & friends_2 print(\"Umumiy do'stlar:\") print(common_friends) \ud83c\udfaf Ro\u2018yxatdan o\u2018tgan foydalanuvchilar va online foydalanuvchilar orasidagi farq # Ro'yxatdan o\u2018tgan foydalanuvchilar registered_users = {\"ali\", \"sara\", \"diyor\", \"nigora\"} # Hozir online bo'lgan foydalanuvchilar online_users = {\"ali\", \"sardor\"} # Faqat ro'yxatdan o\u2018tgan, lekin online bo'lmaganlar offline_users = registered_users - online_users print(\"Hozir offline foydalanuvchilar:\") print(offline_users) \u2705 TUPLE BILAN ISHLASH \ud83c\udfaf Oddiy tuple ustidan for tsik # Koordinatalar (o'zgarmas qiymatlar) coordinates = (10, 20, 30) # Har bir koordinatani chiqarish for coordinate in coordinates: print(coordinate) \ud83c\udfaf Mahsulotlar ro\u2018yxati tupleda (ID, nomi, narxi) # Har bir mahsulot: (id, nomi, narxi) products = ( (1, \"Laptop\", 1200), (2, \"Mouse\", 30), (3, \"Keyboard\", 50), ) # Mahsulotlar haqida to\u2018liq ma\u2019lumot chiqaramiz for product_id, name, price in products: print(f\"ID: {product_id}, Nomi: {name}, Narxi: ${price}\") \u2705 NESTED LOOPS \ud83c\udfaf 2D ro'yxat (matritsa) elementlarini ko\u2018rsatish matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] for row in matrix: for element in row: print(element, end=\" \") print() # Qator oxirida yangi qatorga o'tish \ud83d\udccc Python dasturlash tilida print() funksiyasi biror narsani ekranga chiqargandan so\u2018ng avtomatik tarzda yangi qatorga o\u2018tadi. Bu yangi qator belgisi \\n deb ataladi. Ammo ba\u2019zida har bir chiqishdan keyin yangi qatorga o\u2018tmasdan, boshqa belgi (masalan, bo\u2018sh joy yoki vergul) qo\u2018yishni xohlaysiz. Shu holatda print() funksiyasida end parametri ishlatiladi. \ud83c\udfaf Foydalanuvchilar va ularning telefon raqamlari # Har bir foydalanuvchining bir nechta telefon raqami bor users = { \"Ali\": [\"+998901112233\", \"+998912223344\"], \"Sara\": [\"+998933445566\"], \"Diyor\": [\"+998935551234\", \"+998998887766\"] } # Har bir foydalanuvchi va raqamlarini chiqaramiz for name, phones in users.items(): print(f\"{name}ning raqamlari:\") for phone in phones: print(f\" - {phone}\") \ud83c\udfaf Kategoriya va mahsulotlar # Mahsulotlar toifalar bo'yicha guruhlangan categories = { \"Elektronika\": [\"Telefon\", \"Noutbuk\", \"Smart soat\"], \"Kiyim\": [\"Ko\u2018ylak\", \"Shim\", \"Poyabzal\"], \"Oziq-ovqat\": [\"Non\", \"Sut\", \"Yog\u2018\"] } # Har bir kategoriya va mahsulotlarini chiqaramiz for category, items in categories.items(): print(f\"{category}:\") for item in items: print(f\" - {item}\") \ud83c\udfaf Sayt menyusini chiqarish (asosiy bo\u2018lim + ichki bo\u2018limlar) # Sayt menyusi menu = { \"Bosh sahifa\": [], \"Kurslar\": [\"Python\", \"Django\", \"Flask\"], \"Aloqa\": [\"Biz haqimizda\", \"Bog\u2018lanish\"] } # Menyuni chiqaramiz for main_menu, submenus in menu.items(): print(main_menu) for submenu in submenus: print(f\" - {submenu}\") \u2705 FOR ELSE \ud83d\udccc Python dasturlash tilida for...else bu \u2014 for tsikli bilan birga ishlatiladigan maxsus konstruktsiya bo\u2018lib, u orqali loop muvaffaqiyatli tugaganidan keyin else qismi bajariladi. \ud83c\udfaf Foydalanuvchi ro\u2018yxatida admin borligini tekshirish users = [\"ali\", \"sara\", \"lola\", \"jamshid\"] for user in users: if user == \"admin\": print(\"Admin foydalanuvchi topildi.\") break else: print(\"Admin foydalanuvchi ro'yxatda yo'q.\") \ud83c\udfaf Parol to\u2018g\u2018riligini tekshirish # Parollar bazasi correct_passwords = [\"pass123\", \"admin456\", \"qwerty789\"] user_input = \"admin456\" for password in correct_passwords: if user_input == password: print(\"Parol to'g'ri.\") break else: print(\"Parol noto'g'ri.\") \u2705 BREAK \ud83d\udccc break operatori loopni to'xtatadi. Bu operator for yoki while loopda ishlatilishi mumkin. break loopning bajarilishini to'xtatadi va loopdan chiqadi, hatto loop to'liq tugamagan bo'lsa ham. \ud83c\udfaf Ma\u2019lumotlar bazasidan kerakli foydalanuvchini topish # Foydalanuvchilar ro'yxatini lug'atlar ko'rinishida yaratdik users = [ {\"id\": 1, \"name\": \"Ali\"}, {\"id\": 2, \"name\": \"Sara\"}, {\"id\": 3, \"name\": \"Diyor\"} ] # Qidirilayotgan foydalanuvchining ID raqamini belgiladik searched_id = 2 # users ro'yxatidagi har bir element (ya'ni foydalanuvchi) bo'yicha yuramiz for user in users: # Agar foydalanuvchining 'id' qiymati qidirilayotgan id ga teng bo'lsa if user[\"id\"] == searched_id: # Foydalanuvchi topilganini ekranga chiqaramiz print(f\"Foydalanuvchi topildi: {user['name']}\") # Qolgan elementlarni tekshirishning hojati yo'q, loop ni to'xtatamiz break \ud83c\udfaf API javobidan kerakli postni topish # Postlar listini yaratdik, har bir post dictionary ko'rinishida berilgan posts = [ {\"id\": 1, \"title\": \"Salom\"}, {\"id\": 2, \"title\": \"Python haqida\"}, {\"id\": 3, \"title\": \"Xayr\"} ] # Qidirilayotgan postning sarlavhasini belgiladik search_title = \"Python haqida\" # posts listdagi har bir post bo'yicha yuramiz for post in posts: # Agar postning 'title' qiymati qidirilayotgan sarlavhaga teng bo'lsa if post[\"title\"] == search_title: # Post topilganini ekranga chiqaramiz print(\"Post topildi:\", post) # Endi qolgan postlarni tekshirishning hojati yo'q, loop ni to'xtatamiz break \ud83c\udfaf for + else bilan birga break ishlatish # Shaharlar nomlari yozilgan ro'yxat yaratildi cities = [\"Toshkent\", \"Samarqand\", \"Buxoro\", \"Xiva\"] # Qidirilayotgan shahar nomi belgilanmoqda search = \"Andijon\" # cities ro'yxatidagi har bir shahar ustida yurib chiqamiz for city in cities: # Agar ro'yxatdagi shahar nomi qidirilayotgan nomga teng bo\u2018lsa if city == search: # Ekranga topilganligi haqida xabar chiqaramiz print(\"Shahar topildi!\") # Endi boshqa shaharlarni tekshirish shart emas, loop to\u2018xtatiladi break # Agar loop oxirigacha borib chiqqan bo\u2018lsa va break ishlamagan bo\u2018lsa else: # Demak shahar ro'yxatda yo\u2018q, degan xabar chiqariladi print(\"Shahar ro'yxatda yo'q.\") \u2705 CONTINUE \ud83d\udccc Python dasturlash tilida continue operatori tsikl ichida ishlatiladigan boshqaruvchi buyruq bo\u2018lib, u ishga tushganda tsikldagi shu takrorlanishning qolgan qismini o\u2018tkazib yuboradi va keyingi takrorlanishga (iteration) o\u2018tadi. # Sonlardan iborat ro'yxat yaratildi sonlar = [1, 2, 3, 4, 5] # sonlar ro'yxatidagi har bir son bo'yicha yuramiz for son in sonlar: # Agar hozirgi son 2 ga bo\u2018linganda qoldiq 0 bo\u2018lsa, ya\u2019ni juft bo\u2018lsa if son % 2 == 0: # Bu sonni tashlab o\u2018tamiz va loop keyingi son bilan davom etadi continue # Agar son toq bo\u2018lsa (ya\u2019ni yuqoridagi shart bajarilmagan bo\u2018lsa), uni chiqaramiz print(son) \ud83c\udfaf Faqat musbat sonlarni chiqarish # Musbat va manfiy sonlardan iborat ro'yxat yaratildi sonlar = [-1, 2, -3, 4, -5] # sonlar ro'yxatidagi har bir son bo'yicha yuramiz for son in sonlar: # Agar hozirgi son 0 dan kichik bo\u2018lsa, ya\u2019ni manfiy bo\u2018lsa if son < 0: # Manfiy sonni chiqarib o\u2018tib ketamiz, ya\u2019ni pastdagi qator bajarilmaydi continue # Faqat musbat sonlar (0 va undan katta) shu yerda ekranga chiqariladi print(son) \ud83c\udfaf Faqat juft indeksli mevalarni chiqarish # Mevalardan iborat ro'yxat yaratildi mevalar = ['olma', 'banan', 'apelsin', 'anjir'] # range() funksiyasi orqali indekslar bo'yicha 0 dan len(mevalar) gacha yuramiz for i in range(len(mevalar)): # Agar hozirgi indeks toq bo\u2018lsa (ya'ni 1, 3, ...) if i % 2 != 0: # Bu indeksdagi elementni o\u2018tkazib yuboramiz va loop davom etadi continue # Faqat juft indeks (0, 2, ...) dagi mevalar ekranga chiqariladi print(mevalar[i]) \u2705 PASS \ud83d\udccc Python dasturlash tilida pass operatori \u2014 bu hech qanday amal bajarmaydigan buyruq. Ya\u2019ni, u bo\u2018sh kod blokini vaqtincha to\u2018ldirish uchun ishlatiladi. # 0 dan 4 gacha bo\u2018lgan sonlar ustida aylanuvchi for tsikli for son in range(5): # Agar son 3 ga teng bo\u2018lsa if son == 3: pass # Hech qanday amal bajarmaymiz, faqat kod sintaksisini saqlab qolamiz else: print(son) # Aks holda, sonni ekranga chiqaramiz \ud83c\udfaf Kod hali yozilmagan, lekin struktura tayyor bo\u2018lishi kerak def validate_user_input(): # Bu funksiya foydalanuvchi kiritgan ma'lumotni tekshiradi pass # Keyinroq bu yerga tekshirish kodi yoziladi \ud83c\udfaf Bo\u2018sh class yaratish class PaymentSystem: pass # Bu class keyin to\u2018ldiriladi \ud83c\udfaf Exception (xatolik)ni vaqtincha e'tiborga olmaslik try: x = 10 / 0 except ZeroDivisionError: pass # Hozircha xatoni ko\u2018rsatmaymiz, faqat chetlab o\u2018tamiz \ud83c\udfaf Bo\u2018sh if yoki for bloklarida sintaksis xatosidan saqlanish users = [\"admin\", \"user\", \"guest\"] for user in users: if user == \"admin\": pass # Hozircha admin uchun alohida ish yo\u2018q else: print(f\"{user} uchun oddiy xush kelibsiz\") \u2705 AMALIYOT \u2705 1-topshiriq: Foydalanuvchi kiritgan natural son uchun 1 dan shu songacha bo\u2018lgan sonlar yig\u2018indisini for loop orqali hisoblang. \u2705 2-topshiriq: Quyidagi ro\u2018yxatda nechta elementda eng kamida 2 ta unli harf borligini aniqlang: words = [\"apple\", \"sky\", \"queue\", \"book\", \"cry\"] \u2705 3-topshiriq: Ro\u2018yxatda eng katta va eng kichik sonning farqini toping: numbers = [7, 12, -3, 8, 0, 15] \u2705 4-topshiriq: Foydalanuvchi 10 ta son kiritadi. For loop orqali faqat musbat va toq sonlarni yangi ro\u2018yxatga yozing. \u2705 5-topshiriq: Quyidagi ro\u2018yxatdagi har bir so\u2018zning birinchi va oxirgi harfini birlashtirib yangi ro\u2018yxat hosil qiling: words = [\"python\", \"apple\", \"code\", \"loop\"] # natija: [\"pn\", \"ae\", \"ce\", \"lp\"] \u2705 6-topshiriq: Ro\u2018yxatdan faqat 3 ga va 5 ga bo\u2018linadigan sonlarni ajratib, ularning o\u2018rtacha qiymatini hisoblang: nums = [5, 9, 15, 20, 22, 30, 35] \u2705 7-topshiriq: Foydalanuvchi matn kiritadi. Matndagi raqamlarni topib, ularni son sifatida yig\u2018indisini hisoblang. Masalan: \"salom12dunyo3\" => natija: 15 \u2705 8-topshiriq: Berilgan ro\u2018yxatdan elementlarning indekslari juft bo\u2018lganlarini alohida ro\u2018yxatga chiqarib bering: fruits = [\"olma\", \"banan\", \"gilos\", \"anor\", \"nok\", \"shaftoli\"] \u2705 9-topshiriq: Ro\u2018yxatda ketma-ket 2 marta uchraydigan elementlarni aniqlang: items = [1, 2, 2, 3, 4, 4, 4, 5] # natija: 2, 4 \u2705 10-topshiriq: Foydalanuvchi kiritgan matndan faqat bosh harflarni ajratib, bitta string qilib chiqaring. Masalan: \"Salom DunYo\" => \"SDY\" \u2705 11-topshiriq: Quyidagi ro\u2018yxatdan palindrom (teskari o\u2018qilganda ham bir xil) so\u2018zlarni ajratib chiqaring: words = [\"anna\", \"python\", \"level\", \"loop\", \"radar\"] \u2705 12-topshiriq: for loop yordamida 100 dan kichik Fibonacci sonlarini ro\u2018yxatga yig\u2018ing. \u2705 13-topshiriq: Ro\u2018yxatda nechta elementda harflar soni raqamlar sonidan ko\u2018p ekanini hisoblang: elements = [\"abc123\", \"hello\", \"42\", \"py2025\", \"test\"] \u2705 14-topshiriq: Ro\u2018yxatdagi sonlardan har birining raqamlari yig\u2018indisini hisoblab, yangi ro\u2018yxatga joylang: nums = [12, 305, 47, 88] # natija: [3, 8, 11, 16] \u2705 15-topshiriq: Ro\u2018yxatdagi elementlardan faqat birinchi harfi har doim katta, qolganlari kichik bo\u2018lgan yangi ro\u2018yxat yarating: names = [\"aNVAR\", \"mUROD\", \"dILSHOD\"] # natija: [\"Anvar\", \"Murod\", \"Dilshod\"]","title":"For Loop"},{"location":"python/for-loop/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/for-loop/#9-dars-for-loop","text":"\ud83d\udccc for \u2013 bu tsikl operatori , ya\u2019ni takrorlovchi kod . Agar sizda bir nechta qiymatlar bo\u2018lsa (masalan, ro\u2018yxat, sonlar, harflar), for tsikli ularni birma-bir olib, har biriga bir xil amalni bajarish uchun ishlatiladi. # 'salom' degan matnli o'zgaruvchi yaratildi soz = \"salom\" # soz o'zgaruvchisidagi har bir harf bo'yicha yuramiz for harf in soz: # Har bir harfni alohida qilib ekranga chiqaramiz print(harf)","title":"\ud83e\udde9 9-DARS FOR LOOP"},{"location":"python/for-loop/#listlar-bilan-ishlash","text":"\ud83d\udccc Ro'yxatlar eng keng tarqalgan takrorlanadigan obyektlardan biri hisoblanadi. \ud83c\udfaf Buyurtmalar ro\u2018yxatini ekranga chiqarish # Buyurtma qilingan mahsulotlar ro'yxati orders = [\"bread\", \"milk\", \"eggs\", \"cheese\"] # Har bir mahsulot bo'yicha yurib chiqamiz for item in orders: # Mahsulot nomini ekranga chiqaramiz print(f\"Ordered item: {item}\") \ud83c\udfaf Narxlar ro'yxati bilan umumiy xarajatni hisoblash # Har bir mahsulot narxi (dollar) prices = [2.5, 1.0, 3.2, 4.8] # Umumiy summa uchun o'zgaruvchi total_cost = 0 # Har bir narx ustida yuramiz for price in prices: # Narxni umumiy summaga qo'shamiz total_cost += price # Umumiy narxni ekranga chiqaramiz print(f\"Total cost: ${total_cost}\") \ud83c\udfaf Email ro'yxatidan foydalanuvchilarga xabar yuborish (simulyatsiya) # Email manzillar ro'yxati emails = [\"ali@example.com\", \"vali@example.com\", \"sara@example.com\"] # Har bir foydalanuvchiga xabar yuboramiz (simulyatsiya) for email in emails: # Xabar yuborilganini bildiruvchi matn print(f\"Sending email to: {email}\") \ud83c\udfaf Login bo\u2018lgan foydalanuvchilarni filtrlash # Foydalanuvchilar va ularning login statusi (True - tizimga kirgan) users = [ {\"username\": \"admin\", \"logged_in\": True}, {\"username\": \"john\", \"logged_in\": False}, {\"username\": \"alice\", \"logged_in\": True}, ] # Faqat login bo'lgan foydalanuvchilarni chiqaramiz for user in users: if user[\"logged_in\"]: print(f\"{user['username']} is currently online.\") \ud83c\udfaf Mahsulot narxlarini chegirma bilan yangilash # Mahsulotlar va ularning narxlari ro'yxati products = [ {\"name\": \"laptop\", \"price\": 1000}, {\"name\": \"keyboard\", \"price\": 100}, {\"name\": \"mouse\", \"price\": 50}, ] # Har bir mahsulotga 10% chegirma beramiz for product in products: # Chegirma miqdorini hisoblaymiz discount = product[\"price\"] * 0.1 # Narxni yangilaymiz product[\"price\"] -= discount # Natijani chiqaramiz print(\"Discounted products:\") for product in products: print(f\"{product['name']}: ${product['price']}\") \ud83c\udfaf Foydalanuvchi ismlarini bosh harf bilan yozib chiqish # Foydalanuvchilar ismlari ro'yxati (kichik harflarda) usernames = [\"ali\", \"sara\", \"bekzod\", \"nigora\"] # Har bir ismni bosh harf bilan yangilaymiz for i in range(len(usernames)): # `.capitalize()` birinchi harfni katta qiladi usernames[i] = usernames[i].capitalize() # Natijani chiqaramiz print(\"Capitalized usernames:\", usernames) \ud83c\udfaf Sonlar ro'yxatidan faqat toq sonlarni ajratib olish # Sonlar ro'yxati numbers = [4, 7, 12, 9, 15, 2, 8] # Faqat toq sonlar uchun yangi ro'yxat odd_numbers = [] # Har bir sonni tekshiramiz for number in numbers: if number % 2 != 0: # Toq bo'lsa yangi ro'yxatga qo'shamiz odd_numbers.append(number) # Natijani chiqaramiz print(\"Odd numbers:\", odd_numbers)","title":"\u2705 LISTLAR BILAN ISHLASH"},{"location":"python/for-loop/#range","text":"\ud83d\udccc Python dasturlash tilida range() funksiyasi ketma-ket sonlar qatorini yaratish uchun ishlatiladi. Bu funksiya odatda for loop bilan birga ishlatiladi va bizga ma\u2019lum bir sonlar oralig\u2018ida takrorlash (aylanib chiqish) imkonini beradi. \ud83c\udfaf Oddiy range() ishlatilishi # 0 dan 4 gacha (5 kirmaydi) for i in range(5): print(i) \ud83c\udfaf Belgilangan oraliqdagi qiymatlar # 3 dan 8 gacha bo'lgan sonlarni chiqaramiz for i in range(3, 9): print(i) \ud83c\udfaf Step bilan yurish # 0 dan 10 gacha bo'lgan juft sonlarni chiqaramiz (2 qadam bilan) for index in range(0, 11, 2): print(index) \ud83c\udfaf Orqaga qarab sanash # 10 dan 1 gacha orqaga qarab for i in range(10, 0, -1): print(i) \ud83c\udfaf Har bir foydalanuvchiga ID berish # 3 ta foydalanuvchi nomi users = [\"Ali\", \"Vali\", \"Sardor\"] # Foydalanuvchilarga ID raqam berish (1 dan boshlab) for i in range(len(users)): print(f\"User ID: {i+1} - Name: {users[i]}\")","title":"\u2705 RANGE"},{"location":"python/for-loop/#dictionary-bilan-ishlash","text":"\ud83c\udfaf Foydalanuvchi profillari ro\u2018yxati # Bir nechta foydalanuvchilarning profillari users = [ {\"username\": \"ali\", \"email\": \"ali@example.com\", \"is_active\": True}, {\"username\": \"sara\", \"email\": \"sara@example.com\", \"is_active\": False}, {\"username\": \"diyor\", \"email\": \"diyor@example.com\", \"is_active\": True}, ] # Faqat aktiv foydalanuvchilarni chiqaramiz for user in users: if user[\"is_active\"]: print(f\"{user['username']} (email: {user['email']}) is active.\") \ud83c\udfaf Savatdagi mahsulotlar va umumiy narxni hisoblash # Xarid savatidagi mahsulotlar cart = [ {\"name\": \"laptop\", \"price\": 850.0, \"quantity\": 1}, {\"name\": \"mouse\", \"price\": 25.0, \"quantity\": 2}, {\"name\": \"keyboard\", \"price\": 45.0, \"quantity\": 1}, ] # Umumiy narxni hisoblaymiz total = 0 for item in cart: total += item[\"price\"] * item[\"quantity\"] print(f\"Umumiy summa: ${total}\") \ud83c\udfaf Talabalar baholari bo\u2018yicha statistika # Talabalar va ularning baholari grades = { \"Ali\": 87, \"Sardor\": 92, \"Nigora\": 78, \"Lola\": 85 } # O\u2018rtacha bahoni hisoblaymiz average = sum(grades.values()) / len(grades) print(f\"O\u2018rtacha baho: {average}\") \ud83c\udfaf Chegirma tizimi (promo code) # Promo kodlar va ularning chegirmalari (%) promo_codes = { \"SALE10\": 10, \"WELCOME15\": 15, \"VIP20\": 20 } code = input(\"Promo kodni kiriting: \").upper() # Kodni tekshirib chegirma beramiz if code in promo_codes: print(f\"Sizga {promo_codes[code]}% chegirma berildi!\") else: print(\"Noto\u2018g\u2018ri promo kod!\") \ud83c\udfaf API javobini tahlil qilish (dictionary ko\u2018rinishida) # API dan kelgan javob response = { \"status\": \"success\", \"data\": { \"id\": 102, \"title\": \"New blog post\", \"author\": \"Umid\", \"views\": 1234 } } # Ma'lumotni tahlil qilish if response[\"status\"] == \"success\": blog = response[\"data\"] print(f\"Post: {blog['title']} (Author: {blog['author']}) \u2014 {blog['views']} views\") else: print(\"Xatolik yuz berdi.\")","title":"\u2705 DICTIONARY BILAN ISHLASH"},{"location":"python/for-loop/#sets-bilan-ishlash","text":"\ud83c\udfaf Foydalanuvchi kirgan sahifalarni yagona ro\u2018yxatga olish # Sahifalar bo'yicha foydalanuvchi harakati (ba'zilari takrorlangan) visited_pages = [\"home\", \"about\", \"contact\", \"home\", \"products\", \"contact\"] # Takrorlangan sahifalarni set orqali avtomatik chiqarib tashlaymiz unique_pages = set(visited_pages) print(\"Foydalanuvchi kirgan noyob sahifalar:\") for page in unique_pages: print(page) \ud83c\udfaf Email ro'yxatlaridagi dublikatlarni olib tashlash # Ro'yxatda takrorlanuvchi email manzillar bor emails = [ \"ali@example.com\", \"sara@example.com\", \"ali@example.com\", \"jamshid@example.com\", \"sara@example.com\" ] # set yordamida faqat noyob email manzillarni olamiz unique_emails = set(emails) print(\"Yagona email manzillar:\") for email in unique_emails: print(email) \ud83c\udfaf Ikkita foydalanuvchi orasidagi umumiy do\u2018stlarni topish # Foydalanuvchilarning do'stlari friends_1 = {\"Ali\", \"Sara\", \"Lola\", \"Bekzod\"} friends_2 = {\"Lola\", \"Sardor\", \"Ali\", \"Diyor\"} # Umumiy do'stlar: kesishma (intersection) common_friends = friends_1 & friends_2 print(\"Umumiy do'stlar:\") print(common_friends) \ud83c\udfaf Ro\u2018yxatdan o\u2018tgan foydalanuvchilar va online foydalanuvchilar orasidagi farq # Ro'yxatdan o\u2018tgan foydalanuvchilar registered_users = {\"ali\", \"sara\", \"diyor\", \"nigora\"} # Hozir online bo'lgan foydalanuvchilar online_users = {\"ali\", \"sardor\"} # Faqat ro'yxatdan o\u2018tgan, lekin online bo'lmaganlar offline_users = registered_users - online_users print(\"Hozir offline foydalanuvchilar:\") print(offline_users)","title":"\u2705 SETS BILAN ISHLASH"},{"location":"python/for-loop/#tuple-bilan-ishlash","text":"\ud83c\udfaf Oddiy tuple ustidan for tsik # Koordinatalar (o'zgarmas qiymatlar) coordinates = (10, 20, 30) # Har bir koordinatani chiqarish for coordinate in coordinates: print(coordinate) \ud83c\udfaf Mahsulotlar ro\u2018yxati tupleda (ID, nomi, narxi) # Har bir mahsulot: (id, nomi, narxi) products = ( (1, \"Laptop\", 1200), (2, \"Mouse\", 30), (3, \"Keyboard\", 50), ) # Mahsulotlar haqida to\u2018liq ma\u2019lumot chiqaramiz for product_id, name, price in products: print(f\"ID: {product_id}, Nomi: {name}, Narxi: ${price}\")","title":"\u2705 TUPLE BILAN ISHLASH"},{"location":"python/for-loop/#nested-loops","text":"\ud83c\udfaf 2D ro'yxat (matritsa) elementlarini ko\u2018rsatish matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] for row in matrix: for element in row: print(element, end=\" \") print() # Qator oxirida yangi qatorga o'tish \ud83d\udccc Python dasturlash tilida print() funksiyasi biror narsani ekranga chiqargandan so\u2018ng avtomatik tarzda yangi qatorga o\u2018tadi. Bu yangi qator belgisi \\n deb ataladi. Ammo ba\u2019zida har bir chiqishdan keyin yangi qatorga o\u2018tmasdan, boshqa belgi (masalan, bo\u2018sh joy yoki vergul) qo\u2018yishni xohlaysiz. Shu holatda print() funksiyasida end parametri ishlatiladi. \ud83c\udfaf Foydalanuvchilar va ularning telefon raqamlari # Har bir foydalanuvchining bir nechta telefon raqami bor users = { \"Ali\": [\"+998901112233\", \"+998912223344\"], \"Sara\": [\"+998933445566\"], \"Diyor\": [\"+998935551234\", \"+998998887766\"] } # Har bir foydalanuvchi va raqamlarini chiqaramiz for name, phones in users.items(): print(f\"{name}ning raqamlari:\") for phone in phones: print(f\" - {phone}\") \ud83c\udfaf Kategoriya va mahsulotlar # Mahsulotlar toifalar bo'yicha guruhlangan categories = { \"Elektronika\": [\"Telefon\", \"Noutbuk\", \"Smart soat\"], \"Kiyim\": [\"Ko\u2018ylak\", \"Shim\", \"Poyabzal\"], \"Oziq-ovqat\": [\"Non\", \"Sut\", \"Yog\u2018\"] } # Har bir kategoriya va mahsulotlarini chiqaramiz for category, items in categories.items(): print(f\"{category}:\") for item in items: print(f\" - {item}\") \ud83c\udfaf Sayt menyusini chiqarish (asosiy bo\u2018lim + ichki bo\u2018limlar) # Sayt menyusi menu = { \"Bosh sahifa\": [], \"Kurslar\": [\"Python\", \"Django\", \"Flask\"], \"Aloqa\": [\"Biz haqimizda\", \"Bog\u2018lanish\"] } # Menyuni chiqaramiz for main_menu, submenus in menu.items(): print(main_menu) for submenu in submenus: print(f\" - {submenu}\")","title":"\u2705 NESTED LOOPS"},{"location":"python/for-loop/#for-else","text":"\ud83d\udccc Python dasturlash tilida for...else bu \u2014 for tsikli bilan birga ishlatiladigan maxsus konstruktsiya bo\u2018lib, u orqali loop muvaffaqiyatli tugaganidan keyin else qismi bajariladi. \ud83c\udfaf Foydalanuvchi ro\u2018yxatida admin borligini tekshirish users = [\"ali\", \"sara\", \"lola\", \"jamshid\"] for user in users: if user == \"admin\": print(\"Admin foydalanuvchi topildi.\") break else: print(\"Admin foydalanuvchi ro'yxatda yo'q.\") \ud83c\udfaf Parol to\u2018g\u2018riligini tekshirish # Parollar bazasi correct_passwords = [\"pass123\", \"admin456\", \"qwerty789\"] user_input = \"admin456\" for password in correct_passwords: if user_input == password: print(\"Parol to'g'ri.\") break else: print(\"Parol noto'g'ri.\")","title":"\u2705 FOR ELSE"},{"location":"python/for-loop/#break","text":"\ud83d\udccc break operatori loopni to'xtatadi. Bu operator for yoki while loopda ishlatilishi mumkin. break loopning bajarilishini to'xtatadi va loopdan chiqadi, hatto loop to'liq tugamagan bo'lsa ham. \ud83c\udfaf Ma\u2019lumotlar bazasidan kerakli foydalanuvchini topish # Foydalanuvchilar ro'yxatini lug'atlar ko'rinishida yaratdik users = [ {\"id\": 1, \"name\": \"Ali\"}, {\"id\": 2, \"name\": \"Sara\"}, {\"id\": 3, \"name\": \"Diyor\"} ] # Qidirilayotgan foydalanuvchining ID raqamini belgiladik searched_id = 2 # users ro'yxatidagi har bir element (ya'ni foydalanuvchi) bo'yicha yuramiz for user in users: # Agar foydalanuvchining 'id' qiymati qidirilayotgan id ga teng bo'lsa if user[\"id\"] == searched_id: # Foydalanuvchi topilganini ekranga chiqaramiz print(f\"Foydalanuvchi topildi: {user['name']}\") # Qolgan elementlarni tekshirishning hojati yo'q, loop ni to'xtatamiz break \ud83c\udfaf API javobidan kerakli postni topish # Postlar listini yaratdik, har bir post dictionary ko'rinishida berilgan posts = [ {\"id\": 1, \"title\": \"Salom\"}, {\"id\": 2, \"title\": \"Python haqida\"}, {\"id\": 3, \"title\": \"Xayr\"} ] # Qidirilayotgan postning sarlavhasini belgiladik search_title = \"Python haqida\" # posts listdagi har bir post bo'yicha yuramiz for post in posts: # Agar postning 'title' qiymati qidirilayotgan sarlavhaga teng bo'lsa if post[\"title\"] == search_title: # Post topilganini ekranga chiqaramiz print(\"Post topildi:\", post) # Endi qolgan postlarni tekshirishning hojati yo'q, loop ni to'xtatamiz break \ud83c\udfaf for + else bilan birga break ishlatish # Shaharlar nomlari yozilgan ro'yxat yaratildi cities = [\"Toshkent\", \"Samarqand\", \"Buxoro\", \"Xiva\"] # Qidirilayotgan shahar nomi belgilanmoqda search = \"Andijon\" # cities ro'yxatidagi har bir shahar ustida yurib chiqamiz for city in cities: # Agar ro'yxatdagi shahar nomi qidirilayotgan nomga teng bo\u2018lsa if city == search: # Ekranga topilganligi haqida xabar chiqaramiz print(\"Shahar topildi!\") # Endi boshqa shaharlarni tekshirish shart emas, loop to\u2018xtatiladi break # Agar loop oxirigacha borib chiqqan bo\u2018lsa va break ishlamagan bo\u2018lsa else: # Demak shahar ro'yxatda yo\u2018q, degan xabar chiqariladi print(\"Shahar ro'yxatda yo'q.\")","title":"\u2705 BREAK"},{"location":"python/for-loop/#continue","text":"\ud83d\udccc Python dasturlash tilida continue operatori tsikl ichida ishlatiladigan boshqaruvchi buyruq bo\u2018lib, u ishga tushganda tsikldagi shu takrorlanishning qolgan qismini o\u2018tkazib yuboradi va keyingi takrorlanishga (iteration) o\u2018tadi. # Sonlardan iborat ro'yxat yaratildi sonlar = [1, 2, 3, 4, 5] # sonlar ro'yxatidagi har bir son bo'yicha yuramiz for son in sonlar: # Agar hozirgi son 2 ga bo\u2018linganda qoldiq 0 bo\u2018lsa, ya\u2019ni juft bo\u2018lsa if son % 2 == 0: # Bu sonni tashlab o\u2018tamiz va loop keyingi son bilan davom etadi continue # Agar son toq bo\u2018lsa (ya\u2019ni yuqoridagi shart bajarilmagan bo\u2018lsa), uni chiqaramiz print(son) \ud83c\udfaf Faqat musbat sonlarni chiqarish # Musbat va manfiy sonlardan iborat ro'yxat yaratildi sonlar = [-1, 2, -3, 4, -5] # sonlar ro'yxatidagi har bir son bo'yicha yuramiz for son in sonlar: # Agar hozirgi son 0 dan kichik bo\u2018lsa, ya\u2019ni manfiy bo\u2018lsa if son < 0: # Manfiy sonni chiqarib o\u2018tib ketamiz, ya\u2019ni pastdagi qator bajarilmaydi continue # Faqat musbat sonlar (0 va undan katta) shu yerda ekranga chiqariladi print(son) \ud83c\udfaf Faqat juft indeksli mevalarni chiqarish # Mevalardan iborat ro'yxat yaratildi mevalar = ['olma', 'banan', 'apelsin', 'anjir'] # range() funksiyasi orqali indekslar bo'yicha 0 dan len(mevalar) gacha yuramiz for i in range(len(mevalar)): # Agar hozirgi indeks toq bo\u2018lsa (ya'ni 1, 3, ...) if i % 2 != 0: # Bu indeksdagi elementni o\u2018tkazib yuboramiz va loop davom etadi continue # Faqat juft indeks (0, 2, ...) dagi mevalar ekranga chiqariladi print(mevalar[i])","title":"\u2705 CONTINUE"},{"location":"python/for-loop/#pass","text":"\ud83d\udccc Python dasturlash tilida pass operatori \u2014 bu hech qanday amal bajarmaydigan buyruq. Ya\u2019ni, u bo\u2018sh kod blokini vaqtincha to\u2018ldirish uchun ishlatiladi. # 0 dan 4 gacha bo\u2018lgan sonlar ustida aylanuvchi for tsikli for son in range(5): # Agar son 3 ga teng bo\u2018lsa if son == 3: pass # Hech qanday amal bajarmaymiz, faqat kod sintaksisini saqlab qolamiz else: print(son) # Aks holda, sonni ekranga chiqaramiz \ud83c\udfaf Kod hali yozilmagan, lekin struktura tayyor bo\u2018lishi kerak def validate_user_input(): # Bu funksiya foydalanuvchi kiritgan ma'lumotni tekshiradi pass # Keyinroq bu yerga tekshirish kodi yoziladi \ud83c\udfaf Bo\u2018sh class yaratish class PaymentSystem: pass # Bu class keyin to\u2018ldiriladi \ud83c\udfaf Exception (xatolik)ni vaqtincha e'tiborga olmaslik try: x = 10 / 0 except ZeroDivisionError: pass # Hozircha xatoni ko\u2018rsatmaymiz, faqat chetlab o\u2018tamiz \ud83c\udfaf Bo\u2018sh if yoki for bloklarida sintaksis xatosidan saqlanish users = [\"admin\", \"user\", \"guest\"] for user in users: if user == \"admin\": pass # Hozircha admin uchun alohida ish yo\u2018q else: print(f\"{user} uchun oddiy xush kelibsiz\")","title":"\u2705 PASS"},{"location":"python/for-loop/#amaliyot","text":"","title":"\u2705 AMALIYOT"},{"location":"python/for-loop/#1-topshiriq","text":"Foydalanuvchi kiritgan natural son uchun 1 dan shu songacha bo\u2018lgan sonlar yig\u2018indisini for loop orqali hisoblang.","title":"\u2705 1-topshiriq:"},{"location":"python/for-loop/#2-topshiriq","text":"Quyidagi ro\u2018yxatda nechta elementda eng kamida 2 ta unli harf borligini aniqlang: words = [\"apple\", \"sky\", \"queue\", \"book\", \"cry\"]","title":"\u2705 2-topshiriq:"},{"location":"python/for-loop/#3-topshiriq","text":"Ro\u2018yxatda eng katta va eng kichik sonning farqini toping: numbers = [7, 12, -3, 8, 0, 15]","title":"\u2705 3-topshiriq:"},{"location":"python/for-loop/#4-topshiriq","text":"Foydalanuvchi 10 ta son kiritadi. For loop orqali faqat musbat va toq sonlarni yangi ro\u2018yxatga yozing.","title":"\u2705 4-topshiriq:"},{"location":"python/for-loop/#5-topshiriq","text":"Quyidagi ro\u2018yxatdagi har bir so\u2018zning birinchi va oxirgi harfini birlashtirib yangi ro\u2018yxat hosil qiling: words = [\"python\", \"apple\", \"code\", \"loop\"] # natija: [\"pn\", \"ae\", \"ce\", \"lp\"]","title":"\u2705 5-topshiriq:"},{"location":"python/for-loop/#6-topshiriq","text":"Ro\u2018yxatdan faqat 3 ga va 5 ga bo\u2018linadigan sonlarni ajratib, ularning o\u2018rtacha qiymatini hisoblang: nums = [5, 9, 15, 20, 22, 30, 35]","title":"\u2705 6-topshiriq:"},{"location":"python/for-loop/#7-topshiriq","text":"Foydalanuvchi matn kiritadi. Matndagi raqamlarni topib, ularni son sifatida yig\u2018indisini hisoblang. Masalan: \"salom12dunyo3\" => natija: 15","title":"\u2705 7-topshiriq:"},{"location":"python/for-loop/#8-topshiriq","text":"Berilgan ro\u2018yxatdan elementlarning indekslari juft bo\u2018lganlarini alohida ro\u2018yxatga chiqarib bering: fruits = [\"olma\", \"banan\", \"gilos\", \"anor\", \"nok\", \"shaftoli\"]","title":"\u2705 8-topshiriq:"},{"location":"python/for-loop/#9-topshiriq","text":"Ro\u2018yxatda ketma-ket 2 marta uchraydigan elementlarni aniqlang: items = [1, 2, 2, 3, 4, 4, 4, 5] # natija: 2, 4","title":"\u2705 9-topshiriq:"},{"location":"python/for-loop/#10-topshiriq","text":"Foydalanuvchi kiritgan matndan faqat bosh harflarni ajratib, bitta string qilib chiqaring. Masalan: \"Salom DunYo\" => \"SDY\"","title":"\u2705 10-topshiriq:"},{"location":"python/for-loop/#11-topshiriq","text":"Quyidagi ro\u2018yxatdan palindrom (teskari o\u2018qilganda ham bir xil) so\u2018zlarni ajratib chiqaring: words = [\"anna\", \"python\", \"level\", \"loop\", \"radar\"]","title":"\u2705 11-topshiriq:"},{"location":"python/for-loop/#12-topshiriq","text":"for loop yordamida 100 dan kichik Fibonacci sonlarini ro\u2018yxatga yig\u2018ing.","title":"\u2705 12-topshiriq:"},{"location":"python/for-loop/#13-topshiriq","text":"Ro\u2018yxatda nechta elementda harflar soni raqamlar sonidan ko\u2018p ekanini hisoblang: elements = [\"abc123\", \"hello\", \"42\", \"py2025\", \"test\"]","title":"\u2705 13-topshiriq:"},{"location":"python/for-loop/#14-topshiriq","text":"Ro\u2018yxatdagi sonlardan har birining raqamlari yig\u2018indisini hisoblab, yangi ro\u2018yxatga joylang: nums = [12, 305, 47, 88] # natija: [3, 8, 11, 16]","title":"\u2705 14-topshiriq:"},{"location":"python/for-loop/#15-topshiriq","text":"Ro\u2018yxatdagi elementlardan faqat birinchi harfi har doim katta, qolganlari kichik bo\u2018lgan yangi ro\u2018yxat yarating: names = [\"aNVAR\", \"mUROD\", \"dILSHOD\"] # natija: [\"Anvar\", \"Murod\", \"Dilshod\"]","title":"\u2705 15-topshiriq:"},{"location":"python/functions/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 11-DARS FUNCTIONS \ud83d\udccc Python dasturlash tilida funksiya bu \u2014 kodni bir joyda yozib, ko\u2018p joylarda chaqirish, kodni tartibli va qisqa qilish uchun qulay vositadir. Funksiya yordamida kodni modullashtirish va takrorlanadigan qismni soddalashtirish mumkin. \u2705 FUNKSIYA YARATISH (DEF) def greet(): # Oddiy funksiya: salomlashish print(\"Hello, world!\") \u2705 CALLING A FUNCTION (FUNKSIYANI CHAQIRISH) \ud83d\udccc Pythonda yozilgan funksiyani ishlatish uchun uni chaqirish kerak bo\u2018ladi. Buning uchun faqat funksiyaning nomi va qavslar () yoziladi. # Bu yerda biz greet() degan nomli funksiya yaratdik def greet(): # Funksiya ichida \"Hello, world!\" degan matnni chiqaradigan buyruq bor print(\"Hello, world!\") # Bu yerda esa yuqorida yaratilgan greet() funksiyasini chaqiryapmiz greet() \u2705 PARAMETERS AND ARGUMENTS (PARAMETRLAR VA ARGUMENTLAR) \ud83d\udccc Parametr \u2013 bu funksiya yaratilyotganda yoziladigan o\u2018zgaruvchilar bo\u2018lib, ular funksiyaga ma\u2019lumot qabul qilish uchun ishlatiladi. # Funksiya yaratilyapti, u 2 ta parametr oladi: a va b def add(a, b): # a va b sonlar qo\u2018shilib, natija qaytariladi return a + b # Funksiyani chaqiryapmiz, 2 va 3 argument sifatida uzatilyapti result = add(2, 3) # Natijani chiqaramiz print(result) # Natija: 5 \ud83c\udfaf Tasavvur qilaylik, siz foydalanuvchi ma\u2019lumotlarini qabul qilib, uni ro\u2018yxatga qo\u2018shishingiz kerak. # Bo\u2018sh foydalanuvchilar ro\u2018yxati users = [] # Funksiya foydalanuvchi ma\u2019lumotlarini qabul qiladi def add_user(name, age): # name va age \u2013 bu parametrlar user = { \"name\": name, \"age\": age } users.append(user) # user ma\u2019lumoti ro\u2018yxatga qo\u2018shiladi # Funksiyani chaqiramiz, foydalanuvchi ma\u2019lumotlarini argument sifatida beramiz add_user(\"Ali\", 25) add_user(\"Laylo\", 22) # Natijada users ro\u2018yxatida 2 ta foydalanuvchi bo\u2018ladi print(users) \ud83d\udccc Argument \u2013 bu funksiyani chaqirayotganingizda beriladigan real qiymat . Parametrga haqiqiy qiymat uzatish uchun ishlatiladi. # Funksiya yaratildi. Parametr: ism def salom_ber(ism): print(f\"Salom, {ism}!\") # Funksiyani chaqirdik, argument sifatida \"Umid\" uzatildi salom_ber(\"Umid\") \ud83c\udfaf Sizda email jo\u2018natuvchi tizim bor va siz to , subject , body argumentlarini berib, email jo\u2018natasiz. # Email jo\u2018natish funksiyasi def send_email(to, subject, body): print(f\"To: {to}\") print(f\"Subject: {subject}\") print(f\"Body: {body}\") print(\"Email muvaffaqiyatli yuborildi!\") # Real loyiha \u2013 argumentlar bilan chaqirilmoqda send_email( to=\"user@example.com\", # Argument: kimga yuboriladi subject=\"Xush kelibsiz!\", # Argument: sarlavha body=\"Siz muvaffaqiyatli ro\u2018yxatdan o\u2018tdingiz.\" # Argument: matn ) \u2705 DEFAULT PARAMETERS (STANDART PARAMETRLAR) \ud83d\udccc Standart parametr \u2014 bu funksiyada oldindan belgilangan qiymatga ega bo\u2018lgan parametr. Agar funksiyani chaqirishda bu parametr uchun argument berilmasa, u default qiymatni ishlatadi. # Funksiya yaratildi, exponent parametri uchun default qiymat 2 def power(base, exponent=2): # base son exponent darajaga ko\u2018tariladi return base ** exponent # Faqat bitta argument berdik \u2013 base = 3, exponent 2 deb olinadi (default) print(power(3)) # Natija: 9 (3^2) # Ikkala argumentni ham berdik \u2013 base = 3, exponent = 3 print(power(3, 3)) # Natija: 27 (3^3) \ud83c\udfaf Sizda parol yaratish funksiyasi bor. Unga uzunlik (length) parametri beriladi, lekin foydalanuvchi kiritmasa, standart qiymat sifatida 8 belgilanadi. import random import string # Parol yaratish funksiyasi: uzunlik uchun standart qiymat 8 def generate_password(length=8): belgilar = string.ascii_letters + string.digits parol = ''.join(random.choice(belgilar) for _ in range(length)) return parol # Default uzunlik bilan chaqirish print(generate_password()) # Masalan: a7B3kL2q # Uzunlikni o\u2018zimiz beramiz print(generate_password(12)) # Masalan: jD93kLm8Tz2Q \u2705 RETURN (QIYMAT QAYTARISH) \ud83d\udccc return \u2014 bu funksiya natijasini (qiymatini) tashqariga qaytarish uchun ishlatiladi. Bu qiymatni keyin saqlash, chiqarish yoki boshqa hisob-kitoblarda ishlatish mumkin. # Funksiya: x va y ni ko\u2018paytiradi def multiply(x, y): return x * y # Natija return orqali qaytariladi # multiply(4, 5) = 20, bu qiymat product o\u2018zgaruvchisiga saqlanadi product = multiply(4, 5) # Natijani ekranga chiqaramiz print(product) # 20 \ud83c\udfaf Siz onlayn do\u2018konda mahsulotga 15% QQS solig\u2018i qo\u2018shilgan yakuniy narxni hisoblashni xohlaysiz. # Funksiya: mahsulot narxiga 15% soliq qo\u2018shadi def hisobla_qqs(narx): qqs = narx * 0.15 umumiy = narx + qqs return umumiy # Yakuniy narx qaytariladi # 100 000 so\u2018mlik mahsulot uchun yakuniy narx yakuniy_narx = hisobla_qqs(100000) print(f\"Yakuniy narx (QQS bilan): {yakuniy_narx} so'm\") \u2705 VOID FUNCTION (HECH NIMA QAYTARMAYDIGAN FUNKSIYALAR) \ud83d\udccc Void function \u2013 bu funksiya natija (qiymat) qaytarmaydi, faqat biror amalni bajaradi, masalan: ekranga chiqarish, faylga yozish, yoki ma\u2019lumot bazasiga yozish. # Funksiya: foydalanuvchini kutib oladi def print_welcome(name): print(f\"Welcome, {name}!\") # Faqat chop etadi, hech nima qaytarmaydi # Funksiyani chaqiramiz print_welcome(\"Ali\") \ud83c\udfaf Sizda har bir foydalanuvchi tizimga kirganda logga yozib boradigan funksiya kerak. Bu funksiya hech narsa qaytarmaydi \u2014 faqat faylga yozadi. # Foydalanuvchini log fayliga yozish funksiyasi def log_user_login(username): with open(\"log.txt\", \"a\") as fayl: fayl.write(f\"{username} tizimga kirdi.\\n\") # Funksiyani chaqirish log_user_login(\"Ali\") log_user_login(\"Laylo\") \u2705 VALUE-RETURNING FUNCTION (QIYMAT QAYTARADIGAN FUNKSIYALAR) \ud83d\udccc Qiymat qaytaradigan funksiya \u2014 bu funksiya return operatori yordamida natijani (qiymatni) qaytaradi. # Funksiya: ikki sonning kattasini aniqlaydi def get_maximum(a, b): if a > b: return a # Agar a katta bo\u2018lsa, a ni qaytar else: return b # Aks holda b ni qaytar # Funksiyani chaqiramiz, 7 va 10 ni argument sifatida uzatamiz max_number = get_maximum(7, 10) # Natijani chiqaramiz print(max_number) # 10 \ud83c\udfaf Siz onlayn do\u2018kon qilayapsiz va sizga mahsulotlar ichidan eng qimmatini topuvchi funksiya kerak. # Funksiya: 2 ta mahsulot narxidan eng kattasini qaytaradi def get_expensive(price1, price2): if price1 > price2: return price1 else: return price2 # Misol uchun 2 ta mahsulot narxi narx1 = 850_000 narx2 = 990_000 # Funksiyani chaqiramiz va natijani saqlaymiz eng_qimmat = get_expensive(narx1, narx2) print(f\"Eng qimmat mahsulot narxi: {eng_qimmat} so'm\") \u2705 FUNKSIYAGA RO\u2018YXAT (LIST) UZATISH \ud83d\udccc Pythonda funksiya yaratganda parametr sifatida ro\u2018yxat (list) berishimiz mumkin. Bu funksiyaga bir nechta qiymatni birdan uzatish imkonini beradi. # Funksiya: ro\u2018yxatdagi elementlarni ekranga chiqaradi def print_list(items): # Har bir element ustida aylanish (for loop) for item in items: print(item) # Ro\u2018yxat yaratamiz fruits = [\"apple\", \"banana\", \"cherry\"] # Funksiyaga ro\u2018yxatni argument sifatida uzatamiz print_list(fruits) \ud83c\udfaf Sizda Telegram bot bor va siz bir nechta foydalanuvchilarga avtomatik xabar yubormoqchisiz. Har bir foydalanuvchining ismi ro\u2018yxatda berilgan. # Funksiya: har bir foydalanuvchiga xush kelibsiz xabari yuboradi def send_welcome(users): for user in users: print(f\"Assalomu alaykum, {user}!\") # Foydalanuvchilar ro\u2018yxati user_list = [\"Ali\", \"Laylo\", \"Javohir\"] # Funksiyani chaqiramiz send_welcome(user_list) \u2705 *ARGS \ud83d\udccc *args \u2013 bu funksiya istalgancha sonli argument qabul qilishi uchun ishlatiladi. U * belgisi bilan yoziladi, va Python uni tuple sifatida saqlaydi. # Funksiya: istalgancha son qabul qilib, ularning yig\u2018indisini qaytaradi def total_sum(*args): # args bu tuple ko\u2018rinishidagi o\u2018zgaruvchi return sum(args) # Funksiyaga 5 ta son uzatdik print(total_sum(1, 2, 3, 4, 5)) # Natija: 15 \ud83c\udfaf Sizda savatdagi mahsulotlar narxini avtomatik hisoblaydigan funksiya bor. # Funksiya: mahsulot narxlarini qabul qilib, umumiy summani hisoblaydi def hisobla_savat(*narxlar): umumiy = sum(narxlar) return umumiy # Mahsulotlar: non 8000, sut 12000, guruch 25000, choy 15000 print(hisobla_savat(8000, 12000, 25000, 15000)) # Natija: 60000 \u2705 **KWARGS \ud83d\udccc kwargs \u2014 bu funksiyaga kalit-qiymat juftliklari ko\u2018rinishida istalgancha argument yuborish imkonini beradi. U lug\u2018at (dictionary) sifatida qabul qilinadi: key: value # Funksiya: foydalanuvchi profilidagi har bir kalit-qiymatni chiqaradi def print_profile(**kwargs): # kwargs \u2014 dictionary, .items() bilan kalit-qiymatlarni ajratamiz for key, value in kwargs.items(): print(f\"{key}: {value}\") # Funksiyani chaqiramiz, kalit-qiymat juftliklari bilan print_profile(name=\"Bob\", age=30, profession=\"Engineer\") \ud83c\udfaf Sizda foydalanuvchini ma\u2019lumotlar bazasiga yozish funksiyasi bor. Har bir foydalanuvchi har xil ma\u2019lumot yuborishi mumkin: faqat ism , yoki ism + yoshi , yoki hammasi. def save_user(**info): print(\"Yangi foydalanuvchi ma'lumotlari:\") for key, value in info.items(): print(f\"{key}: {value}\") print(\"\u2705 Saqlandi\\n\") # Turli foydalanuvchilar turlicha ma'lumot yuboradi save_user(name=\"Ali\", age=25) save_user(name=\"Laylo\", phone=\"998901234567\", email=\"laylo@mail.com\") \u2705 LAMBDA FUNKSIYALAR \ud83d\udccc lambda \u2014 bu bir qatorli va tez yoziladigan funksiyalardir. Odatdagi def funksiyalarga o\u2018xshaydi, lekin juda sodda va qisqa ko\u2018rinishda yoziladi. Lambda funksiyalar odatda bir martalik, oddiy amallar uchun ishlatiladi (masalan: hisoblash, filtrlash, saralash). # 1. Sonni kvadratga ko\u2018tarish (x ** 2) square = lambda x: x ** 2 print(square(6)) # 36 # 2. Ikkita sonni qo\u2018shish (x + y) add = lambda x, y: x + y print(add(3, 4)) # 7 \ud83c\udfaf Sizda bir nechta foydalanuvchi bor, ularni yosh bo\u2018yicha tartiblash kerak. Bunda lambda funksiyadan foydalanish mumkin. # Foydalanuvchilar (lug\u2018atlar ro\u2018yxati) users = [ {\"name\": \"Ali\", \"age\": 25}, {\"name\": \"Laylo\", \"age\": 20}, {\"name\": \"Javohir\", \"age\": 30}, ] # Yosh bo\u2018yicha tartiblash (lambda yordamida) sorted_users = sorted(users, key=lambda user: user[\"age\"]) # Natijani chiqaramiz for user in sorted_users: print(f\"{user['name']} - {user['age']} yosh\") \u2705 NESTED FUNCTIONS \ud83d\udccc Nested function \u2014 bu bir funksiyaning ichida boshqa funksiya yaratish demakdir. Ichki funksiya (inner) faqat tashqi funksiya (outer) ichida mavjud bo\u2018ladi va tashqaridan chaqirib bo\u2018lmaydi. Bu usul kodni modullashtirish, xavfsizroq saqlash va faqat kerakli joyda ishlatish uchun qulay. def outer(x): # Tashqi funksiya def inner(y): # Ichki funksiya return y + 2 # Ichki funksiya 2 ni qo\u2018shadi return inner(x) * 2 # Inner natijasi 2 ga ko\u2018paytiriladi result = outer(5) # (5 + 2) * 2 = 14 print(result) # 14 \ud83c\udfaf Siz foydalanuvchiga xush kelibsiz xabarini turli tillarda chiqarishni xohlaysiz. def greeting(language): def get_message(name): if language == \"uz\": return f\"Salom, {name}!\" elif language == \"en\": return f\"Hello, {name}!\" elif language == \"ru\": return f\"\u041f\u0440\u0438\u0432\u0435\u0442, {name}!\" else: return f\"Hi, {name}!\" return get_message # Ichki funksiyani qaytaramiz # O\u2018zbekcha salomlashuv funksiyasi salomlash_uz = greeting(\"uz\") print(salomlash_uz(\"Umid\")) # Salom, Umid! # Inglizcha salomlashuv funksiyasi salomlash_en = greeting(\"en\") print(salomlash_en(\"Umid\")) # Hello, Umid! \u2705 RECURSIVE FUNCTIONS \ud83d\udccc Rekursiv funksiya \u2014 bu o\u2018zini o\u2018zi ichida chaqiradigan funksiya. Bu usul, odatda takroriy (recursive) muammolarni hal qilish uchun ishlatiladi \u2014 masalan: faktorial, Fibonachchi, fayl strukturalari, daraxt ko\u2018rinishidagi ma\u2019lumotlar va hokazo. def factorial(n): # Bazaviy holat: n 0 bo\u2018lsa, 1 ni qaytar if n == 0: return 1 # Rekursiv chaqirish: n * factorial(n - 1) return n * factorial(n - 1) print(factorial(5)) # 120 \ud83c\udfaf Kompyuterdagi papkalar ichida yana papkalar bo\u2018lishi mumkin. Har bir darajadagi fayllarni hisoblash uchun rekursiya ishlatiladi (o\u2018rnatilgan os moduli orqali). import os def count_files(folder_path): total = 0 for item in os.listdir(folder_path): full_path = os.path.join(folder_path, item) if os.path.isdir(full_path): total += count_files(full_path) # Ichki papkani tekshirish else: total += 1 # Fayl topildi return total # Misol uchun: \"/home/umid/hujjatlar\" print(count_files(\"/home/umid/hujjatlar\")) \u2705 TYPE ANNOTATION \u2013 TURINI KO\u2018RSATISH \ud83d\udccc Type annotation \u2014 bu o\u2018zgaruvchilar, parametrlar va return (natija) uchun ma\u2019lumot turini ko\u2018rsatish usulidir. Bu yordamida kod ancha tushunarli bo\u2018ladi, xatolarni aniqlash osonlashadi, IDE (VS Code, PyCharm) avtomatik tekshirish qiladi. def add_numbers(a: int, b: int) -> int: # a va b butun sonlar sifatida olinadi, natija ham int bo\u2018ladi return a + b result: int = add_numbers(10, 20) print(result) # 30 \ud83c\udfaf Siz API orqali yangi foydalanuvchi yaratadigan funksiya yozmoqchisiz. Ushbu foydalanuvchining ismi, yoshi va faollik holati (True yoki False) bo\u2018lishi kerak. def create_user(name: str, age: int, active: bool) -> dict: return { \"name\": name, \"age\": age, \"active\": active } user_info: dict = create_user(\"Umid\", 25, True) print(user_info) \u2705 DOCSTRING \ud83d\udccc Docstring (documentation string) \u2014 bu funksiya, klass yoki modul nima qilishini tavsiflab beruvchi matn. U funksiyaning birinchi qatorida uchta qo\u2018shtirnoq (\"\"\") bilan yoziladi. Maqsad: Funksiya qanday ishlaydi, qanday parametrlar oladi, va nima qaytaradi \u2014 bularni tushuntirish. def multiply(a: int, b: int) -> int: \"\"\" Ikki sonni ko'paytiradi va natijani qaytaradi. :param a: birinchi son :param b: ikkinchi son :return: natija (int) \"\"\" return a * b print(multiply.__doc__) \u2705 HIGHER-ORDER FUNKSIYALAR \ud83d\udccc Higher-order function \u2014 bu boshqa funksiyani argument sifatida qabul qiladigan yoki funksiya sifatida natijada qaytaradigan funksiyadir. Pythonda funksiyalar ham \"obyekt\" bo\u2018lgani uchun, ularni o\u2018zgaruvchiga berish, funksiyaga uzatish, yoki qaytarish mumkin. # apply_twice funksiyasi boshqa funksiya (func) va qiymat (value) oladi def apply_twice(func, value): # func(value) chaqiriladi \u2192 natijasi yana func ga beriladi return func(func(value)) # increment funksiyasi bitta sonni 1 ga oshiradi def increment(x): return x + 1 # apply_twice funksiyasiga increment funksiyasi va 5 soni uzatilmoqda result = apply_twice(increment, 5) print(result) # 7 chiqadi, chunki: increment(increment(5)) \u2192 increment(6) \u2192 7 \u2705 DECORATORS \ud83d\udccc Dekorator \u2014 bu boshqa funksiyani o\u2018rab, unga qo\u2018shimcha imkoniyatlar qo\u2018shadigan higher-order funksiyadir. Asosiy funksiyani o\u2018zgartirmasdan unga funksional qo\u2018shish uchun ishlatiladi. def uppercase_decorator(func): # Ichki funksiyani yaratamiz def wrapper(): result = func() # Asosiy funksiyani chaqiramiz return result.upper() # Natijani katta harflarga o\u2018zgartiramiz return wrapper # wrapper funksiyasini qaytaramiz @uppercase_decorator def greet(): return \"hello\" print(greet()) # \"HELLO\" \ud83c\udfaf APIda foydalanuvchini tekshirish (auth) uchun dekorator # login_required \u2014 bu dekorator funksiyasi bo\u2018lib, boshqa funksiyani argument sifatida qabul qiladi def login_required(func): # Ichki wrapper funksiyasi \u2014 bu o\u2018ralgan yangi funksiya def wrapper(): # Qo\u2018shimcha amal: foydalanuvchining login holatini tekshirish imitatsiyasi print(\"\ud83d\udd10 Foydalanuvchi login bo\u2018lganligini tekshiryapmiz...\") # Asl funksiyani chaqiramiz (masalan: view_dashboard) return func() # wrapper funksiyasini qaytaramiz \u2014 ya\u2019ni dekoratsiya qilingan yangi funksiya return wrapper # Bu yerda view_dashboard funksiyasi login_required dekoratori bilan \"bezanmoqda\" # Ya'ni, view_dashboard = login_required(view_dashboard) @login_required def view_dashboard(): # Asl funksiyadagi ish: dashboard ochilishini bildiradi print(\"\ud83d\udcca Dashboard ochildi.\") # Endi bu chaqirilganda avval dekorator ishlaydi, keyin as \u2705 AMALIYOT \u2705 1-topshiriq: hello() nomli funksiya yozing, u chaqirilganda \"Assalomu alaykum!\" matnini chiqarsin. \u2705 2-topshiriq: to_square(x) funksiyasini yozing, u argument sifatida berilgan sonning kvadratini qaytarsin. \u2705 3-topshiriq: multiply(a, b) funksiyasini tuzing, u berilgan ikki sonning ko\u2018paytmasini qaytarsin. \u2705 4-topshiriq: say_hello(name) funksiyasiga ism argumenti berilganda, \"Salom, {ism}!\" ko\u2018rinishida xabar chiqaring. \u2705 5-topshiriq: power(base, exponent=2) funksiyasi uchun, exponent argumenti berilmasa, sonni kvadratga ko\u2018tarsin. \u2705 6-topshiriq: show_list(items) funksiyasiga ro\u2018yxat berilganda, har bir elementni yangi qatordan chiqarsin. \u2705 7-topshiriq: print_line() funksiyasi har chaqirilganda 40 ta \"-\" belgisi chiqarib bersin. \u2705 8-topshiriq: get_max(a, b) funksiyasi ikki sonning kattasini qaytarsin. \u2705 9-topshiriq: sum_all(*numbers) funksiyasi har qancha son qabul qilib, ularning yig\u2018indisini qaytarsin. \u2705 10-topshiriq: user_info(**kwargs) funksiyasi kalit-qiymat juftliklarini qabul qilib, har birini alohida qatordan ko\u2018rsatsin. \u2705 11-topshiriq: ages = [19, 21, 17, 25] ro\u2018yxatini lambda funksiyasi yordamida o\u2018sish tartibida sort qiling. \u2705 12-topshiriq: outer() nomli funksiya yarating, uning ichida inner() funksiyasi bo\u2018lsin va outer() chaqirilganda natija qaytarsin. \u2705 13-topshiriq: factorial(n) funksiyasini yozing, u n faktorialni hisoblab qaytarsin. \u2705 14-topshiriq: add_numbers(a: int, b: int) -> int funksiyasi yarating, natijasini chop eting. \u2705 15-topshiriq: subtract(a, b) funksiyasini yozing va unga tushuntiruvchi docstring yozing. Docstringni funksiyaning __doc__ atributi orqali chop eting.","title":"Functions"},{"location":"python/functions/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/functions/#11-dars-functions","text":"\ud83d\udccc Python dasturlash tilida funksiya bu \u2014 kodni bir joyda yozib, ko\u2018p joylarda chaqirish, kodni tartibli va qisqa qilish uchun qulay vositadir. Funksiya yordamida kodni modullashtirish va takrorlanadigan qismni soddalashtirish mumkin.","title":"\ud83e\udde9 11-DARS FUNCTIONS"},{"location":"python/functions/#funksiya-yaratish-def","text":"def greet(): # Oddiy funksiya: salomlashish print(\"Hello, world!\")","title":"\u2705 FUNKSIYA YARATISH (DEF)"},{"location":"python/functions/#calling-a-function-funksiyani-chaqirish","text":"\ud83d\udccc Pythonda yozilgan funksiyani ishlatish uchun uni chaqirish kerak bo\u2018ladi. Buning uchun faqat funksiyaning nomi va qavslar () yoziladi. # Bu yerda biz greet() degan nomli funksiya yaratdik def greet(): # Funksiya ichida \"Hello, world!\" degan matnni chiqaradigan buyruq bor print(\"Hello, world!\") # Bu yerda esa yuqorida yaratilgan greet() funksiyasini chaqiryapmiz greet()","title":"\u2705 CALLING A FUNCTION (FUNKSIYANI CHAQIRISH)"},{"location":"python/functions/#parameters-and-arguments-parametrlar-va-argumentlar","text":"\ud83d\udccc Parametr \u2013 bu funksiya yaratilyotganda yoziladigan o\u2018zgaruvchilar bo\u2018lib, ular funksiyaga ma\u2019lumot qabul qilish uchun ishlatiladi. # Funksiya yaratilyapti, u 2 ta parametr oladi: a va b def add(a, b): # a va b sonlar qo\u2018shilib, natija qaytariladi return a + b # Funksiyani chaqiryapmiz, 2 va 3 argument sifatida uzatilyapti result = add(2, 3) # Natijani chiqaramiz print(result) # Natija: 5 \ud83c\udfaf Tasavvur qilaylik, siz foydalanuvchi ma\u2019lumotlarini qabul qilib, uni ro\u2018yxatga qo\u2018shishingiz kerak. # Bo\u2018sh foydalanuvchilar ro\u2018yxati users = [] # Funksiya foydalanuvchi ma\u2019lumotlarini qabul qiladi def add_user(name, age): # name va age \u2013 bu parametrlar user = { \"name\": name, \"age\": age } users.append(user) # user ma\u2019lumoti ro\u2018yxatga qo\u2018shiladi # Funksiyani chaqiramiz, foydalanuvchi ma\u2019lumotlarini argument sifatida beramiz add_user(\"Ali\", 25) add_user(\"Laylo\", 22) # Natijada users ro\u2018yxatida 2 ta foydalanuvchi bo\u2018ladi print(users) \ud83d\udccc Argument \u2013 bu funksiyani chaqirayotganingizda beriladigan real qiymat . Parametrga haqiqiy qiymat uzatish uchun ishlatiladi. # Funksiya yaratildi. Parametr: ism def salom_ber(ism): print(f\"Salom, {ism}!\") # Funksiyani chaqirdik, argument sifatida \"Umid\" uzatildi salom_ber(\"Umid\") \ud83c\udfaf Sizda email jo\u2018natuvchi tizim bor va siz to , subject , body argumentlarini berib, email jo\u2018natasiz. # Email jo\u2018natish funksiyasi def send_email(to, subject, body): print(f\"To: {to}\") print(f\"Subject: {subject}\") print(f\"Body: {body}\") print(\"Email muvaffaqiyatli yuborildi!\") # Real loyiha \u2013 argumentlar bilan chaqirilmoqda send_email( to=\"user@example.com\", # Argument: kimga yuboriladi subject=\"Xush kelibsiz!\", # Argument: sarlavha body=\"Siz muvaffaqiyatli ro\u2018yxatdan o\u2018tdingiz.\" # Argument: matn )","title":"\u2705 PARAMETERS AND ARGUMENTS (PARAMETRLAR VA ARGUMENTLAR)"},{"location":"python/functions/#default-parameters-standart-parametrlar","text":"\ud83d\udccc Standart parametr \u2014 bu funksiyada oldindan belgilangan qiymatga ega bo\u2018lgan parametr. Agar funksiyani chaqirishda bu parametr uchun argument berilmasa, u default qiymatni ishlatadi. # Funksiya yaratildi, exponent parametri uchun default qiymat 2 def power(base, exponent=2): # base son exponent darajaga ko\u2018tariladi return base ** exponent # Faqat bitta argument berdik \u2013 base = 3, exponent 2 deb olinadi (default) print(power(3)) # Natija: 9 (3^2) # Ikkala argumentni ham berdik \u2013 base = 3, exponent = 3 print(power(3, 3)) # Natija: 27 (3^3) \ud83c\udfaf Sizda parol yaratish funksiyasi bor. Unga uzunlik (length) parametri beriladi, lekin foydalanuvchi kiritmasa, standart qiymat sifatida 8 belgilanadi. import random import string # Parol yaratish funksiyasi: uzunlik uchun standart qiymat 8 def generate_password(length=8): belgilar = string.ascii_letters + string.digits parol = ''.join(random.choice(belgilar) for _ in range(length)) return parol # Default uzunlik bilan chaqirish print(generate_password()) # Masalan: a7B3kL2q # Uzunlikni o\u2018zimiz beramiz print(generate_password(12)) # Masalan: jD93kLm8Tz2Q","title":"\u2705 DEFAULT PARAMETERS (STANDART PARAMETRLAR)"},{"location":"python/functions/#return-qiymat-qaytarish","text":"\ud83d\udccc return \u2014 bu funksiya natijasini (qiymatini) tashqariga qaytarish uchun ishlatiladi. Bu qiymatni keyin saqlash, chiqarish yoki boshqa hisob-kitoblarda ishlatish mumkin. # Funksiya: x va y ni ko\u2018paytiradi def multiply(x, y): return x * y # Natija return orqali qaytariladi # multiply(4, 5) = 20, bu qiymat product o\u2018zgaruvchisiga saqlanadi product = multiply(4, 5) # Natijani ekranga chiqaramiz print(product) # 20 \ud83c\udfaf Siz onlayn do\u2018konda mahsulotga 15% QQS solig\u2018i qo\u2018shilgan yakuniy narxni hisoblashni xohlaysiz. # Funksiya: mahsulot narxiga 15% soliq qo\u2018shadi def hisobla_qqs(narx): qqs = narx * 0.15 umumiy = narx + qqs return umumiy # Yakuniy narx qaytariladi # 100 000 so\u2018mlik mahsulot uchun yakuniy narx yakuniy_narx = hisobla_qqs(100000) print(f\"Yakuniy narx (QQS bilan): {yakuniy_narx} so'm\")","title":"\u2705 RETURN (QIYMAT QAYTARISH)"},{"location":"python/functions/#void-function-hech-nima-qaytarmaydigan-funksiyalar","text":"\ud83d\udccc Void function \u2013 bu funksiya natija (qiymat) qaytarmaydi, faqat biror amalni bajaradi, masalan: ekranga chiqarish, faylga yozish, yoki ma\u2019lumot bazasiga yozish. # Funksiya: foydalanuvchini kutib oladi def print_welcome(name): print(f\"Welcome, {name}!\") # Faqat chop etadi, hech nima qaytarmaydi # Funksiyani chaqiramiz print_welcome(\"Ali\") \ud83c\udfaf Sizda har bir foydalanuvchi tizimga kirganda logga yozib boradigan funksiya kerak. Bu funksiya hech narsa qaytarmaydi \u2014 faqat faylga yozadi. # Foydalanuvchini log fayliga yozish funksiyasi def log_user_login(username): with open(\"log.txt\", \"a\") as fayl: fayl.write(f\"{username} tizimga kirdi.\\n\") # Funksiyani chaqirish log_user_login(\"Ali\") log_user_login(\"Laylo\")","title":"\u2705 VOID FUNCTION (HECH NIMA QAYTARMAYDIGAN FUNKSIYALAR)"},{"location":"python/functions/#value-returning-function-qiymat-qaytaradigan-funksiyalar","text":"\ud83d\udccc Qiymat qaytaradigan funksiya \u2014 bu funksiya return operatori yordamida natijani (qiymatni) qaytaradi. # Funksiya: ikki sonning kattasini aniqlaydi def get_maximum(a, b): if a > b: return a # Agar a katta bo\u2018lsa, a ni qaytar else: return b # Aks holda b ni qaytar # Funksiyani chaqiramiz, 7 va 10 ni argument sifatida uzatamiz max_number = get_maximum(7, 10) # Natijani chiqaramiz print(max_number) # 10 \ud83c\udfaf Siz onlayn do\u2018kon qilayapsiz va sizga mahsulotlar ichidan eng qimmatini topuvchi funksiya kerak. # Funksiya: 2 ta mahsulot narxidan eng kattasini qaytaradi def get_expensive(price1, price2): if price1 > price2: return price1 else: return price2 # Misol uchun 2 ta mahsulot narxi narx1 = 850_000 narx2 = 990_000 # Funksiyani chaqiramiz va natijani saqlaymiz eng_qimmat = get_expensive(narx1, narx2) print(f\"Eng qimmat mahsulot narxi: {eng_qimmat} so'm\")","title":"\u2705 VALUE-RETURNING FUNCTION (QIYMAT QAYTARADIGAN FUNKSIYALAR)"},{"location":"python/functions/#funksiyaga-royxat-list-uzatish","text":"\ud83d\udccc Pythonda funksiya yaratganda parametr sifatida ro\u2018yxat (list) berishimiz mumkin. Bu funksiyaga bir nechta qiymatni birdan uzatish imkonini beradi. # Funksiya: ro\u2018yxatdagi elementlarni ekranga chiqaradi def print_list(items): # Har bir element ustida aylanish (for loop) for item in items: print(item) # Ro\u2018yxat yaratamiz fruits = [\"apple\", \"banana\", \"cherry\"] # Funksiyaga ro\u2018yxatni argument sifatida uzatamiz print_list(fruits) \ud83c\udfaf Sizda Telegram bot bor va siz bir nechta foydalanuvchilarga avtomatik xabar yubormoqchisiz. Har bir foydalanuvchining ismi ro\u2018yxatda berilgan. # Funksiya: har bir foydalanuvchiga xush kelibsiz xabari yuboradi def send_welcome(users): for user in users: print(f\"Assalomu alaykum, {user}!\") # Foydalanuvchilar ro\u2018yxati user_list = [\"Ali\", \"Laylo\", \"Javohir\"] # Funksiyani chaqiramiz send_welcome(user_list)","title":"\u2705 FUNKSIYAGA RO\u2018YXAT (LIST) UZATISH"},{"location":"python/functions/#args","text":"\ud83d\udccc *args \u2013 bu funksiya istalgancha sonli argument qabul qilishi uchun ishlatiladi. U * belgisi bilan yoziladi, va Python uni tuple sifatida saqlaydi. # Funksiya: istalgancha son qabul qilib, ularning yig\u2018indisini qaytaradi def total_sum(*args): # args bu tuple ko\u2018rinishidagi o\u2018zgaruvchi return sum(args) # Funksiyaga 5 ta son uzatdik print(total_sum(1, 2, 3, 4, 5)) # Natija: 15 \ud83c\udfaf Sizda savatdagi mahsulotlar narxini avtomatik hisoblaydigan funksiya bor. # Funksiya: mahsulot narxlarini qabul qilib, umumiy summani hisoblaydi def hisobla_savat(*narxlar): umumiy = sum(narxlar) return umumiy # Mahsulotlar: non 8000, sut 12000, guruch 25000, choy 15000 print(hisobla_savat(8000, 12000, 25000, 15000)) # Natija: 60000","title":"\u2705 *ARGS"},{"location":"python/functions/#kwargs","text":"\ud83d\udccc kwargs \u2014 bu funksiyaga kalit-qiymat juftliklari ko\u2018rinishida istalgancha argument yuborish imkonini beradi. U lug\u2018at (dictionary) sifatida qabul qilinadi: key: value # Funksiya: foydalanuvchi profilidagi har bir kalit-qiymatni chiqaradi def print_profile(**kwargs): # kwargs \u2014 dictionary, .items() bilan kalit-qiymatlarni ajratamiz for key, value in kwargs.items(): print(f\"{key}: {value}\") # Funksiyani chaqiramiz, kalit-qiymat juftliklari bilan print_profile(name=\"Bob\", age=30, profession=\"Engineer\") \ud83c\udfaf Sizda foydalanuvchini ma\u2019lumotlar bazasiga yozish funksiyasi bor. Har bir foydalanuvchi har xil ma\u2019lumot yuborishi mumkin: faqat ism , yoki ism + yoshi , yoki hammasi. def save_user(**info): print(\"Yangi foydalanuvchi ma'lumotlari:\") for key, value in info.items(): print(f\"{key}: {value}\") print(\"\u2705 Saqlandi\\n\") # Turli foydalanuvchilar turlicha ma'lumot yuboradi save_user(name=\"Ali\", age=25) save_user(name=\"Laylo\", phone=\"998901234567\", email=\"laylo@mail.com\")","title":"\u2705 **KWARGS"},{"location":"python/functions/#lambda-funksiyalar","text":"\ud83d\udccc lambda \u2014 bu bir qatorli va tez yoziladigan funksiyalardir. Odatdagi def funksiyalarga o\u2018xshaydi, lekin juda sodda va qisqa ko\u2018rinishda yoziladi. Lambda funksiyalar odatda bir martalik, oddiy amallar uchun ishlatiladi (masalan: hisoblash, filtrlash, saralash). # 1. Sonni kvadratga ko\u2018tarish (x ** 2) square = lambda x: x ** 2 print(square(6)) # 36 # 2. Ikkita sonni qo\u2018shish (x + y) add = lambda x, y: x + y print(add(3, 4)) # 7 \ud83c\udfaf Sizda bir nechta foydalanuvchi bor, ularni yosh bo\u2018yicha tartiblash kerak. Bunda lambda funksiyadan foydalanish mumkin. # Foydalanuvchilar (lug\u2018atlar ro\u2018yxati) users = [ {\"name\": \"Ali\", \"age\": 25}, {\"name\": \"Laylo\", \"age\": 20}, {\"name\": \"Javohir\", \"age\": 30}, ] # Yosh bo\u2018yicha tartiblash (lambda yordamida) sorted_users = sorted(users, key=lambda user: user[\"age\"]) # Natijani chiqaramiz for user in sorted_users: print(f\"{user['name']} - {user['age']} yosh\")","title":"\u2705 LAMBDA FUNKSIYALAR"},{"location":"python/functions/#nested-functions","text":"\ud83d\udccc Nested function \u2014 bu bir funksiyaning ichida boshqa funksiya yaratish demakdir. Ichki funksiya (inner) faqat tashqi funksiya (outer) ichida mavjud bo\u2018ladi va tashqaridan chaqirib bo\u2018lmaydi. Bu usul kodni modullashtirish, xavfsizroq saqlash va faqat kerakli joyda ishlatish uchun qulay. def outer(x): # Tashqi funksiya def inner(y): # Ichki funksiya return y + 2 # Ichki funksiya 2 ni qo\u2018shadi return inner(x) * 2 # Inner natijasi 2 ga ko\u2018paytiriladi result = outer(5) # (5 + 2) * 2 = 14 print(result) # 14 \ud83c\udfaf Siz foydalanuvchiga xush kelibsiz xabarini turli tillarda chiqarishni xohlaysiz. def greeting(language): def get_message(name): if language == \"uz\": return f\"Salom, {name}!\" elif language == \"en\": return f\"Hello, {name}!\" elif language == \"ru\": return f\"\u041f\u0440\u0438\u0432\u0435\u0442, {name}!\" else: return f\"Hi, {name}!\" return get_message # Ichki funksiyani qaytaramiz # O\u2018zbekcha salomlashuv funksiyasi salomlash_uz = greeting(\"uz\") print(salomlash_uz(\"Umid\")) # Salom, Umid! # Inglizcha salomlashuv funksiyasi salomlash_en = greeting(\"en\") print(salomlash_en(\"Umid\")) # Hello, Umid!","title":"\u2705 NESTED FUNCTIONS"},{"location":"python/functions/#recursive-functions","text":"\ud83d\udccc Rekursiv funksiya \u2014 bu o\u2018zini o\u2018zi ichida chaqiradigan funksiya. Bu usul, odatda takroriy (recursive) muammolarni hal qilish uchun ishlatiladi \u2014 masalan: faktorial, Fibonachchi, fayl strukturalari, daraxt ko\u2018rinishidagi ma\u2019lumotlar va hokazo. def factorial(n): # Bazaviy holat: n 0 bo\u2018lsa, 1 ni qaytar if n == 0: return 1 # Rekursiv chaqirish: n * factorial(n - 1) return n * factorial(n - 1) print(factorial(5)) # 120 \ud83c\udfaf Kompyuterdagi papkalar ichida yana papkalar bo\u2018lishi mumkin. Har bir darajadagi fayllarni hisoblash uchun rekursiya ishlatiladi (o\u2018rnatilgan os moduli orqali). import os def count_files(folder_path): total = 0 for item in os.listdir(folder_path): full_path = os.path.join(folder_path, item) if os.path.isdir(full_path): total += count_files(full_path) # Ichki papkani tekshirish else: total += 1 # Fayl topildi return total # Misol uchun: \"/home/umid/hujjatlar\" print(count_files(\"/home/umid/hujjatlar\"))","title":"\u2705 RECURSIVE FUNCTIONS"},{"location":"python/functions/#type-annotation-turini-korsatish","text":"\ud83d\udccc Type annotation \u2014 bu o\u2018zgaruvchilar, parametrlar va return (natija) uchun ma\u2019lumot turini ko\u2018rsatish usulidir. Bu yordamida kod ancha tushunarli bo\u2018ladi, xatolarni aniqlash osonlashadi, IDE (VS Code, PyCharm) avtomatik tekshirish qiladi. def add_numbers(a: int, b: int) -> int: # a va b butun sonlar sifatida olinadi, natija ham int bo\u2018ladi return a + b result: int = add_numbers(10, 20) print(result) # 30 \ud83c\udfaf Siz API orqali yangi foydalanuvchi yaratadigan funksiya yozmoqchisiz. Ushbu foydalanuvchining ismi, yoshi va faollik holati (True yoki False) bo\u2018lishi kerak. def create_user(name: str, age: int, active: bool) -> dict: return { \"name\": name, \"age\": age, \"active\": active } user_info: dict = create_user(\"Umid\", 25, True) print(user_info)","title":"\u2705 TYPE ANNOTATION \u2013 TURINI KO\u2018RSATISH"},{"location":"python/functions/#docstring","text":"\ud83d\udccc Docstring (documentation string) \u2014 bu funksiya, klass yoki modul nima qilishini tavsiflab beruvchi matn. U funksiyaning birinchi qatorida uchta qo\u2018shtirnoq (\"\"\") bilan yoziladi. Maqsad: Funksiya qanday ishlaydi, qanday parametrlar oladi, va nima qaytaradi \u2014 bularni tushuntirish. def multiply(a: int, b: int) -> int: \"\"\" Ikki sonni ko'paytiradi va natijani qaytaradi. :param a: birinchi son :param b: ikkinchi son :return: natija (int) \"\"\" return a * b print(multiply.__doc__)","title":"\u2705 DOCSTRING"},{"location":"python/functions/#higher-order-funksiyalar","text":"\ud83d\udccc Higher-order function \u2014 bu boshqa funksiyani argument sifatida qabul qiladigan yoki funksiya sifatida natijada qaytaradigan funksiyadir. Pythonda funksiyalar ham \"obyekt\" bo\u2018lgani uchun, ularni o\u2018zgaruvchiga berish, funksiyaga uzatish, yoki qaytarish mumkin. # apply_twice funksiyasi boshqa funksiya (func) va qiymat (value) oladi def apply_twice(func, value): # func(value) chaqiriladi \u2192 natijasi yana func ga beriladi return func(func(value)) # increment funksiyasi bitta sonni 1 ga oshiradi def increment(x): return x + 1 # apply_twice funksiyasiga increment funksiyasi va 5 soni uzatilmoqda result = apply_twice(increment, 5) print(result) # 7 chiqadi, chunki: increment(increment(5)) \u2192 increment(6) \u2192 7","title":"\u2705 HIGHER-ORDER FUNKSIYALAR"},{"location":"python/functions/#decorators","text":"\ud83d\udccc Dekorator \u2014 bu boshqa funksiyani o\u2018rab, unga qo\u2018shimcha imkoniyatlar qo\u2018shadigan higher-order funksiyadir. Asosiy funksiyani o\u2018zgartirmasdan unga funksional qo\u2018shish uchun ishlatiladi. def uppercase_decorator(func): # Ichki funksiyani yaratamiz def wrapper(): result = func() # Asosiy funksiyani chaqiramiz return result.upper() # Natijani katta harflarga o\u2018zgartiramiz return wrapper # wrapper funksiyasini qaytaramiz @uppercase_decorator def greet(): return \"hello\" print(greet()) # \"HELLO\" \ud83c\udfaf APIda foydalanuvchini tekshirish (auth) uchun dekorator # login_required \u2014 bu dekorator funksiyasi bo\u2018lib, boshqa funksiyani argument sifatida qabul qiladi def login_required(func): # Ichki wrapper funksiyasi \u2014 bu o\u2018ralgan yangi funksiya def wrapper(): # Qo\u2018shimcha amal: foydalanuvchining login holatini tekshirish imitatsiyasi print(\"\ud83d\udd10 Foydalanuvchi login bo\u2018lganligini tekshiryapmiz...\") # Asl funksiyani chaqiramiz (masalan: view_dashboard) return func() # wrapper funksiyasini qaytaramiz \u2014 ya\u2019ni dekoratsiya qilingan yangi funksiya return wrapper # Bu yerda view_dashboard funksiyasi login_required dekoratori bilan \"bezanmoqda\" # Ya'ni, view_dashboard = login_required(view_dashboard) @login_required def view_dashboard(): # Asl funksiyadagi ish: dashboard ochilishini bildiradi print(\"\ud83d\udcca Dashboard ochildi.\") # Endi bu chaqirilganda avval dekorator ishlaydi, keyin as","title":"\u2705 DECORATORS"},{"location":"python/functions/#amaliyot","text":"","title":"\u2705 AMALIYOT"},{"location":"python/functions/#1-topshiriq","text":"hello() nomli funksiya yozing, u chaqirilganda \"Assalomu alaykum!\" matnini chiqarsin.","title":"\u2705 1-topshiriq:"},{"location":"python/functions/#2-topshiriq","text":"to_square(x) funksiyasini yozing, u argument sifatida berilgan sonning kvadratini qaytarsin.","title":"\u2705 2-topshiriq:"},{"location":"python/functions/#3-topshiriq","text":"multiply(a, b) funksiyasini tuzing, u berilgan ikki sonning ko\u2018paytmasini qaytarsin.","title":"\u2705 3-topshiriq:"},{"location":"python/functions/#4-topshiriq","text":"say_hello(name) funksiyasiga ism argumenti berilganda, \"Salom, {ism}!\" ko\u2018rinishida xabar chiqaring.","title":"\u2705 4-topshiriq:"},{"location":"python/functions/#5-topshiriq","text":"power(base, exponent=2) funksiyasi uchun, exponent argumenti berilmasa, sonni kvadratga ko\u2018tarsin.","title":"\u2705 5-topshiriq:"},{"location":"python/functions/#6-topshiriq","text":"show_list(items) funksiyasiga ro\u2018yxat berilganda, har bir elementni yangi qatordan chiqarsin.","title":"\u2705 6-topshiriq:"},{"location":"python/functions/#7-topshiriq","text":"print_line() funksiyasi har chaqirilganda 40 ta \"-\" belgisi chiqarib bersin.","title":"\u2705 7-topshiriq:"},{"location":"python/functions/#8-topshiriq","text":"get_max(a, b) funksiyasi ikki sonning kattasini qaytarsin.","title":"\u2705 8-topshiriq:"},{"location":"python/functions/#9-topshiriq","text":"sum_all(*numbers) funksiyasi har qancha son qabul qilib, ularning yig\u2018indisini qaytarsin.","title":"\u2705 9-topshiriq:"},{"location":"python/functions/#10-topshiriq","text":"user_info(**kwargs) funksiyasi kalit-qiymat juftliklarini qabul qilib, har birini alohida qatordan ko\u2018rsatsin.","title":"\u2705 10-topshiriq:"},{"location":"python/functions/#11-topshiriq","text":"ages = [19, 21, 17, 25] ro\u2018yxatini lambda funksiyasi yordamida o\u2018sish tartibida sort qiling.","title":"\u2705 11-topshiriq:"},{"location":"python/functions/#12-topshiriq","text":"outer() nomli funksiya yarating, uning ichida inner() funksiyasi bo\u2018lsin va outer() chaqirilganda natija qaytarsin.","title":"\u2705 12-topshiriq:"},{"location":"python/functions/#13-topshiriq","text":"factorial(n) funksiyasini yozing, u n faktorialni hisoblab qaytarsin.","title":"\u2705 13-topshiriq:"},{"location":"python/functions/#14-topshiriq","text":"add_numbers(a: int, b: int) -> int funksiyasi yarating, natijasini chop eting.","title":"\u2705 14-topshiriq:"},{"location":"python/functions/#15-topshiriq","text":"subtract(a, b) funksiyasini yozing va unga tushuntiruvchi docstring yozing. Docstringni funksiyaning __doc__ atributi orqali chop eting.","title":"\u2705 15-topshiriq:"},{"location":"python/lists/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 4-DARS LISTS \u2705 PYTHONDA LISTSLAR BILAN ISHLASH \ud83d\udccc LIST \u2014 bu bir nechta ma'lumotlarni bitta o\u2018zgaruvchida navbatma-navbat saqlash uchun ishlatiladigan ma'lumot turi. \u2705 LISTNING ASOSIY XUSUSIYATLARI \u2733\ufe0f Bir nechta qiymatni bitta joyda saqlaydi \u2733\ufe0f Har bir qiymatning tartib raqami (index) bo\u2018ladi (0 dan boshlanadi) \u2733\ufe0f Istalgan turdagi ma\u2019lumotlar (son, matn, True/False) saqlanishi mumkin \u2733\ufe0f O\u2018zgartirish mumkin (ya'ni listdagi ma\u2019lumotlarni qo\u2018shish, o\u2018chirish, almashtirish mumkin) \u2705 QACHON ISHLATILADI? \u2733\ufe0f Ko\u2018p sonli ma\u2019lumotlarni tartib bilan saqlash kerak bo\u2018lsa \u2733\ufe0f Ma\u2019lumotlar ustida takrorlash, filtrlash, yoki saralash kerak bo\u2018lsa \u2733\ufe0f Bir nechta qiymatni bitta o\u2018zgaruvchida saqlash orqali kodni soddalashtirish kerak bo\u2018lsa \u2705 LIST YARATISH # Bir nechta elementli list my_list = [10, \"DeepCode\", True, 3.14] # Bo\u2018sh list empty_list = [] \u2705 LIST ELEMENTLARIGA MUROJAT QILISH \u2733\ufe0f INDEX ORQALI MUROJAT QILISH \ud83d\udccc Listdagi har bir element o\u2018zining indeks raqami bilan tartiblanadi. Pythonda indekslash 0 dan boshlanadi. # Mevalar ro'yxatini yaratamiz fruits = ['olma', 'banan', 'gilos', 'shaftoli'] # Ro'yxatdagi birinchi elementni (0-indeks) ekranga chiqaramiz print(fruits[0]) # 'olma' # Ro'yxatdagi uchinchi elementni (2-indeks) ekranga chiqaramiz print(fruits[2]) # 'gilos' \u2733\ufe0f NEGATIVE INDEXING \ud83d\udccc Pythonda oxirgi elementga manfiy indekslar yordamida murojaat qilinadi. # Mevalar ro'yxatini yaratamiz fruits = ['olma', 'banan', 'gilos', 'shaftoli'] # Ro'yxatdagi oxirgi elementni (manfiy indeks -1) ekranga chiqaramiz print(fruits[-1]) # 'shaftoli' # Ro'yxatdagi oxiridan ikkinchi elementni (manfiy indeks -2) ekranga chiqaramiz print(fruits[-2]) # 'gilos' \u2733\ufe0f SLICING \ud83d\udccc Listning ma\u2019lum qismini olish uchun slicing ishlatiladi: list[start:stop] # Mevalar ro'yxatini yaratamiz fruits = ['olma', 'banan', 'gilos', 'shaftoli'] # Indeks 1 dan boshlab 3 gacha bo'lgan elementlarni olish (3-indeks kirmaydi) print(fruits[1:3]) # ['banan', 'gilos'] # Boshlanishi avtomatik 0 deb olinadi, 0 dan 2 gacha bo'lgan elementlar (2-indeks kirmaydi) print(fruits[:2]) # ['olma', 'banan'] # Indeks 2 dan boshlab oxirigacha bo'lgan elementlarni olish print(fruits[2:]) # ['gilos', 'shaftoli'] \u2733\ufe0f SLICING WITH STEP # Mevalar ro'yxatini yaratamiz fruits = ['olma', 'banan', 'gilos', 'shaftoli'] # Har 2-elementdan birini olamiz: 0, 2-indeksdagilar (ya'ni 1-element, 3-element) print(fruits[::2]) # ['olma', 'gilos'] # Ro'yxatni teskari tartibda chiqaramiz print(fruits[::-1]) # ['shaftoli', 'gilos', 'banan', 'olma'] \u2705 LISTDAGI E'LEMENTLAR SONINI TOPISH \ud83d\udcccList uzunligi degani \u2014 list ichida nechta element (ya'ni qiymat) borligini bildiradi. Pythonda bu uzunlikni len() funksiyasi yordamida topamiz. # Bu yerda bizda 5 ta kompaniya bor companies = ['Google', 'Microsoft', 'Amazon', 'Tesla', 'Apple'] # len(companies) \u2014 bu companies listida nechta element borligini hisoblaydi print(len(companies)) \u2705 LISTGA E'LEMENT QO'SHISH \u2733\ufe0f .append(x) \ud83d\udccc list oxiriga bitta element qo\u2018shadi. # Dastlab avtomobillar ro'yxatini yaratamiz cars = ['Nexia', 'Cobalt'] # Ro'yxat oxiriga yangi element 'Malibu' ni qo\u2018shamiz cars.append('Malibu') # Yangilangan ro'yxatni ekranga chiqaramiz print(cars) # ['Nexia', 'Cobalt', 'Malibu'] \ud83d\udccc .append() faqat bitta element qo\u2018shadi. Agar bir nechta element qo\u2018shmoqchi bo\u2018lsangiz, ularni list ko\u2018rinishida beriladi va list ichiga yana bir list qo\u2018shiladi: # Dastlab 3 ta sondan iborat ro'yxat yaratamiz my_list = [1, 2, 3] # Ro'yxat oxiriga [4, 5] ro'yxatini bitta element sifatida qo\u2018shamiz (ichki ro'yxat bo'ladi) my_list.append([4, 5]) # Natijaviy ro'yxatni ekranga chiqaramiz print(my_list) # [1, 2, 3, [4, 5]] \u2733\ufe0f .extend() \ud83d\udccc bir nechta elementni alohida-alohida qo\u2018shadi. # Boshlang'ich ro'yxat: 1, 2, 3 sonlari mavjud my_list = [1, 2, 3] # extend() metodi orqali [4, 5] ro'yxatining elementlarini alohida-alohida qo\u2018shamiz my_list.extend([4, 5]) # Natijaviy ro'yxatni chiqaramiz print(\"extend() natijasi:\", my_list) # Bu ro'yxatning elementlarini alohida qo'shadi \u2733\ufe0f .insert(i, x) \ud83d\udccc list ichidagi istalgan joyga bitta element qo\u2018shadi # Dastlab 1, 2, 3 sonlaridan iborat ro'yxat yaratamiz my_list = [1, 2, 3] # 2-pozitsiyaga (ya'ni 3-element o'rniga) 99 sonini qo\u2018shamiz my_list.insert(2, 99) # Natijaviy ro'yxatni ekranga chiqaramiz print(my_list) # [1, 2, 99, 3] \u2733\ufe0f += \ud83d\udccc listga boshqa listni qo\u2018shadi # Boshlang'ich ro'yxat: 1, 2, 3 my_list = [1, 2, 3] # += operatori yordamida [4, 5] ro'yxatini my_list ga kengaytiramiz (xuddi extend() kabi ishlaydi) my_list += [4, 5] # Natijaviy ro'yxatni chiqaramiz print(my_list) # [1, 2, 3, 4, 5] \u2705 E'LEMENTLARNI O'CHIRISH \u2733\ufe0f .remove(x) \ud83d\udccc list ichida siz ko\u2018rsatgan qiymatga teng bo\u2018lgan birinchi elementni o\u2018chiradi. # Dastlabki list: bir nechta sonlar mavjud, jumladan ikki marta 3 soni my_list = [1, 2, 3, 4, 3, 5] # remove() metodi listdan **birinchi uchragan** 3 ni o'chiradi my_list.remove(3) # Yangilangan listni ekranga chiqaramiz print(my_list) # [1, 2, 4, 3, 5] \u2733\ufe0f .pop() \ud83d\udccc Agar .pop() funksiyasiga hech narsa bermasangiz, oxirgi elementni o\u2018chiradi. # Dastlabki ro'yxatni yaratamiz my_list = [10, 20, 30, 40, 50] # pop() metodi ro'yxatning oxirgi elementini (50) o'chirib tashlaydi my_list.pop() # Yangilangan ro'yxatni ekranga chiqaramiz print(my_list) # [10, 20, 30, 40] \u2733\ufe0f .pop(i) \ud83d\udccc Aniq indexdagi elementni o\u2018chiradi # Boshlang'ich ro'yxat: 10, 20, 30, 40 my_list = [10, 20, 30, 40] # pop(1) metodi ro'yxatdagi 1-indeksdagi elementni (ya'ni 20 ni) o'chiradi my_list.pop(1) # Yangilangan ro'yxatni ekranga chiqaramiz print(my_list) # [10, 30, 40] \u2733\ufe0f del \ud83d\udccc Istalgan element yoki butun listni o\u2018chiradi # Boshlang'ich ro'yxat: 4 ta harf mavjud my_list = ['a', 'b', 'c', 'd'] # del operatori yordamida ro'yxatdagi 2-indeksdagi element ('c') ni o\u2018chiramiz del my_list[2] # Ro'yxat yangilanadi: endi ['a', 'b', 'd'] bo'ladi print(\"1-element o\u2018chirilgan ro\u2018yhat:\", my_list) # ['a', 'b', 'd'] # Ro'yxatni qaytadan yaratamiz my_list = ['a', 'b', 'c', 'd'] # del operatori yordamida butun ro'yxatni (ya'ni my_list o'zgaruvchisini) o\u2018chiramiz del my_list # Bu yerda my_list endi mavjud emas, agar pastda print(my_list) desangiz \u2014 xatolik (NameError) chiqadi # print(my_list) # \u274c NameError: name 'my_list' is not defined \u2705 LISTNI TOZALASH \ud83d\udccc Agar list ichidagi hamma elementlarni o\u2018chirib, uni bo\u2018sh holatga keltirmoqchi bo\u2018lsangiz, .clear() metodidan foydalaniladi. # Boshlang'ich ro'yxat: 1 dan 5 gacha sonlar mavjud my_list = [1, 2, 3, 4, 5] # clear() metodi ro'yxatdagi barcha elementlarni o\u2018chiradi (lekin ro'yxatning o\u2018zi qoladi, bo\u2018sh holatda) my_list.clear() # Bo\u2018sh ro'yxatni ekranga chiqaramiz print(my_list) # [] \u2705 LISTNI SARALASH \ud83d\udccc Python dasturlash tilida listdagi elementlarni tartiblash uchun ikkita asosiy vosita mavjud: .sort() metodi va sorted() funksiyasi. Ularning ikkalasi ham listni tartiblash uchun ishlatiladi, lekin ular orasida muhim farqlar bor. Tartiblashda raqamlar o'sib borish tartibida, matnlar esa alifbo tartibida tartiblanadi. \u2733\ufe0f .sort() \ud83d\udccc .sort() \u2014 bu listning o\u2018ziga tegishli metod bo\u2018lib, u faqat listlar bilan ishlaydi. Agar siz .sort() metodini ishlatsangiz, u listning o\u2018zini tartiblaydi, ya\u2019ni listdagi e'lementlar joyida o\u2018zgaradi. Boshqacha aytganda, bu metod listni o\u2018zgartiradi va tartiblangan yangi list yaratmaydi. Misol uchun, sizda bir list bo\u2018lsa va .sort() desangiz, o\u2018sha list tartiblanadi va avvalgi tartibi yo\u2018qoladi. Shuning uchun, agar sizga asl list kerak bo\u2018lsa, .sort() ni ishlatishdan oldin ehtiyot bo\u2018lish kerak, chunki u listni butunlay o\u2018zgartirib yuboradi. Bu metod hech qanday natija qaytarmaydi, ya\u2019ni None degan qiymatni qaytaradi. # Boshlang'ich ro'yxat: aralash tartibda sonlar mavjud my_list = [3, 1, 4, 1, 5, 9, 2] # sort() metodi ro'yxatni o'sish tartibida (kichikdan kattaga) saralaydi my_list.sort() # Tartiblangan ro'yxatni ekranga chiqaramiz print(my_list) # [1, 1, 2, 3, 4, 5, 9] \u2733\ufe0f .sorted() \ud83d\udccc sorted() esa funksiyadir. Bu funksiya faqat list emas, balki boshqa turdagi ma\u2019lumotlar bilan ham ishlay oladi \u2014 masalan, string , tuple va boshqa tartiblangan ma\u2019lumot turlari bilan. sorted() funksiyasining eng katta afzalligi \u2014 u mavjud listni o\u2018zgartirmaydi. U asl listga tegmaydi, balki yangi tartiblangan listni qaytaradi. Bu esa sizga asl ma\u2019lumotni saqlab qolgan holda, tartiblangan nusxasi bilan ishlash imkonini beradi. Agar sizga vaqtincha tartiblangan natija kerak bo\u2018lsa yoki original listni o\u2018zgartirmasdan ishlashni xohlasangiz, sorted() funksiyasi aynan sizga mos keladi. # Boshlang'ich ro'yxat: aralash tartibdagi sonlar my_list = [3, 1, 4, 1, 5, 9] # sorted() funksiyasi yangi tartiblangan ro'yxat yaratadi, asl ro'yxat o'zgarmaydi sorted_list = sorted(my_list) # Yangi (saralangan) ro'yxatni chiqaramiz print(\"Yangi ro\u2018yxat:\", sorted_list) # [1, 1, 3, 4, 5, 9] # Asl ro'yxat o'zgarishsiz qolganini ko'rsatamiz print(\"Asl ro\u2018yxat:\", my_list) # [3, 1, 4, 1, 5, 9] \u2705 TESKARI TARTIBDA SARALASH \u2733\ufe0f .sort(reverse=True) # Boshlang'ich list: aralash sonlar mavjud my_list = [3, 1, 4, 1, 5, 9] # sort() metodi orqali listni kamayish tartibida tartiblaymiz my_list.sort(reverse=True) # Tartiblangan listni ekranga chiqaramiz print(my_list) # [9, 5, 4, 3, 1, 1] \u2733\ufe0f sorted(..., reverse=True) # Boshlang'ich list: aralash sonlar mavjud my_list = [3, 1, 4, 1, 5, 9] # sorted() funksiyasi listni kamayish tartibida tartiblaydi va yangi list qaytaradi sorted_list = sorted(my_list, reverse=True) # Teskari tartiblangan yangi listni chiqaramiz print(\"Teskari list:\", sorted_list) # [9, 5, 4, 3, 1, 1] \u2705 QO'SHIMCHA PARAMETR \u2733\ufe0f KEY # Ismlar listi: har xil uzunlikdagi so'zlardan iborat names = ['Ali', 'Muhammad', 'Zafar', 'Islom'] # sort() metodi va key=len parametri yordamida listni so'z uzunligi bo'yicha o'sish tartibida saralaymiz names.sort(key=len) # Saralangan listni chiqaramiz print(names) # ['Ali', 'Zafar', 'Islom', 'Muhammad'] \u2705 LISTNI TESKARIGA O'ZGARTIRISH \u2733\ufe0f .reverse() \ud83d\udccc Ba'zida ro\u2018yxatdagi elementlarni teskari tartibda ko\u2018rsatish kerak bo\u2018ladi \u2014 ya'ni oxirgi element birinchi, birinchi element esa oxirgi bo\u2018ladi. # Boshlang'ich list: 1 dan 5 gacha bo'lgan sonlar my_list = [1, 2, 3, 4, 5] # reverse() metodi list elementlarini teskari tartibda joylashtiradi my_list.reverse() # Teskari tartibga keltirilgan listni ekranga chiqaramiz print(my_list) # [5, 4, 3, 2, 1] \u2705 LISTNI BIRLASHTIRISH \u2733\ufe0f + \ud83d\udccc Bu usulda ikkita listni qo\u2018shib, yangi bitta list hosil qilamiz. # 1-chi list list1 = [1, 2, 3] # 2-chi list list2 = [4, 5, 6] # + operatori yordamida ikkala listni birlashtiramiz merged_list = list1 + list2 # Yangi birlashtirilgan listni chiqaramiz print(merged_list) # [1, 2, 3, 4, 5, 6] \u2733\ufe0f += \ud83d\udccc Bu usulda ikkinchi list elementlari birinchi listga qo\u2018shiladi va birinchi ro\u2018yxat o\u2018zgartiriladi. # 1-chi list list1 = [1, 2, 3] # 2-chi list list2 = [4, 5, 6] # += operatori list2 dagi elementlarni list1 ga alohida-alohida qo\u2018shadi list1 += list2 # Natijaviy list1 ni ekranga chiqaramiz print(list1) # [1, 2, 3, 4, 5, 6] \u2733\ufe0f .extend() # 1-chi list list1 = [1, 2, 3] # 2-chi list list2 = [4, 5, 6] # extend() metodi list2 dagi barcha elementlarni list1 ga alohida-alohida qo\u2018shadi list1.extend(list2) # Natijaviy list1 ni ekranga chiqaramiz print(list1) # [1, 2, 3, 4, 5, 6] \u2705 MULTI DEMENSIONAL LIST \ud83d\udccc Pythonda list ichiga yana boshqa list joylash mumkin. Bu holat multi dimensional list deb ataladi (inglizchasiga o\u2018xshab \"2D list\" ham deyiladi). # Bu multi-dimensional list (ya'ni list of lists) \u2014 har bir element o'z ichida yana bir list saqlaydi multi_dimensional_list = [ [1, 2, 3], # 0-index: birinchi inner list [4, 5, 6], # 1-index: ikkinchi inner list [7, 8, 9] # 2-index: uchinchi inner list ] \u2733\ufe0f E'LEMENTLARGA MUROJAT QILISH Ro'yxat ichidagi ro'yxatdagi elementlarga indekslar yordamida murojaat qilish mumkin. # List of lists (ya'ni list ichidagi list) multi_dimensional_list = [ [1, 2, 3], # 0-index: birinchi inner list [4, 5, 6], # 1-index: ikkinchi inner list [7, 8, 9] # 2-index: uchinchi inner list ] # Faqat bitta row'ni (masalan: 1-chi row) chiqaramiz print(\"1-chi row:\", matrix[1]) # [4, 5, 6] # Endi shu row ichidan bitta elementni chiqaramiz (masalan: 2-chi element) print(\"1-chi rowdagi 2-chi element:\", matrix[1][1]) # 5 \u2733\ufe0f E'LEMENT QO'SHISH # List of lists (multi-dimensional list) multi_dimensional_list = [ [1, 2, 3], # 0-index: birinchi ichki list (row) [4, 5, 6], # 1-index: ikkinchi ichki list (row) [7, 8, 9] # 2-index: uchinchi ichki list (row) ] # append() metodi yordamida butun bir yangi ichki list (row) qo\u2018shiladi multi_dimensional_list.append([10, 11, 12]) # Yangi list'ni ekranga chiqaramiz print(multi_dimensional_list) \u2733\ufe0f E'LEMENT O'ZGARTIRISH # Boshlang'ich list of lists (multi-dimensional list) multi_dimensional_list = [ [1, 2, 3], # 0-index [4, 5, 6], # 1-index [7, 8, 9] # 2-index ] # 0-indexdagi ichki listni yangisi bilan almashtiramiz multi_dimensional_list[0] = [13, 14, 15] # Natijani chiqaramiz print(multi_dimensional_list) \u2733\ufe0f ICHKI E'LEMENTNI O'ZGARTIRISH # Multi-dimensional list (list ichida listlar) multi_dimensional_list = [ [1, 2, 3], # 0-index row [4, 5, 6], # 1-index row [7, 8, 9] # 2-index row ] # 1-index row (ya'ni [4, 5, 6]) dagi 1-index elementni (ya'ni 5) 99 bilan almashtiramiz multi_dimensional_list[1][1] = 99 # Natijani chiqaramiz print(multi_dimensional_list) \u2705 RO'YHATDA E'LEMENT BORLIGINI TEKSHIRISH \ud83d\udccc Pythonda list ichida ma\u2019lum bir e'lement bor yoki yo\u2018qligini tekshirish uchun in operatoridan foydalaniladi. # Oddiy list my_list = [1, 2, 3, 4, 5] # 3 elementi my_list ichida mavjudmi? \u2192 Ha, shuning uchun natija: True print(3 in my_list) # True # 6 elementi my_list ichida mavjudmi? \u2192 Yo\u2018q, shuning uchun natija: False print(6 in my_list) # False \u2705 QO'SHIMCHA FUNKSIYALAR Python dasturlash tilida ro'yxatlar bilan ishlashda quyidagi funksiyalar yordamida ro'yxatdagi elementlarni qo'shish , maksimal va minimal qiymatlarni topish mumkin: \u2733\ufe0f sum() \ud83d\udccc listdagi sonlar yig\u2018indisini hisoblaydi # Oddiy sonlardan iborat list my_list = [10, 20, 30, 40, 50] # sum() funksiyasi listdagi barcha elementlarning yig'indisini hisoblaydi sum_of_list = sum(my_list) # Natijani chiqaramiz print(f\"Ro'yxatdagi elementlar yig'indisi: {sum_of_list}\") \u2733\ufe0f max() \ud83d\udccc Listdagi eng katta qiymatni qaytaradi. # Sonlardan iborat list my_list = [10, 20, 30, 40, 50] # max() funksiyasi listdagi eng katta qiymatni qaytaradi max_value = max(my_list) # Natijani ekranga chiqaramiz print(f\"Ro'yxatdagi eng katta qiymat: {max_value}\") \u2733\ufe0f min() \ud83d\udccc Listdagi eng kichik qiymatni qaytaradi. # Sonlardan iborat list my_list = [10, 20, 30, 40, 50] # min() funksiyasi listdagi eng kichik qiymatni qaytaradi min_value = min(my_list) # Natijani ekranga chiqaramiz print(f\"Ro'yxatdagi eng kichik qiymat: {min_value}\") \u2705 range() \ud83d\udccc Bu funktsiya yordamida biz ma'lum oraliqdagi sonlar ketma-ketligini yaratishimiz mumkin. list() funktsiyasi yordamida esa bu oraliqni ro'yxat shaklida saqlab olamiz: # 0 dan 9 gacha bo\u2018lgan sonlar ro\u2018yhatini yaratamiz sonlar = list(range(0, 10)) # Natijani ekranga chiqaramiz print(sonlar) [!CAUTION] range(a, b) funksiyasi doim a dan boshlanadi, b dan bitta oldin to\u2018xtaydi. \u2733\ufe0f STEP # 0 dan 20 gacha (20 kirmaydi), har 2 qadam bilan \u2014 juft sonlar juft_sonlar = list(range(0, 20, 2)) # 1 dan 20 gacha (20 kirmaydi), har 2 qadam bilan \u2014 toq sonlar toq_sonlar = list(range(1, 20, 2)) # Juft sonlarni ekranga chiqaramiz print(\"Juft sonlar: \", juft_sonlar) # Toq sonlarni ekranga chiqaramiz print(\"Toq sonlar: \", toq_sonlar) [!NOTE] Agar siz 0 dan boshlamoqchi bo\u2018lsangiz, range(10) deb yozish yetarli: NEGATIVE STEP \ud83d\udccc Agar siz kamayib boruvchi sonlar ketma-ketligini istasangiz, step qiymatini manfiy qiling: # 10 dan 1 gacha kamayuvchi sonlar ro'yxatini yaratamiz kamayuvchi = list(range(10, 0, -1)) # Natijani ekranga chiqaramiz print(kamayuvchi) \u2705 AMALIYOT \u2705 1-topshiriq: Ro'yxat yaratish va elementga murojaat qilish Quyidagi elementlarga ega bo\u2018lgan ro'yxatni yarating: 'olma' , 'banan' , 'gilos' , 'xurmo' , 'anjir' . Ro'yxatning ikkinchi va to\u2018rtinchi elementlarini terminalga chiqaring. \u2705 2-topshiriq: Ro'yxatni o\u2018zgartirish 1 dan 5 gacha bo\u2018lgan sonlar ro'yxatini yarating. Ro'yxatdagi uchinchi elementni 10 ga almashtiring va natijani chiqaring. \u2705 3-topshiriq: Element qo\u2018shish va o\u2018chirish Bo\u2018sh ro'yxat yarating. Ro'yxatga 'dog' , 'cat' , 'chicken' elementlarini qo\u2018shing. 'cat' elementini o\u2018chirib, ro'yxatni chiqaring. \u2705 4-topshiriq: Ro'yxat uzunligini topish Ro'yxat: 'red' , 'green' , 'blue' , 'yellow' , 'purple' . Ro'yxatning uzunligini hisoblab, terminalga chiqaring. \u2705 5-topshiriq: Ro'yxatlarni birlashtirish Ikkita ro'yxat yarating: - ['a', 'b', 'c'] - ['d', 'e', 'f'] Ularni birlashtirib, yangi ro'yxatni terminalga chiqaring. \u2705 6-topshiriq: Element mavjudligini tekshirish Ro'yxat: ['mashina', 'avtobus', 'velosiped', 'poyezd'] 'avtobus' ro'yxatda bormi? Tekshirib natijani ( True yoki False ) chiqaring. \u2705 7-topshiriq: Ro'yxatni saralash Ro'yxat: [3, 1, 4, 2, 5] O'sish tartibida saralang va natijani chiqaring. \u2705 8-topshiriq: Teskari tartibda chiqarish Ro'yxat: [10, 20, 30, 40, 50] .reverse() metodi yordamida ro'yxatni teskari chiqarish. \u2705 9-topshiriq: Ro'yxatni tozalash Ro'yxat: ['kitob', 'qalam', 'daftar', 'sumka'] .clear() yordamida barcha elementlarni o\u2018chirib, natijani chiqaring. \u2705 10-topshiriq: Ro'yxatni ko\u2018paytirish Ro'yxat: [1, 2, 3] Ro'yxatni 4 marta ko\u2018paytirib, yangi ro'yxatni terminalga chiqaring. \u2705 11-topshiriq: Minimal va maksimal qiymatni topish Ro'yxat: [25, 17, 9, 50, 33] min() va max() funksiyalari yordamida eng kichik va eng katta qiymatlarni toping. \u2705 12-topshiriq: Ro'yxatni nusxalash Ro'yxat: [100, 200, 300, 400, 500] Nusxa ko\u2018chiring ( copy() ) va yangi ro'yxatni chiqarib ko\u2018rsating. \u2705 13-topshiriq: Ro'yxatdagi elementlar yig\u2018indisi Ro'yxat: [2, 4, 6, 8, 10] sum() funksiyasi orqali yig\u2018indini hisoblang va natijani chiqaring. \u2705 14-topshiriq: Slicing va step ishlatish Ro'yxat: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] Har ikkinchi elementni ajratib olib, yangi ro'yxat hosil qiling. \u2705 15-topshiriq: Multi-dimensional listdan element olish Ro'yxat: [[1, 2], [3, 4], [5, 6]] Ikkinchi ichki ro'yxatdagi ikkinchi elementni ( 4 ) terminalga chiqaring.","title":"Lists"},{"location":"python/lists/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/lists/#4-dars-lists","text":"","title":"\ud83e\udde9 4-DARS LISTS"},{"location":"python/lists/#pythonda-listslar-bilan-ishlash","text":"\ud83d\udccc LIST \u2014 bu bir nechta ma'lumotlarni bitta o\u2018zgaruvchida navbatma-navbat saqlash uchun ishlatiladigan ma'lumot turi.","title":"\u2705 PYTHONDA LISTSLAR BILAN ISHLASH"},{"location":"python/lists/#listning-asosiy-xususiyatlari","text":"\u2733\ufe0f Bir nechta qiymatni bitta joyda saqlaydi \u2733\ufe0f Har bir qiymatning tartib raqami (index) bo\u2018ladi (0 dan boshlanadi) \u2733\ufe0f Istalgan turdagi ma\u2019lumotlar (son, matn, True/False) saqlanishi mumkin \u2733\ufe0f O\u2018zgartirish mumkin (ya'ni listdagi ma\u2019lumotlarni qo\u2018shish, o\u2018chirish, almashtirish mumkin)","title":"\u2705 LISTNING ASOSIY XUSUSIYATLARI"},{"location":"python/lists/#qachon-ishlatiladi","text":"\u2733\ufe0f Ko\u2018p sonli ma\u2019lumotlarni tartib bilan saqlash kerak bo\u2018lsa \u2733\ufe0f Ma\u2019lumotlar ustida takrorlash, filtrlash, yoki saralash kerak bo\u2018lsa \u2733\ufe0f Bir nechta qiymatni bitta o\u2018zgaruvchida saqlash orqali kodni soddalashtirish kerak bo\u2018lsa","title":"\u2705 QACHON ISHLATILADI?"},{"location":"python/lists/#list-yaratish","text":"# Bir nechta elementli list my_list = [10, \"DeepCode\", True, 3.14] # Bo\u2018sh list empty_list = []","title":"\u2705 LIST YARATISH"},{"location":"python/lists/#list-elementlariga-murojat-qilish","text":"","title":"\u2705 LIST ELEMENTLARIGA MUROJAT QILISH"},{"location":"python/lists/#index-orqali-murojat-qilish","text":"\ud83d\udccc Listdagi har bir element o\u2018zining indeks raqami bilan tartiblanadi. Pythonda indekslash 0 dan boshlanadi. # Mevalar ro'yxatini yaratamiz fruits = ['olma', 'banan', 'gilos', 'shaftoli'] # Ro'yxatdagi birinchi elementni (0-indeks) ekranga chiqaramiz print(fruits[0]) # 'olma' # Ro'yxatdagi uchinchi elementni (2-indeks) ekranga chiqaramiz print(fruits[2]) # 'gilos'","title":"\u2733\ufe0f INDEX ORQALI MUROJAT QILISH"},{"location":"python/lists/#negative-indexing","text":"\ud83d\udccc Pythonda oxirgi elementga manfiy indekslar yordamida murojaat qilinadi. # Mevalar ro'yxatini yaratamiz fruits = ['olma', 'banan', 'gilos', 'shaftoli'] # Ro'yxatdagi oxirgi elementni (manfiy indeks -1) ekranga chiqaramiz print(fruits[-1]) # 'shaftoli' # Ro'yxatdagi oxiridan ikkinchi elementni (manfiy indeks -2) ekranga chiqaramiz print(fruits[-2]) # 'gilos'","title":"\u2733\ufe0f NEGATIVE INDEXING"},{"location":"python/lists/#slicing","text":"\ud83d\udccc Listning ma\u2019lum qismini olish uchun slicing ishlatiladi: list[start:stop] # Mevalar ro'yxatini yaratamiz fruits = ['olma', 'banan', 'gilos', 'shaftoli'] # Indeks 1 dan boshlab 3 gacha bo'lgan elementlarni olish (3-indeks kirmaydi) print(fruits[1:3]) # ['banan', 'gilos'] # Boshlanishi avtomatik 0 deb olinadi, 0 dan 2 gacha bo'lgan elementlar (2-indeks kirmaydi) print(fruits[:2]) # ['olma', 'banan'] # Indeks 2 dan boshlab oxirigacha bo'lgan elementlarni olish print(fruits[2:]) # ['gilos', 'shaftoli']","title":"\u2733\ufe0f SLICING"},{"location":"python/lists/#slicing-with-step","text":"# Mevalar ro'yxatini yaratamiz fruits = ['olma', 'banan', 'gilos', 'shaftoli'] # Har 2-elementdan birini olamiz: 0, 2-indeksdagilar (ya'ni 1-element, 3-element) print(fruits[::2]) # ['olma', 'gilos'] # Ro'yxatni teskari tartibda chiqaramiz print(fruits[::-1]) # ['shaftoli', 'gilos', 'banan', 'olma']","title":"\u2733\ufe0f SLICING WITH STEP"},{"location":"python/lists/#listdagi-elementlar-sonini-topish","text":"\ud83d\udcccList uzunligi degani \u2014 list ichida nechta element (ya'ni qiymat) borligini bildiradi. Pythonda bu uzunlikni len() funksiyasi yordamida topamiz. # Bu yerda bizda 5 ta kompaniya bor companies = ['Google', 'Microsoft', 'Amazon', 'Tesla', 'Apple'] # len(companies) \u2014 bu companies listida nechta element borligini hisoblaydi print(len(companies))","title":"\u2705 LISTDAGI E'LEMENTLAR SONINI TOPISH"},{"location":"python/lists/#listga-element-qoshish","text":"","title":"\u2705 LISTGA E'LEMENT QO'SHISH"},{"location":"python/lists/#appendx","text":"\ud83d\udccc list oxiriga bitta element qo\u2018shadi. # Dastlab avtomobillar ro'yxatini yaratamiz cars = ['Nexia', 'Cobalt'] # Ro'yxat oxiriga yangi element 'Malibu' ni qo\u2018shamiz cars.append('Malibu') # Yangilangan ro'yxatni ekranga chiqaramiz print(cars) # ['Nexia', 'Cobalt', 'Malibu'] \ud83d\udccc .append() faqat bitta element qo\u2018shadi. Agar bir nechta element qo\u2018shmoqchi bo\u2018lsangiz, ularni list ko\u2018rinishida beriladi va list ichiga yana bir list qo\u2018shiladi: # Dastlab 3 ta sondan iborat ro'yxat yaratamiz my_list = [1, 2, 3] # Ro'yxat oxiriga [4, 5] ro'yxatini bitta element sifatida qo\u2018shamiz (ichki ro'yxat bo'ladi) my_list.append([4, 5]) # Natijaviy ro'yxatni ekranga chiqaramiz print(my_list) # [1, 2, 3, [4, 5]]","title":"\u2733\ufe0f .append(x)"},{"location":"python/lists/#extend","text":"\ud83d\udccc bir nechta elementni alohida-alohida qo\u2018shadi. # Boshlang'ich ro'yxat: 1, 2, 3 sonlari mavjud my_list = [1, 2, 3] # extend() metodi orqali [4, 5] ro'yxatining elementlarini alohida-alohida qo\u2018shamiz my_list.extend([4, 5]) # Natijaviy ro'yxatni chiqaramiz print(\"extend() natijasi:\", my_list) # Bu ro'yxatning elementlarini alohida qo'shadi","title":"\u2733\ufe0f .extend()"},{"location":"python/lists/#inserti-x","text":"\ud83d\udccc list ichidagi istalgan joyga bitta element qo\u2018shadi # Dastlab 1, 2, 3 sonlaridan iborat ro'yxat yaratamiz my_list = [1, 2, 3] # 2-pozitsiyaga (ya'ni 3-element o'rniga) 99 sonini qo\u2018shamiz my_list.insert(2, 99) # Natijaviy ro'yxatni ekranga chiqaramiz print(my_list) # [1, 2, 99, 3]","title":"\u2733\ufe0f .insert(i, x)"},{"location":"python/lists/#_1","text":"\ud83d\udccc listga boshqa listni qo\u2018shadi # Boshlang'ich ro'yxat: 1, 2, 3 my_list = [1, 2, 3] # += operatori yordamida [4, 5] ro'yxatini my_list ga kengaytiramiz (xuddi extend() kabi ishlaydi) my_list += [4, 5] # Natijaviy ro'yxatni chiqaramiz print(my_list) # [1, 2, 3, 4, 5]","title":"\u2733\ufe0f +="},{"location":"python/lists/#elementlarni-ochirish","text":"","title":"\u2705 E'LEMENTLARNI O'CHIRISH"},{"location":"python/lists/#removex","text":"\ud83d\udccc list ichida siz ko\u2018rsatgan qiymatga teng bo\u2018lgan birinchi elementni o\u2018chiradi. # Dastlabki list: bir nechta sonlar mavjud, jumladan ikki marta 3 soni my_list = [1, 2, 3, 4, 3, 5] # remove() metodi listdan **birinchi uchragan** 3 ni o'chiradi my_list.remove(3) # Yangilangan listni ekranga chiqaramiz print(my_list) # [1, 2, 4, 3, 5]","title":"\u2733\ufe0f .remove(x)"},{"location":"python/lists/#pop","text":"\ud83d\udccc Agar .pop() funksiyasiga hech narsa bermasangiz, oxirgi elementni o\u2018chiradi. # Dastlabki ro'yxatni yaratamiz my_list = [10, 20, 30, 40, 50] # pop() metodi ro'yxatning oxirgi elementini (50) o'chirib tashlaydi my_list.pop() # Yangilangan ro'yxatni ekranga chiqaramiz print(my_list) # [10, 20, 30, 40]","title":"\u2733\ufe0f .pop()"},{"location":"python/lists/#popi","text":"\ud83d\udccc Aniq indexdagi elementni o\u2018chiradi # Boshlang'ich ro'yxat: 10, 20, 30, 40 my_list = [10, 20, 30, 40] # pop(1) metodi ro'yxatdagi 1-indeksdagi elementni (ya'ni 20 ni) o'chiradi my_list.pop(1) # Yangilangan ro'yxatni ekranga chiqaramiz print(my_list) # [10, 30, 40]","title":"\u2733\ufe0f .pop(i)"},{"location":"python/lists/#del","text":"\ud83d\udccc Istalgan element yoki butun listni o\u2018chiradi # Boshlang'ich ro'yxat: 4 ta harf mavjud my_list = ['a', 'b', 'c', 'd'] # del operatori yordamida ro'yxatdagi 2-indeksdagi element ('c') ni o\u2018chiramiz del my_list[2] # Ro'yxat yangilanadi: endi ['a', 'b', 'd'] bo'ladi print(\"1-element o\u2018chirilgan ro\u2018yhat:\", my_list) # ['a', 'b', 'd'] # Ro'yxatni qaytadan yaratamiz my_list = ['a', 'b', 'c', 'd'] # del operatori yordamida butun ro'yxatni (ya'ni my_list o'zgaruvchisini) o\u2018chiramiz del my_list # Bu yerda my_list endi mavjud emas, agar pastda print(my_list) desangiz \u2014 xatolik (NameError) chiqadi # print(my_list) # \u274c NameError: name 'my_list' is not defined","title":"\u2733\ufe0f del"},{"location":"python/lists/#listni-tozalash","text":"\ud83d\udccc Agar list ichidagi hamma elementlarni o\u2018chirib, uni bo\u2018sh holatga keltirmoqchi bo\u2018lsangiz, .clear() metodidan foydalaniladi. # Boshlang'ich ro'yxat: 1 dan 5 gacha sonlar mavjud my_list = [1, 2, 3, 4, 5] # clear() metodi ro'yxatdagi barcha elementlarni o\u2018chiradi (lekin ro'yxatning o\u2018zi qoladi, bo\u2018sh holatda) my_list.clear() # Bo\u2018sh ro'yxatni ekranga chiqaramiz print(my_list) # []","title":"\u2705 LISTNI TOZALASH"},{"location":"python/lists/#listni-saralash","text":"\ud83d\udccc Python dasturlash tilida listdagi elementlarni tartiblash uchun ikkita asosiy vosita mavjud: .sort() metodi va sorted() funksiyasi. Ularning ikkalasi ham listni tartiblash uchun ishlatiladi, lekin ular orasida muhim farqlar bor. Tartiblashda raqamlar o'sib borish tartibida, matnlar esa alifbo tartibida tartiblanadi.","title":"\u2705 LISTNI SARALASH"},{"location":"python/lists/#sort","text":"\ud83d\udccc .sort() \u2014 bu listning o\u2018ziga tegishli metod bo\u2018lib, u faqat listlar bilan ishlaydi. Agar siz .sort() metodini ishlatsangiz, u listning o\u2018zini tartiblaydi, ya\u2019ni listdagi e'lementlar joyida o\u2018zgaradi. Boshqacha aytganda, bu metod listni o\u2018zgartiradi va tartiblangan yangi list yaratmaydi. Misol uchun, sizda bir list bo\u2018lsa va .sort() desangiz, o\u2018sha list tartiblanadi va avvalgi tartibi yo\u2018qoladi. Shuning uchun, agar sizga asl list kerak bo\u2018lsa, .sort() ni ishlatishdan oldin ehtiyot bo\u2018lish kerak, chunki u listni butunlay o\u2018zgartirib yuboradi. Bu metod hech qanday natija qaytarmaydi, ya\u2019ni None degan qiymatni qaytaradi. # Boshlang'ich ro'yxat: aralash tartibda sonlar mavjud my_list = [3, 1, 4, 1, 5, 9, 2] # sort() metodi ro'yxatni o'sish tartibida (kichikdan kattaga) saralaydi my_list.sort() # Tartiblangan ro'yxatni ekranga chiqaramiz print(my_list) # [1, 1, 2, 3, 4, 5, 9]","title":"\u2733\ufe0f .sort()"},{"location":"python/lists/#sorted","text":"\ud83d\udccc sorted() esa funksiyadir. Bu funksiya faqat list emas, balki boshqa turdagi ma\u2019lumotlar bilan ham ishlay oladi \u2014 masalan, string , tuple va boshqa tartiblangan ma\u2019lumot turlari bilan. sorted() funksiyasining eng katta afzalligi \u2014 u mavjud listni o\u2018zgartirmaydi. U asl listga tegmaydi, balki yangi tartiblangan listni qaytaradi. Bu esa sizga asl ma\u2019lumotni saqlab qolgan holda, tartiblangan nusxasi bilan ishlash imkonini beradi. Agar sizga vaqtincha tartiblangan natija kerak bo\u2018lsa yoki original listni o\u2018zgartirmasdan ishlashni xohlasangiz, sorted() funksiyasi aynan sizga mos keladi. # Boshlang'ich ro'yxat: aralash tartibdagi sonlar my_list = [3, 1, 4, 1, 5, 9] # sorted() funksiyasi yangi tartiblangan ro'yxat yaratadi, asl ro'yxat o'zgarmaydi sorted_list = sorted(my_list) # Yangi (saralangan) ro'yxatni chiqaramiz print(\"Yangi ro\u2018yxat:\", sorted_list) # [1, 1, 3, 4, 5, 9] # Asl ro'yxat o'zgarishsiz qolganini ko'rsatamiz print(\"Asl ro\u2018yxat:\", my_list) # [3, 1, 4, 1, 5, 9]","title":"\u2733\ufe0f .sorted()"},{"location":"python/lists/#teskari-tartibda-saralash","text":"","title":"\u2705 TESKARI TARTIBDA SARALASH"},{"location":"python/lists/#sortreversetrue","text":"# Boshlang'ich list: aralash sonlar mavjud my_list = [3, 1, 4, 1, 5, 9] # sort() metodi orqali listni kamayish tartibida tartiblaymiz my_list.sort(reverse=True) # Tartiblangan listni ekranga chiqaramiz print(my_list) # [9, 5, 4, 3, 1, 1]","title":"\u2733\ufe0f .sort(reverse=True)"},{"location":"python/lists/#sorted-reversetrue","text":"# Boshlang'ich list: aralash sonlar mavjud my_list = [3, 1, 4, 1, 5, 9] # sorted() funksiyasi listni kamayish tartibida tartiblaydi va yangi list qaytaradi sorted_list = sorted(my_list, reverse=True) # Teskari tartiblangan yangi listni chiqaramiz print(\"Teskari list:\", sorted_list) # [9, 5, 4, 3, 1, 1]","title":"\u2733\ufe0f sorted(..., reverse=True)"},{"location":"python/lists/#qoshimcha-parametr","text":"","title":"\u2705 QO'SHIMCHA PARAMETR"},{"location":"python/lists/#key","text":"# Ismlar listi: har xil uzunlikdagi so'zlardan iborat names = ['Ali', 'Muhammad', 'Zafar', 'Islom'] # sort() metodi va key=len parametri yordamida listni so'z uzunligi bo'yicha o'sish tartibida saralaymiz names.sort(key=len) # Saralangan listni chiqaramiz print(names) # ['Ali', 'Zafar', 'Islom', 'Muhammad']","title":"\u2733\ufe0f KEY"},{"location":"python/lists/#listni-teskariga-ozgartirish","text":"","title":"\u2705 LISTNI TESKARIGA O'ZGARTIRISH"},{"location":"python/lists/#reverse","text":"\ud83d\udccc Ba'zida ro\u2018yxatdagi elementlarni teskari tartibda ko\u2018rsatish kerak bo\u2018ladi \u2014 ya'ni oxirgi element birinchi, birinchi element esa oxirgi bo\u2018ladi. # Boshlang'ich list: 1 dan 5 gacha bo'lgan sonlar my_list = [1, 2, 3, 4, 5] # reverse() metodi list elementlarini teskari tartibda joylashtiradi my_list.reverse() # Teskari tartibga keltirilgan listni ekranga chiqaramiz print(my_list) # [5, 4, 3, 2, 1]","title":"\u2733\ufe0f .reverse()"},{"location":"python/lists/#listni-birlashtirish","text":"","title":"\u2705 LISTNI BIRLASHTIRISH"},{"location":"python/lists/#_2","text":"\ud83d\udccc Bu usulda ikkita listni qo\u2018shib, yangi bitta list hosil qilamiz. # 1-chi list list1 = [1, 2, 3] # 2-chi list list2 = [4, 5, 6] # + operatori yordamida ikkala listni birlashtiramiz merged_list = list1 + list2 # Yangi birlashtirilgan listni chiqaramiz print(merged_list) # [1, 2, 3, 4, 5, 6]","title":"\u2733\ufe0f +"},{"location":"python/lists/#_3","text":"\ud83d\udccc Bu usulda ikkinchi list elementlari birinchi listga qo\u2018shiladi va birinchi ro\u2018yxat o\u2018zgartiriladi. # 1-chi list list1 = [1, 2, 3] # 2-chi list list2 = [4, 5, 6] # += operatori list2 dagi elementlarni list1 ga alohida-alohida qo\u2018shadi list1 += list2 # Natijaviy list1 ni ekranga chiqaramiz print(list1) # [1, 2, 3, 4, 5, 6]","title":"\u2733\ufe0f +="},{"location":"python/lists/#extend_1","text":"# 1-chi list list1 = [1, 2, 3] # 2-chi list list2 = [4, 5, 6] # extend() metodi list2 dagi barcha elementlarni list1 ga alohida-alohida qo\u2018shadi list1.extend(list2) # Natijaviy list1 ni ekranga chiqaramiz print(list1) # [1, 2, 3, 4, 5, 6]","title":"\u2733\ufe0f .extend()"},{"location":"python/lists/#multi-demensional-list","text":"\ud83d\udccc Pythonda list ichiga yana boshqa list joylash mumkin. Bu holat multi dimensional list deb ataladi (inglizchasiga o\u2018xshab \"2D list\" ham deyiladi). # Bu multi-dimensional list (ya'ni list of lists) \u2014 har bir element o'z ichida yana bir list saqlaydi multi_dimensional_list = [ [1, 2, 3], # 0-index: birinchi inner list [4, 5, 6], # 1-index: ikkinchi inner list [7, 8, 9] # 2-index: uchinchi inner list ]","title":"\u2705 MULTI DEMENSIONAL LIST"},{"location":"python/lists/#elementlarga-murojat-qilish","text":"Ro'yxat ichidagi ro'yxatdagi elementlarga indekslar yordamida murojaat qilish mumkin. # List of lists (ya'ni list ichidagi list) multi_dimensional_list = [ [1, 2, 3], # 0-index: birinchi inner list [4, 5, 6], # 1-index: ikkinchi inner list [7, 8, 9] # 2-index: uchinchi inner list ] # Faqat bitta row'ni (masalan: 1-chi row) chiqaramiz print(\"1-chi row:\", matrix[1]) # [4, 5, 6] # Endi shu row ichidan bitta elementni chiqaramiz (masalan: 2-chi element) print(\"1-chi rowdagi 2-chi element:\", matrix[1][1]) # 5","title":"\u2733\ufe0f E'LEMENTLARGA MUROJAT QILISH"},{"location":"python/lists/#element-qoshish","text":"# List of lists (multi-dimensional list) multi_dimensional_list = [ [1, 2, 3], # 0-index: birinchi ichki list (row) [4, 5, 6], # 1-index: ikkinchi ichki list (row) [7, 8, 9] # 2-index: uchinchi ichki list (row) ] # append() metodi yordamida butun bir yangi ichki list (row) qo\u2018shiladi multi_dimensional_list.append([10, 11, 12]) # Yangi list'ni ekranga chiqaramiz print(multi_dimensional_list)","title":"\u2733\ufe0f E'LEMENT QO'SHISH"},{"location":"python/lists/#element-ozgartirish","text":"# Boshlang'ich list of lists (multi-dimensional list) multi_dimensional_list = [ [1, 2, 3], # 0-index [4, 5, 6], # 1-index [7, 8, 9] # 2-index ] # 0-indexdagi ichki listni yangisi bilan almashtiramiz multi_dimensional_list[0] = [13, 14, 15] # Natijani chiqaramiz print(multi_dimensional_list)","title":"\u2733\ufe0f E'LEMENT O'ZGARTIRISH"},{"location":"python/lists/#ichki-elementni-ozgartirish","text":"# Multi-dimensional list (list ichida listlar) multi_dimensional_list = [ [1, 2, 3], # 0-index row [4, 5, 6], # 1-index row [7, 8, 9] # 2-index row ] # 1-index row (ya'ni [4, 5, 6]) dagi 1-index elementni (ya'ni 5) 99 bilan almashtiramiz multi_dimensional_list[1][1] = 99 # Natijani chiqaramiz print(multi_dimensional_list)","title":"\u2733\ufe0f ICHKI E'LEMENTNI O'ZGARTIRISH"},{"location":"python/lists/#royhatda-element-borligini-tekshirish","text":"\ud83d\udccc Pythonda list ichida ma\u2019lum bir e'lement bor yoki yo\u2018qligini tekshirish uchun in operatoridan foydalaniladi. # Oddiy list my_list = [1, 2, 3, 4, 5] # 3 elementi my_list ichida mavjudmi? \u2192 Ha, shuning uchun natija: True print(3 in my_list) # True # 6 elementi my_list ichida mavjudmi? \u2192 Yo\u2018q, shuning uchun natija: False print(6 in my_list) # False","title":"\u2705 RO'YHATDA E'LEMENT BORLIGINI TEKSHIRISH"},{"location":"python/lists/#qoshimcha-funksiyalar","text":"Python dasturlash tilida ro'yxatlar bilan ishlashda quyidagi funksiyalar yordamida ro'yxatdagi elementlarni qo'shish , maksimal va minimal qiymatlarni topish mumkin:","title":"\u2705 QO'SHIMCHA FUNKSIYALAR"},{"location":"python/lists/#sum","text":"\ud83d\udccc listdagi sonlar yig\u2018indisini hisoblaydi # Oddiy sonlardan iborat list my_list = [10, 20, 30, 40, 50] # sum() funksiyasi listdagi barcha elementlarning yig'indisini hisoblaydi sum_of_list = sum(my_list) # Natijani chiqaramiz print(f\"Ro'yxatdagi elementlar yig'indisi: {sum_of_list}\")","title":"\u2733\ufe0f sum()"},{"location":"python/lists/#max","text":"\ud83d\udccc Listdagi eng katta qiymatni qaytaradi. # Sonlardan iborat list my_list = [10, 20, 30, 40, 50] # max() funksiyasi listdagi eng katta qiymatni qaytaradi max_value = max(my_list) # Natijani ekranga chiqaramiz print(f\"Ro'yxatdagi eng katta qiymat: {max_value}\")","title":"\u2733\ufe0f max()"},{"location":"python/lists/#min","text":"\ud83d\udccc Listdagi eng kichik qiymatni qaytaradi. # Sonlardan iborat list my_list = [10, 20, 30, 40, 50] # min() funksiyasi listdagi eng kichik qiymatni qaytaradi min_value = min(my_list) # Natijani ekranga chiqaramiz print(f\"Ro'yxatdagi eng kichik qiymat: {min_value}\")","title":"\u2733\ufe0f min()"},{"location":"python/lists/#range","text":"\ud83d\udccc Bu funktsiya yordamida biz ma'lum oraliqdagi sonlar ketma-ketligini yaratishimiz mumkin. list() funktsiyasi yordamida esa bu oraliqni ro'yxat shaklida saqlab olamiz: # 0 dan 9 gacha bo\u2018lgan sonlar ro\u2018yhatini yaratamiz sonlar = list(range(0, 10)) # Natijani ekranga chiqaramiz print(sonlar) [!CAUTION] range(a, b) funksiyasi doim a dan boshlanadi, b dan bitta oldin to\u2018xtaydi.","title":"\u2705 range()"},{"location":"python/lists/#step","text":"# 0 dan 20 gacha (20 kirmaydi), har 2 qadam bilan \u2014 juft sonlar juft_sonlar = list(range(0, 20, 2)) # 1 dan 20 gacha (20 kirmaydi), har 2 qadam bilan \u2014 toq sonlar toq_sonlar = list(range(1, 20, 2)) # Juft sonlarni ekranga chiqaramiz print(\"Juft sonlar: \", juft_sonlar) # Toq sonlarni ekranga chiqaramiz print(\"Toq sonlar: \", toq_sonlar) [!NOTE] Agar siz 0 dan boshlamoqchi bo\u2018lsangiz, range(10) deb yozish yetarli:","title":"\u2733\ufe0f STEP"},{"location":"python/lists/#negative-step","text":"\ud83d\udccc Agar siz kamayib boruvchi sonlar ketma-ketligini istasangiz, step qiymatini manfiy qiling: # 10 dan 1 gacha kamayuvchi sonlar ro'yxatini yaratamiz kamayuvchi = list(range(10, 0, -1)) # Natijani ekranga chiqaramiz print(kamayuvchi)","title":"NEGATIVE STEP"},{"location":"python/lists/#amaliyot","text":"","title":"\u2705 AMALIYOT"},{"location":"python/lists/#1-topshiriq-royxat-yaratish-va-elementga-murojaat-qilish","text":"Quyidagi elementlarga ega bo\u2018lgan ro'yxatni yarating: 'olma' , 'banan' , 'gilos' , 'xurmo' , 'anjir' . Ro'yxatning ikkinchi va to\u2018rtinchi elementlarini terminalga chiqaring.","title":"\u2705 1-topshiriq: Ro'yxat yaratish va elementga murojaat qilish"},{"location":"python/lists/#2-topshiriq-royxatni-ozgartirish","text":"1 dan 5 gacha bo\u2018lgan sonlar ro'yxatini yarating. Ro'yxatdagi uchinchi elementni 10 ga almashtiring va natijani chiqaring.","title":"\u2705 2-topshiriq: Ro'yxatni o\u2018zgartirish"},{"location":"python/lists/#3-topshiriq-element-qoshish-va-ochirish","text":"Bo\u2018sh ro'yxat yarating. Ro'yxatga 'dog' , 'cat' , 'chicken' elementlarini qo\u2018shing. 'cat' elementini o\u2018chirib, ro'yxatni chiqaring.","title":"\u2705 3-topshiriq: Element qo\u2018shish va o\u2018chirish"},{"location":"python/lists/#4-topshiriq-royxat-uzunligini-topish","text":"Ro'yxat: 'red' , 'green' , 'blue' , 'yellow' , 'purple' . Ro'yxatning uzunligini hisoblab, terminalga chiqaring.","title":"\u2705 4-topshiriq: Ro'yxat uzunligini topish"},{"location":"python/lists/#5-topshiriq-royxatlarni-birlashtirish","text":"Ikkita ro'yxat yarating: - ['a', 'b', 'c'] - ['d', 'e', 'f'] Ularni birlashtirib, yangi ro'yxatni terminalga chiqaring.","title":"\u2705 5-topshiriq: Ro'yxatlarni birlashtirish"},{"location":"python/lists/#6-topshiriq-element-mavjudligini-tekshirish","text":"Ro'yxat: ['mashina', 'avtobus', 'velosiped', 'poyezd'] 'avtobus' ro'yxatda bormi? Tekshirib natijani ( True yoki False ) chiqaring.","title":"\u2705 6-topshiriq: Element mavjudligini tekshirish"},{"location":"python/lists/#7-topshiriq-royxatni-saralash","text":"Ro'yxat: [3, 1, 4, 2, 5] O'sish tartibida saralang va natijani chiqaring.","title":"\u2705 7-topshiriq: Ro'yxatni saralash"},{"location":"python/lists/#8-topshiriq-teskari-tartibda-chiqarish","text":"Ro'yxat: [10, 20, 30, 40, 50] .reverse() metodi yordamida ro'yxatni teskari chiqarish.","title":"\u2705 8-topshiriq: Teskari tartibda chiqarish"},{"location":"python/lists/#9-topshiriq-royxatni-tozalash","text":"Ro'yxat: ['kitob', 'qalam', 'daftar', 'sumka'] .clear() yordamida barcha elementlarni o\u2018chirib, natijani chiqaring.","title":"\u2705 9-topshiriq: Ro'yxatni tozalash"},{"location":"python/lists/#10-topshiriq-royxatni-kopaytirish","text":"Ro'yxat: [1, 2, 3] Ro'yxatni 4 marta ko\u2018paytirib, yangi ro'yxatni terminalga chiqaring.","title":"\u2705 10-topshiriq: Ro'yxatni ko\u2018paytirish"},{"location":"python/lists/#11-topshiriq-minimal-va-maksimal-qiymatni-topish","text":"Ro'yxat: [25, 17, 9, 50, 33] min() va max() funksiyalari yordamida eng kichik va eng katta qiymatlarni toping.","title":"\u2705 11-topshiriq: Minimal va maksimal qiymatni topish"},{"location":"python/lists/#12-topshiriq-royxatni-nusxalash","text":"Ro'yxat: [100, 200, 300, 400, 500] Nusxa ko\u2018chiring ( copy() ) va yangi ro'yxatni chiqarib ko\u2018rsating.","title":"\u2705 12-topshiriq: Ro'yxatni nusxalash"},{"location":"python/lists/#13-topshiriq-royxatdagi-elementlar-yigindisi","text":"Ro'yxat: [2, 4, 6, 8, 10] sum() funksiyasi orqali yig\u2018indini hisoblang va natijani chiqaring.","title":"\u2705 13-topshiriq: Ro'yxatdagi elementlar yig\u2018indisi"},{"location":"python/lists/#14-topshiriq-slicing-va-step-ishlatish","text":"Ro'yxat: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] Har ikkinchi elementni ajratib olib, yangi ro'yxat hosil qiling.","title":"\u2705 14-topshiriq: Slicing va step ishlatish"},{"location":"python/lists/#15-topshiriq-multi-dimensional-listdan-element-olish","text":"Ro'yxat: [[1, 2], [3, 4], [5, 6]] Ikkinchi ichki ro'yxatdagi ikkinchi elementni ( 4 ) terminalga chiqaring.","title":"\u2705 15-topshiriq: Multi-dimensional listdan element olish"},{"location":"python/modules/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 13-DARS MODULS \u2705 MODUL NIMA? \ud83d\udccc Modul \u2014 bu Python fayli bo\u2018lib, u ichida funksiyalar , classlar , o\u2018zgaruvchilar , yoki boshqa Python kodlari saqlanadi. \ud83d\udccc Modulning asosiy vazifasi \u2014 kodni bo\u2018laklarga ajratish, tartibli saqlash va boshqa joylarda qayta ishlatish imkonini berish. \u2705 MODUL KERAKMI? NIMA FOYDA? \ud83d\udccc Quyidagi sabablarga ko\u2018ra modul foydali: Kod takrorlanmasligi \u2014 bir marta yozilgan kodni istalgan joyda qayta ishlatish mumkin. Kodlarni guruhlash \u2014 o\u2018xshash funksiyalar bitta faylga to\u2018plansa, ularni boshqarish oson bo\u2018ladi. Katta dasturlarni boshqarish osonlashadi \u2014 har bir qism alohida modul bo\u2018lsa, tuzilma soddalashadi. Test qilish oson \u2014 modulni alohida sinab ko\u2018rish mumkin. \u2705 MODULLARNI import QILISH \ud83d\udccc Pythonda modullardan foydalanish uchun avvalo ularni import qilish kerak. Modullarni import qilish uchun import kalit so'zidan foydalaniladi. # Dasturga tashqi yoki ichki modulni ulash (import qilish) uchun ishlatiladi # 'modul_nomi' o\u2018rniga kerakli modul nomi yoziladi (masalan: math, random, datetime va h.k.) import modul_nomi \ud83d\udccc math modulini import qilish # 'math' modulini import qilamiz, bu modulda matematik funksiyalar mavjud import math # Aylananing radiusi 5 ga teng deb belgilaymiz radius = 5 # Aylana yuzini hisoblaymiz: \u03c0 * r^2 formulasi asosida yuza = math.pi * radius**2 # Hisoblangan aylana yuzini ekranga chiqaramiz print(f\"Aylana yuzi: {yuza}\") \u2705 MODULLARDAN MUAYYAN QISMLARNI IMPORT QILISH \ud83d\udccc from modul_nomi import funksiya_yoki_object sintaksisi yordamida siz ma'lum bir moduldan faqat kerakli funksiya yoki o'zgaruvchini import qilishingiz mumkin. Bu sizga modulni to'liq import qilmasdan, faqat zaruriy qismlarini olish imkonini beradi. # Belgilangan modul ichidan faqat kerakli funksiya yoki obyektni import qilish uchun ishlatiladi # 'modul_nomi' \u2013 bu modul nomi (masalan: math, random, datetime) # 'funksiya_yoki_object' \u2013 modul ichidagi aniq bir funksiya, klass yoki o\u2018zgaruvchi nomi from modul_nomi import funksiya_yoki_object \ud83d\udccc math modulidan sqrt funksiyasini import qilish # 'math' modulidan faqat 'sqrt' (kvadrat ildiz) funksiyasini import qilamiz from math import sqrt # Kvadrat ildizi olinadigan sonni belgilaymiz son = 16 # Berilgan sonning kvadrat ildizini hisoblaymiz ildiz = sqrt(son) # Natijani ekranga chiqaramiz print(f\"{son} ning kvadrat ildizi: {ildiz}\") \u2705 MODULGA BOSHQA NOM BERISH \ud83d\udccc Modulni import qilishda unga qisqa yoki qulayroq nom berish uchun as operatoridan foydalanishingiz mumkin. # 'math' modulini 'm' degan qisqa nom bilan import qilamiz import math as m # Aylananing radiusini belgilaymiz radius = 7 # Aylananing diametrini hisoblaymiz: D = 2 * \u03c0 * r formulasi bo\u2018yicha diametr = 2 * m.pi * radius # Hisoblangan diametrni ekranga chiqaramiz print(f\"Aylananing diametri: {diametr}\") \u2705 MODUL YARATISH \ud83d\udccc Modul yaratish uchun asosiy dasturimizdagi funksiyalarni yangi faylga ko'chiramiz xolos. Modulga oson murojat qilishimiz uchun, faylimiz asosiy dasturimiz bilan bitta papkada bo'lishi kerak. Bunda adashib ketmaslik uchun, loyihangizning(dasturning) asosiy faylini main.py deb nomlash o'rinli. # mymodule.py - Bu modulda funksiyalar va klasslar jamlangan # Salomlashish uchun funksiya def greet(name): \"\"\"Salomlashish funktsiyasi.\"\"\" return f\"Salom, {name}!\" # Ikki sonni qo\u2018shish funksiyasi def add(a, b): \"\"\"Ikki sonni qo'shish funktsiyasi.\"\"\" return a + b # Ikki sonni ko\u2018paytirish funksiyasi def multiply(a, b): \"\"\"Ikki sonni ko'paytirish funktsiyasi.\"\"\" return a * b # Shaxslarni ifodalovchi klass class Person: \"\"\"Shaxs klassi.\"\"\" # Klassni ishga tushiruvchi konstruktor def __init__(self, name, age): self.name = name self.age = age # Shaxs haqida tanishtiruvchi metod def introduce(self): \"\"\"Shaxsni tanishtiruvchi metod.\"\"\" return f\"Men {self.name} va {self.age} yoshdaman.\" \u2705MODULDAN FOYDALANISH \ud83d\udccc Modul yaratganingizdan so'ng, uni boshqa Python dasturlarida import qilib ishlatishingiz mumkin. # mymodule modulini import qilamiz, undagi funksiyalar va klasslardan foydalanish uchun import mymodule # greet funksiyasini chaqirib, \"Ali\" ga salom beramiz print(mymodule.greet(\"Ali\")) # add funksiyasi yordamida 5 va 3 sonlarini qo\u2018shamiz va natijani chiqaramiz print(mymodule.add(5, 3)) # multiply funksiyasi yordamida 4 va 7 sonlarini ko\u2018paytiramiz va natijani chiqaramiz print(mymodule.multiply(4, 7)) # Person klassidan yangi obyekt yaratamiz, ism va yoshni beramiz person = mymodule.Person(\"Omar\", 25) # obyektning introduce metodini chaqirib, tanishtirish matnini chiqaramiz print(person.introduce()) \u2705 MODULNI KENGAYTIRISH \ud83d\udccc Modulga qo'shimcha funksiyalar yoki klasslar qo'shishingiz mumkin. # Ikki sondan birini ayirish funksiyasi def subtract(a, b): \"\"\"Ikki sondan birini ayirish funktsiyasi.\"\"\" return a - b # Ikki sonni bo'lish funksiyasi def divide(a, b): \"\"\"Ikki sonni bo'lish funktsiyasi.\"\"\" if b == 0: # Agar bo\u2018luvchi 0 bo\u2018lsa, xatolik chiqaramiz raise ValueError(\"Bo'lish uchun 0 bilan bo'lish mumkin emas!\") return a / b \u2705 FOYDALI MODULLAR \ud83d\udccc math MODULI \u2705 NIMA UCHUN FOYDALI? Matematik hisob-kitoblarni oson va aniq bajarish uchun kerak. Kvadrat ildiz, logarifm, trigonometrik funksiyalar, faktoriyal kabi ko\u2018plab matematik operatsiyalarni bajarish imkonini beradi. Dasturlashda murakkab matematik formulalarni ishlatishda yordam beradi. 1. math.ceil(x) \ud83d\udccc x sonini yuqoriga qarab yaxlitlaydi. Ya'ni, agar son butun emas bo\u2018lsa, keyingi eng yaqin butun songa oshiradi. Agar son butun bo\u2018lsa, o\u2018zi o\u2018zgarmaydi. # 'math' modulini import qilamiz import math # 5.1 sonini yuqoriga qarab butun songa yaxlitlaymiz (ceil funksiyasi) print(math.ceil(5.1)) # Natija: 6 # 5.9 sonini yuqoriga qarab butun songa yaxlitlaymiz print(math.ceil(5.9)) # Natija: 6 # Manfiy -3.4 sonini yuqoriga qarab yaxlitlaymiz (-3.4 dan katta eng kichik butun son -3) print(math.ceil(-3.4)) # Natija: -3 # 7 allaqachon butun son, shuning uchun o\u2018zgarmaydi print(math.ceil(7)) # Natija: 7 2. math.floor(x) \ud83d\udccc x sonini pastga qarab yaxlitlaydi. Ya'ni, agar son butun emas bo\u2018lsa, oldingi eng yaqin butun songa tushiradi. Agar son butun bo\u2018lsa, o\u2018zi o\u2018zgarmaydi. # 'math' modulini import qilamiz import math # 5.9 sonini pastga qarab butun songa yaxlitlaymiz (floor funksiyasi) print(math.floor(5.9)) # Natija: 5 # 5.1 sonini pastga qarab butun songa yaxlitlaymiz print(math.floor(5.1)) # Natija: 5 # Manfiy -3.4 sonini pastga qarab yaxlitlaymiz (-3.4 dan kichik eng katta butun son -4) print(math.floor(-3.4)) # Natija: -4 # 7 allaqachon butun son, shuning uchun o\u2018zgarmaydi print(math.floor(7)) # Natija: 7 random MODULI \ud83d\udccc random moduli \u2014 bu Python kutubxonasi bo\u2018lib, u yordamida tasodifiy sonlar, tasodifiy elementlar tanlash va ro\u2018yxatlarni aralashtirish mumkin. \u2705 NIMA UCHUN FOYDALI? O'yinlarda qahramonlar yoki voqealar uchun tasodifiylik yaratish uchun, Testlarda tasodifiy savollar tanlash uchun, Statistik tadqiqotlarda namuna olish uchun ishlatiladi. Shuningdek, har xil dasturlarda tasodifiy natijalar yaratishda qo\u2018llaniladi. 1. random.randint(a, b) \ud83d\udccc a va b orasidagi tasodifiy butun sonni qaytaradi (a va b ham shu oraliqqa kiradi). # random modulini import qilamiz, bu modul tasodifiy sonlar bilan ishlash uchun kerak import random # 1 dan 10 gacha (ikkala chegarani ham qo'shib) tasodifiy butun son hosil qilamiz son = random.randint(1, 10) # Hosil qilingan tasodifiy sonni ekranga chiqaramiz print(son) # 1 dan 10 gacha bo'lgan butun son (masalan, 3, 7, 10 va hokazo) 2. random.choice(sequence) \ud83d\udccc Berilgan ketma-ketlik (list, string yoki boshqa iterable) ichidan tasodifiy bitta elementni tanlaydi. # random modulini import qilamiz, tasodifiy element tanlash uchun kerak bo\u2018ladi import random # Mevalar ro\u2018yxatini yaratamiz mevalar = ['olma', 'banan', 'anor', 'shaftoli'] # Ro\u2018yxatdan tasodifiy bitta meva tanlaymiz tasodifiy_meva = random.choice(mevalar) # Tanlangan mevaning nomini ekranga chiqaramiz print(tasodifiy_meva) # masalan, 'anor' yoki 'banan' chiqishi mumkin 3. random.shuffle(list) \ud83d\udccc List elementlarini joyini tasodifiy tarzda almashtiradi (listni o\u2018zgartiradi). # random modulini import qilamiz, ro'yxat elementlarini aralashtirish uchun kerak import random # Raqamlar ro'yxatini yaratamiz raqamlar = [1, 2, 3, 4, 5] # Ro'yxatdagi elementlarni tasodifiy tartibda aralashtiramiz random.shuffle(raqamlar) # Aralashtirilgan ro'yxatni ekranga chiqaramiz print(raqamlar) # ro'yxat elementlari aralashadi, masalan, [3, 1, 5, 2, 4] datetime MODULI \ud83d\udccc datetime moduli - Python kutubxonasi bo\u2018lib, sana va vaqt bilan ishlash uchun ishlatiladi. \u2705 NIMA UCHUN FOYDALI? Vaqtni hisoblash (masalan, ikki sana orasidagi farqni topish) Hozirgi vaqtni olish Sanalarni formatlash va ko\u2018rsatish Muddatlarni qo\u2018shish yoki ayirish. 1. datetime.date.today() \ud83d\udccc Hozirgi kundagi sanani qaytaradi (faqat sana, vaqt emas). # datetime modulini import qilamiz, vaqt va sana bilan ishlash uchun kerak import datetime # Hozirgi sanani olish uchun today() funksiyasidan foydalanamiz bugun = datetime.date.today() # Olingan sanani ekranga chiqaramiz, masalan: 2025-06-06 print(bugun) # masalan, 2025-06-06 2. datetime.datetime.now() \ud83d\udccc Hozirgi sanani va vaqtni to\u2018liq qaytaradi (soat, daqiqa, soniya bilan). # datetime modulini import qilamiz, sana va vaqt bilan ishlash uchun kerak import datetime # Hozirgi sana va vaqtni olish uchun now() funksiyasidan foydalanamiz hozir = datetime.datetime.now() # Olingan sana va vaqtni ekranga chiqaramiz, masalan: 2025-06-06 15:30:25.123456 print(hozir) # masalan, 2025-06-06 15:30:25.123456 3. datetime.timedelta(days=5) \ud83d\udccc Vaqt oralig\u2018ini ifodalaydi. Masalan, 5 kun yoki 2 soat kabilarni yaratadi. # datetime modulini import qilamiz, sana va vaqt bilan ishlash uchun kerak import datetime # timedelta obyektini yaratamiz, bu 5 kunlik vaqt farqini ifodalaydi besh_kun = datetime.timedelta(days=5) # Hozirgi sanani olamiz bugun = datetime.date.today() # Bugungi sanaga 5 kun qo'shamiz, natijada kelasi sana hosil bo'ladi kelasi_sana = bugun + besh_kun # Kelasi sanani ekranga chiqaramiz print(kelasi_sana) # bugun sanadan 5 kun keyingi sana chiqadi \ud83d\udccc os MODULI os moduli \u2014 bu Python kutubxonasi bo\u2018lib, u orqali operatsion tizim bilan bog\u2018liq amallarni bajarish mumkin. \u2705 NIMA UCHUN FOYDALI? Fayllar va papkalar ustida amallar bajarish (yaratish, o\u2018chirish, ko\u2018rish) Biz ishlab turgan papkani yo'lini aniqlash Papka va fayllar bilan dastur orqali interaktiv ishlash 1. os.getcwd() \ud83d\udccc Biz ishlab turgan papkani (working directory) yo\u2018lini qaytaradi. # os modulini import qilamiz, operatsion tizim bilan bog\u2018liq funksiyalar uchun kerak import os # Hozirgi ishchi papkaning (current working directory) yo\u2018lini olamiz papka = os.getcwd() # Olingan papka yo\u2018lini ekranga chiqaramiz, masalan: /home/username/projects print(papka) # Masalan: /home/username/projects 2. os.listdir(path) \ud83d\udccc Berilgan papka ichidagi barcha fayl va papkalar ro\u2018yxatini beradi. # os modulini import qilamiz, operatsion tizim bilan ishlash uchun kerak import os # Hozirgi papkadagi barcha fayl va papkalar ro'yxatini olamiz fayllar = os.listdir('.') # '.' bu hozirgi ishlab turgan papkani bildiradi # Olingan fayl va papkalar ro'yxatini ekranga chiqaramiz print(fayllar) # Masalan: ['file1.txt', 'image.png', 'folder1'] 3. os.mkdir(name) \ud83d\udccc Yangi papka yaratadi. # os modulini import qilamiz, operatsion tizim bilan ishlash uchun kerak import os # 'yangi_papka' nomli yangi papka yaratamiz (agar mavjud bo'lmasa) os.mkdir('yangi_papka') # Papka yaratilib bo\u2018lgani haqida xabar beramiz print(\"Yangi papka yaratildi\") 3. os.remove(filename) \ud83d\udccc Faylni o\u2018chiradi. # os modulini import qilamiz, fayllar va papkalar bilan ishlash uchun kerak import os # 'eskifayl.txt' nomli faylni o'chiramiz (agar mavjud bo'lsa) os.remove('old_file.txt') # Fayl muvaffaqiyatli o'chirilgani haqida xabar beramiz print(\"Fayl o'chirildi\") \ud83d\udccc json MODULI \ud83d\udccc json moduli \u2014 bu Python kutubxonasi bo\u2018lib, JSON formatidagi ma\u2019lumotlar bilan ishlash uchun ishlatiladi. JSON \u2014 bu ma\u2019lumotlarni yozish va uzatishda keng qo\u2018llaniladigan standart format. Web dasturlashda, API (Application Programming Interface) lar bilan ishlashda juda muhim. \u2705 NIMA UCHUN FOYDALI? JSON formatidagi ma\u2019lumotlarni Python obyektlariga o\u2018qish, Python obyektlarini JSON formatiga yozish, API dan kelgan JSON javoblarini qayta ishlash, Ma\u2019lumotlarni faylga JSON formatida saqlash va o\u2018qish. json.loads(s) \ud83d\udccc JSON ko\u2018rinishidagi satrni Python obyektiga (list, dictionary va boshqalar) aylantiradi. # json modulini import qilamiz, JSON formatidagi ma'lumotlarni o'qish va yozish uchun kerak import json # JSON formatidagi satrni yaratamiz (string ko'rinishida) json_satr = '{\"ism\": \"Umid\", \"yosh\": 25}' # json.loads() funksiyasi yordamida JSON stringlarni Python dictionaryga aylantiramiz python_obj = json.loads(json_satr) # Python lug'atini ekranga chiqaramiz print(python_obj) # {'ism': 'Umid', 'yosh': 25} # Dictionarydan 'ism' kalitiga mos keluvchi qiymatni chiqaramiz print(python_obj['ism']) # Umid 2. json.dumps(obj) \ud83d\udccc Python obyektini JSON formatidagi stringga aylantiradi. # json modulini import qilamiz, JSON formatiga o\u2018tkazish va o\u2018qish uchun kerak import json # Python dictionary yaratamiz python_obj = {'ism': 'Umid', 'yosh': 25} # json.dumps() yordamida Python dictionaryni JSON formatidagi stringga aylantiramiz json_satr = json.dumps(python_obj) # JSON formatidagi stringni ekranga chiqaramiz print(json_satr) # '{\"ism\": \"Umid\", \"yosh\": 25}' 3. json.load(file) \ud83d\udccc JSON faylini o\u2018qiydi va Python obyektiga aylantiradi. # json modulini import qilamiz, JSON fayllarni o'qish va yozish uchun kerak import json # 'data.json' faylini o'qish uchun ochamiz ('r' - read rejimi) with open('data.json', 'r') as fayl: # fayldagi JSON ma'lumotlarni Python obyektiga (masalan, dictionary) o\u2018qiymiz malumot = json.load(fayl) # Olingan ma'lumotni ekranga chiqaramiz print(malumot) 4. json.dump(obj, file) \ud83d\udccc Python obyektini JSON faylga yozadi. # json modulini import qilamiz, JSON formatida yozish va o'qish uchun kerak import json # Python dictionary yaratamiz, uni JSON formatida faylga yozamiz data = {'ism': 'Umid', 'yosh': 25} # 'data.json' faylini yozish uchun ochamiz ('w' - write rejimi) with open('data.json', 'w') as fayl: # Python dictionaryni JSON formatida faylga yozamiz json.dump(data, fayl) \u2705 AMALIYOT \u2705 1-topshiriq: math modulidan foydalanib, 10 ta sonning kvadrat ildizini hisoblovchi dastur yozing va natijalarni chiqaring. \u2705 2-topshiriq: random modulidan foydalanib, 1 dan 100 gacha bo\u2018lgan 5 ta tasodifiy butun sonlarni ro\u2018yxatga joylashtiring va ularni ekranga chiqaring. \u2705 3-topshiriq: datetime modulidan foydalanib, bugungi sanani va vaqtni formatlangan holda YYYY-MM-DD HH:MM:SS ko\u2018rinishida ekranga chiqaring. \u2705 4-topshiriq: O\u2018zingizning kichik modul faylingizni yarating ( mycalc.py ) va unga add(a, b) , subtract(a, b) , multiply(a, b) , divide(a, b) funksiyalarini yozing. Keyin ularni boshqa dasturga import qilib, natijalarni ko\u2018rsating. \u2705 5-topshiriq: math modulidan pi va sin funksiyalarini import qilib, 0 dan \u03c0 gacha bo\u2018lgan 5 ta qiymat uchun sinuslarini hisoblab chiqaring. \u2705 6-topshiriq: random.choice() funksiyasi yordamida ro\u2018yxatdan tasodifiy 3 ta ism tanlab, ularni ekranga chiqaring. \u2705 7-topshiriq: random.shuffle() yordamida berilgan ro\u2018yxat elementlarini aralashtiring va natijani chop eting. \u2705 8-topshiriq: datetime modulidan foydalanib, foydalanuvchidan yil, oy, kun kiritishini so\u2018rang va shu sanani datetime.date obyekti sifatida saqlang. \u2705 9-topshiriq: Yangi modul yarating, unga greet(name) funksiyasini yozing, u berilgan ismga salom beradi. Modulni import qilib, turli ismlar bilan chaqiring. \u2705 10-topshiriq: math modulining ceil va floor funksiyalarini import qilib, foydalanuvchi kiritgan haqiqiy son uchun ikkala qiymatni ham chiqaring. \u2705 11-topshiriq: O\u2018z modulingizda yangi funksiya yarating \u2014 is_even(number) \u2014 son juft yoki toqligini tekshiradi va True yoki False qaytaradi. Modulni import qilib, ro\u2018yxatdagi sonlarni tekshiring. \u2705 12-topshiriq: random modulidan foydalanib, 52 ta kartadan iborat ro\u2018yxat yarating (masalan: \"Queen of Hearts\", \"10 of Diamonds\", va hokazo), keyin tasodifiy 5 ta kartani tanlab chiqaring. (Diamonds, Hearts, Clubs, Spades) \u2705 13-topshiriq: datetime modulidan hozirgi vaqtni olib, uni soat, daqiqa va sekundga ajratib chiqaradigan dastur yozing. \u2705 14-topshiriq: Modulga yangi funksiyalar qo\u2018shing: factorial(n) va is_prime(n) , ularni o\u2018zingiz yozing (modulda) va keyin asosiy dasturda chaqiring. \u2705 15-topshiriq: math modulidan pow funksiyasini import qilib, foydalanuvchidan asosi va darajani qabul qilib, natijani hisoblang.","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/modules/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/modules/#13-dars-moduls","text":"","title":"\ud83e\udde9 13-DARS MODULS"},{"location":"python/modules/#modul-nima","text":"\ud83d\udccc Modul \u2014 bu Python fayli bo\u2018lib, u ichida funksiyalar , classlar , o\u2018zgaruvchilar , yoki boshqa Python kodlari saqlanadi. \ud83d\udccc Modulning asosiy vazifasi \u2014 kodni bo\u2018laklarga ajratish, tartibli saqlash va boshqa joylarda qayta ishlatish imkonini berish.","title":"\u2705 MODUL NIMA?"},{"location":"python/modules/#modul-kerakmi-nima-foyda","text":"\ud83d\udccc Quyidagi sabablarga ko\u2018ra modul foydali: Kod takrorlanmasligi \u2014 bir marta yozilgan kodni istalgan joyda qayta ishlatish mumkin. Kodlarni guruhlash \u2014 o\u2018xshash funksiyalar bitta faylga to\u2018plansa, ularni boshqarish oson bo\u2018ladi. Katta dasturlarni boshqarish osonlashadi \u2014 har bir qism alohida modul bo\u2018lsa, tuzilma soddalashadi. Test qilish oson \u2014 modulni alohida sinab ko\u2018rish mumkin.","title":"\u2705 MODUL KERAKMI? NIMA FOYDA?"},{"location":"python/modules/#modullarni-import-qilish","text":"\ud83d\udccc Pythonda modullardan foydalanish uchun avvalo ularni import qilish kerak. Modullarni import qilish uchun import kalit so'zidan foydalaniladi. # Dasturga tashqi yoki ichki modulni ulash (import qilish) uchun ishlatiladi # 'modul_nomi' o\u2018rniga kerakli modul nomi yoziladi (masalan: math, random, datetime va h.k.) import modul_nomi \ud83d\udccc math modulini import qilish # 'math' modulini import qilamiz, bu modulda matematik funksiyalar mavjud import math # Aylananing radiusi 5 ga teng deb belgilaymiz radius = 5 # Aylana yuzini hisoblaymiz: \u03c0 * r^2 formulasi asosida yuza = math.pi * radius**2 # Hisoblangan aylana yuzini ekranga chiqaramiz print(f\"Aylana yuzi: {yuza}\")","title":"\u2705 MODULLARNI import QILISH"},{"location":"python/modules/#modullardan-muayyan-qismlarni-import-qilish","text":"\ud83d\udccc from modul_nomi import funksiya_yoki_object sintaksisi yordamida siz ma'lum bir moduldan faqat kerakli funksiya yoki o'zgaruvchini import qilishingiz mumkin. Bu sizga modulni to'liq import qilmasdan, faqat zaruriy qismlarini olish imkonini beradi. # Belgilangan modul ichidan faqat kerakli funksiya yoki obyektni import qilish uchun ishlatiladi # 'modul_nomi' \u2013 bu modul nomi (masalan: math, random, datetime) # 'funksiya_yoki_object' \u2013 modul ichidagi aniq bir funksiya, klass yoki o\u2018zgaruvchi nomi from modul_nomi import funksiya_yoki_object \ud83d\udccc math modulidan sqrt funksiyasini import qilish # 'math' modulidan faqat 'sqrt' (kvadrat ildiz) funksiyasini import qilamiz from math import sqrt # Kvadrat ildizi olinadigan sonni belgilaymiz son = 16 # Berilgan sonning kvadrat ildizini hisoblaymiz ildiz = sqrt(son) # Natijani ekranga chiqaramiz print(f\"{son} ning kvadrat ildizi: {ildiz}\")","title":"\u2705 MODULLARDAN MUAYYAN QISMLARNI IMPORT QILISH"},{"location":"python/modules/#modulga-boshqa-nom-berish","text":"\ud83d\udccc Modulni import qilishda unga qisqa yoki qulayroq nom berish uchun as operatoridan foydalanishingiz mumkin. # 'math' modulini 'm' degan qisqa nom bilan import qilamiz import math as m # Aylananing radiusini belgilaymiz radius = 7 # Aylananing diametrini hisoblaymiz: D = 2 * \u03c0 * r formulasi bo\u2018yicha diametr = 2 * m.pi * radius # Hisoblangan diametrni ekranga chiqaramiz print(f\"Aylananing diametri: {diametr}\")","title":"\u2705 MODULGA BOSHQA NOM BERISH"},{"location":"python/modules/#modul-yaratish","text":"\ud83d\udccc Modul yaratish uchun asosiy dasturimizdagi funksiyalarni yangi faylga ko'chiramiz xolos. Modulga oson murojat qilishimiz uchun, faylimiz asosiy dasturimiz bilan bitta papkada bo'lishi kerak. Bunda adashib ketmaslik uchun, loyihangizning(dasturning) asosiy faylini main.py deb nomlash o'rinli. # mymodule.py - Bu modulda funksiyalar va klasslar jamlangan # Salomlashish uchun funksiya def greet(name): \"\"\"Salomlashish funktsiyasi.\"\"\" return f\"Salom, {name}!\" # Ikki sonni qo\u2018shish funksiyasi def add(a, b): \"\"\"Ikki sonni qo'shish funktsiyasi.\"\"\" return a + b # Ikki sonni ko\u2018paytirish funksiyasi def multiply(a, b): \"\"\"Ikki sonni ko'paytirish funktsiyasi.\"\"\" return a * b # Shaxslarni ifodalovchi klass class Person: \"\"\"Shaxs klassi.\"\"\" # Klassni ishga tushiruvchi konstruktor def __init__(self, name, age): self.name = name self.age = age # Shaxs haqida tanishtiruvchi metod def introduce(self): \"\"\"Shaxsni tanishtiruvchi metod.\"\"\" return f\"Men {self.name} va {self.age} yoshdaman.\"","title":"\u2705 MODUL YARATISH"},{"location":"python/modules/#moduldan-foydalanish","text":"\ud83d\udccc Modul yaratganingizdan so'ng, uni boshqa Python dasturlarida import qilib ishlatishingiz mumkin. # mymodule modulini import qilamiz, undagi funksiyalar va klasslardan foydalanish uchun import mymodule # greet funksiyasini chaqirib, \"Ali\" ga salom beramiz print(mymodule.greet(\"Ali\")) # add funksiyasi yordamida 5 va 3 sonlarini qo\u2018shamiz va natijani chiqaramiz print(mymodule.add(5, 3)) # multiply funksiyasi yordamida 4 va 7 sonlarini ko\u2018paytiramiz va natijani chiqaramiz print(mymodule.multiply(4, 7)) # Person klassidan yangi obyekt yaratamiz, ism va yoshni beramiz person = mymodule.Person(\"Omar\", 25) # obyektning introduce metodini chaqirib, tanishtirish matnini chiqaramiz print(person.introduce())","title":"\u2705MODULDAN FOYDALANISH"},{"location":"python/modules/#modulni-kengaytirish","text":"\ud83d\udccc Modulga qo'shimcha funksiyalar yoki klasslar qo'shishingiz mumkin. # Ikki sondan birini ayirish funksiyasi def subtract(a, b): \"\"\"Ikki sondan birini ayirish funktsiyasi.\"\"\" return a - b # Ikki sonni bo'lish funksiyasi def divide(a, b): \"\"\"Ikki sonni bo'lish funktsiyasi.\"\"\" if b == 0: # Agar bo\u2018luvchi 0 bo\u2018lsa, xatolik chiqaramiz raise ValueError(\"Bo'lish uchun 0 bilan bo'lish mumkin emas!\") return a / b","title":"\u2705 MODULNI KENGAYTIRISH"},{"location":"python/modules/#foydali-modullar","text":"","title":"\u2705 FOYDALI MODULLAR"},{"location":"python/modules/#math-moduli","text":"","title":"\ud83d\udccc math MODULI"},{"location":"python/modules/#nima-uchun-foydali","text":"Matematik hisob-kitoblarni oson va aniq bajarish uchun kerak. Kvadrat ildiz, logarifm, trigonometrik funksiyalar, faktoriyal kabi ko\u2018plab matematik operatsiyalarni bajarish imkonini beradi. Dasturlashda murakkab matematik formulalarni ishlatishda yordam beradi.","title":"\u2705 NIMA UCHUN FOYDALI?"},{"location":"python/modules/#1-mathceilx","text":"\ud83d\udccc x sonini yuqoriga qarab yaxlitlaydi. Ya'ni, agar son butun emas bo\u2018lsa, keyingi eng yaqin butun songa oshiradi. Agar son butun bo\u2018lsa, o\u2018zi o\u2018zgarmaydi. # 'math' modulini import qilamiz import math # 5.1 sonini yuqoriga qarab butun songa yaxlitlaymiz (ceil funksiyasi) print(math.ceil(5.1)) # Natija: 6 # 5.9 sonini yuqoriga qarab butun songa yaxlitlaymiz print(math.ceil(5.9)) # Natija: 6 # Manfiy -3.4 sonini yuqoriga qarab yaxlitlaymiz (-3.4 dan katta eng kichik butun son -3) print(math.ceil(-3.4)) # Natija: -3 # 7 allaqachon butun son, shuning uchun o\u2018zgarmaydi print(math.ceil(7)) # Natija: 7","title":"1. math.ceil(x)"},{"location":"python/modules/#2-mathfloorx","text":"\ud83d\udccc x sonini pastga qarab yaxlitlaydi. Ya'ni, agar son butun emas bo\u2018lsa, oldingi eng yaqin butun songa tushiradi. Agar son butun bo\u2018lsa, o\u2018zi o\u2018zgarmaydi. # 'math' modulini import qilamiz import math # 5.9 sonini pastga qarab butun songa yaxlitlaymiz (floor funksiyasi) print(math.floor(5.9)) # Natija: 5 # 5.1 sonini pastga qarab butun songa yaxlitlaymiz print(math.floor(5.1)) # Natija: 5 # Manfiy -3.4 sonini pastga qarab yaxlitlaymiz (-3.4 dan kichik eng katta butun son -4) print(math.floor(-3.4)) # Natija: -4 # 7 allaqachon butun son, shuning uchun o\u2018zgarmaydi print(math.floor(7)) # Natija: 7","title":"2. math.floor(x)"},{"location":"python/modules/#random-moduli","text":"\ud83d\udccc random moduli \u2014 bu Python kutubxonasi bo\u2018lib, u yordamida tasodifiy sonlar, tasodifiy elementlar tanlash va ro\u2018yxatlarni aralashtirish mumkin.","title":"random MODULI"},{"location":"python/modules/#nima-uchun-foydali_1","text":"O'yinlarda qahramonlar yoki voqealar uchun tasodifiylik yaratish uchun, Testlarda tasodifiy savollar tanlash uchun, Statistik tadqiqotlarda namuna olish uchun ishlatiladi. Shuningdek, har xil dasturlarda tasodifiy natijalar yaratishda qo\u2018llaniladi.","title":"\u2705 NIMA UCHUN FOYDALI?"},{"location":"python/modules/#1-randomrandinta-b","text":"\ud83d\udccc a va b orasidagi tasodifiy butun sonni qaytaradi (a va b ham shu oraliqqa kiradi). # random modulini import qilamiz, bu modul tasodifiy sonlar bilan ishlash uchun kerak import random # 1 dan 10 gacha (ikkala chegarani ham qo'shib) tasodifiy butun son hosil qilamiz son = random.randint(1, 10) # Hosil qilingan tasodifiy sonni ekranga chiqaramiz print(son) # 1 dan 10 gacha bo'lgan butun son (masalan, 3, 7, 10 va hokazo)","title":"1. random.randint(a, b)"},{"location":"python/modules/#2-randomchoicesequence","text":"\ud83d\udccc Berilgan ketma-ketlik (list, string yoki boshqa iterable) ichidan tasodifiy bitta elementni tanlaydi. # random modulini import qilamiz, tasodifiy element tanlash uchun kerak bo\u2018ladi import random # Mevalar ro\u2018yxatini yaratamiz mevalar = ['olma', 'banan', 'anor', 'shaftoli'] # Ro\u2018yxatdan tasodifiy bitta meva tanlaymiz tasodifiy_meva = random.choice(mevalar) # Tanlangan mevaning nomini ekranga chiqaramiz print(tasodifiy_meva) # masalan, 'anor' yoki 'banan' chiqishi mumkin","title":"2. random.choice(sequence)"},{"location":"python/modules/#3-randomshufflelist","text":"\ud83d\udccc List elementlarini joyini tasodifiy tarzda almashtiradi (listni o\u2018zgartiradi). # random modulini import qilamiz, ro'yxat elementlarini aralashtirish uchun kerak import random # Raqamlar ro'yxatini yaratamiz raqamlar = [1, 2, 3, 4, 5] # Ro'yxatdagi elementlarni tasodifiy tartibda aralashtiramiz random.shuffle(raqamlar) # Aralashtirilgan ro'yxatni ekranga chiqaramiz print(raqamlar) # ro'yxat elementlari aralashadi, masalan, [3, 1, 5, 2, 4]","title":"3. random.shuffle(list)"},{"location":"python/modules/#datetime-moduli","text":"\ud83d\udccc datetime moduli - Python kutubxonasi bo\u2018lib, sana va vaqt bilan ishlash uchun ishlatiladi.","title":"datetime MODULI"},{"location":"python/modules/#nima-uchun-foydali_2","text":"Vaqtni hisoblash (masalan, ikki sana orasidagi farqni topish) Hozirgi vaqtni olish Sanalarni formatlash va ko\u2018rsatish Muddatlarni qo\u2018shish yoki ayirish.","title":"\u2705 NIMA UCHUN FOYDALI?"},{"location":"python/modules/#1-datetimedatetoday","text":"\ud83d\udccc Hozirgi kundagi sanani qaytaradi (faqat sana, vaqt emas). # datetime modulini import qilamiz, vaqt va sana bilan ishlash uchun kerak import datetime # Hozirgi sanani olish uchun today() funksiyasidan foydalanamiz bugun = datetime.date.today() # Olingan sanani ekranga chiqaramiz, masalan: 2025-06-06 print(bugun) # masalan, 2025-06-06","title":"1. datetime.date.today()"},{"location":"python/modules/#2-datetimedatetimenow","text":"\ud83d\udccc Hozirgi sanani va vaqtni to\u2018liq qaytaradi (soat, daqiqa, soniya bilan). # datetime modulini import qilamiz, sana va vaqt bilan ishlash uchun kerak import datetime # Hozirgi sana va vaqtni olish uchun now() funksiyasidan foydalanamiz hozir = datetime.datetime.now() # Olingan sana va vaqtni ekranga chiqaramiz, masalan: 2025-06-06 15:30:25.123456 print(hozir) # masalan, 2025-06-06 15:30:25.123456","title":"2. datetime.datetime.now()"},{"location":"python/modules/#3-datetimetimedeltadays5","text":"\ud83d\udccc Vaqt oralig\u2018ini ifodalaydi. Masalan, 5 kun yoki 2 soat kabilarni yaratadi. # datetime modulini import qilamiz, sana va vaqt bilan ishlash uchun kerak import datetime # timedelta obyektini yaratamiz, bu 5 kunlik vaqt farqini ifodalaydi besh_kun = datetime.timedelta(days=5) # Hozirgi sanani olamiz bugun = datetime.date.today() # Bugungi sanaga 5 kun qo'shamiz, natijada kelasi sana hosil bo'ladi kelasi_sana = bugun + besh_kun # Kelasi sanani ekranga chiqaramiz print(kelasi_sana) # bugun sanadan 5 kun keyingi sana chiqadi","title":"3. datetime.timedelta(days=5)"},{"location":"python/modules/#os-moduli","text":"os moduli \u2014 bu Python kutubxonasi bo\u2018lib, u orqali operatsion tizim bilan bog\u2018liq amallarni bajarish mumkin.","title":"\ud83d\udccc os MODULI"},{"location":"python/modules/#nima-uchun-foydali_3","text":"Fayllar va papkalar ustida amallar bajarish (yaratish, o\u2018chirish, ko\u2018rish) Biz ishlab turgan papkani yo'lini aniqlash Papka va fayllar bilan dastur orqali interaktiv ishlash","title":"\u2705 NIMA UCHUN FOYDALI?"},{"location":"python/modules/#1-osgetcwd","text":"\ud83d\udccc Biz ishlab turgan papkani (working directory) yo\u2018lini qaytaradi. # os modulini import qilamiz, operatsion tizim bilan bog\u2018liq funksiyalar uchun kerak import os # Hozirgi ishchi papkaning (current working directory) yo\u2018lini olamiz papka = os.getcwd() # Olingan papka yo\u2018lini ekranga chiqaramiz, masalan: /home/username/projects print(papka) # Masalan: /home/username/projects","title":"1. os.getcwd()"},{"location":"python/modules/#2-oslistdirpath","text":"\ud83d\udccc Berilgan papka ichidagi barcha fayl va papkalar ro\u2018yxatini beradi. # os modulini import qilamiz, operatsion tizim bilan ishlash uchun kerak import os # Hozirgi papkadagi barcha fayl va papkalar ro'yxatini olamiz fayllar = os.listdir('.') # '.' bu hozirgi ishlab turgan papkani bildiradi # Olingan fayl va papkalar ro'yxatini ekranga chiqaramiz print(fayllar) # Masalan: ['file1.txt', 'image.png', 'folder1']","title":"2. os.listdir(path)"},{"location":"python/modules/#3-osmkdirname","text":"\ud83d\udccc Yangi papka yaratadi. # os modulini import qilamiz, operatsion tizim bilan ishlash uchun kerak import os # 'yangi_papka' nomli yangi papka yaratamiz (agar mavjud bo'lmasa) os.mkdir('yangi_papka') # Papka yaratilib bo\u2018lgani haqida xabar beramiz print(\"Yangi papka yaratildi\")","title":"3. os.mkdir(name)"},{"location":"python/modules/#3-osremovefilename","text":"\ud83d\udccc Faylni o\u2018chiradi. # os modulini import qilamiz, fayllar va papkalar bilan ishlash uchun kerak import os # 'eskifayl.txt' nomli faylni o'chiramiz (agar mavjud bo'lsa) os.remove('old_file.txt') # Fayl muvaffaqiyatli o'chirilgani haqida xabar beramiz print(\"Fayl o'chirildi\")","title":"3. os.remove(filename)"},{"location":"python/modules/#json-moduli","text":"\ud83d\udccc json moduli \u2014 bu Python kutubxonasi bo\u2018lib, JSON formatidagi ma\u2019lumotlar bilan ishlash uchun ishlatiladi. JSON \u2014 bu ma\u2019lumotlarni yozish va uzatishda keng qo\u2018llaniladigan standart format. Web dasturlashda, API (Application Programming Interface) lar bilan ishlashda juda muhim.","title":"\ud83d\udccc json MODULI"},{"location":"python/modules/#nima-uchun-foydali_4","text":"JSON formatidagi ma\u2019lumotlarni Python obyektlariga o\u2018qish, Python obyektlarini JSON formatiga yozish, API dan kelgan JSON javoblarini qayta ishlash, Ma\u2019lumotlarni faylga JSON formatida saqlash va o\u2018qish.","title":"\u2705 NIMA UCHUN FOYDALI?"},{"location":"python/modules/#jsonloadss","text":"\ud83d\udccc JSON ko\u2018rinishidagi satrni Python obyektiga (list, dictionary va boshqalar) aylantiradi. # json modulini import qilamiz, JSON formatidagi ma'lumotlarni o'qish va yozish uchun kerak import json # JSON formatidagi satrni yaratamiz (string ko'rinishida) json_satr = '{\"ism\": \"Umid\", \"yosh\": 25}' # json.loads() funksiyasi yordamida JSON stringlarni Python dictionaryga aylantiramiz python_obj = json.loads(json_satr) # Python lug'atini ekranga chiqaramiz print(python_obj) # {'ism': 'Umid', 'yosh': 25} # Dictionarydan 'ism' kalitiga mos keluvchi qiymatni chiqaramiz print(python_obj['ism']) # Umid","title":"json.loads(s)"},{"location":"python/modules/#2-jsondumpsobj","text":"\ud83d\udccc Python obyektini JSON formatidagi stringga aylantiradi. # json modulini import qilamiz, JSON formatiga o\u2018tkazish va o\u2018qish uchun kerak import json # Python dictionary yaratamiz python_obj = {'ism': 'Umid', 'yosh': 25} # json.dumps() yordamida Python dictionaryni JSON formatidagi stringga aylantiramiz json_satr = json.dumps(python_obj) # JSON formatidagi stringni ekranga chiqaramiz print(json_satr) # '{\"ism\": \"Umid\", \"yosh\": 25}'","title":"2. json.dumps(obj)"},{"location":"python/modules/#3-jsonloadfile","text":"\ud83d\udccc JSON faylini o\u2018qiydi va Python obyektiga aylantiradi. # json modulini import qilamiz, JSON fayllarni o'qish va yozish uchun kerak import json # 'data.json' faylini o'qish uchun ochamiz ('r' - read rejimi) with open('data.json', 'r') as fayl: # fayldagi JSON ma'lumotlarni Python obyektiga (masalan, dictionary) o\u2018qiymiz malumot = json.load(fayl) # Olingan ma'lumotni ekranga chiqaramiz print(malumot)","title":"3. json.load(file)"},{"location":"python/modules/#4-jsondumpobj-file","text":"\ud83d\udccc Python obyektini JSON faylga yozadi. # json modulini import qilamiz, JSON formatida yozish va o'qish uchun kerak import json # Python dictionary yaratamiz, uni JSON formatida faylga yozamiz data = {'ism': 'Umid', 'yosh': 25} # 'data.json' faylini yozish uchun ochamiz ('w' - write rejimi) with open('data.json', 'w') as fayl: # Python dictionaryni JSON formatida faylga yozamiz json.dump(data, fayl)","title":"4. json.dump(obj, file)"},{"location":"python/modules/#amaliyot","text":"","title":"\u2705 AMALIYOT"},{"location":"python/modules/#1-topshiriq","text":"math modulidan foydalanib, 10 ta sonning kvadrat ildizini hisoblovchi dastur yozing va natijalarni chiqaring.","title":"\u2705 1-topshiriq:"},{"location":"python/modules/#2-topshiriq","text":"random modulidan foydalanib, 1 dan 100 gacha bo\u2018lgan 5 ta tasodifiy butun sonlarni ro\u2018yxatga joylashtiring va ularni ekranga chiqaring.","title":"\u2705 2-topshiriq:"},{"location":"python/modules/#3-topshiriq","text":"datetime modulidan foydalanib, bugungi sanani va vaqtni formatlangan holda YYYY-MM-DD HH:MM:SS ko\u2018rinishida ekranga chiqaring.","title":"\u2705 3-topshiriq:"},{"location":"python/modules/#4-topshiriq","text":"O\u2018zingizning kichik modul faylingizni yarating ( mycalc.py ) va unga add(a, b) , subtract(a, b) , multiply(a, b) , divide(a, b) funksiyalarini yozing. Keyin ularni boshqa dasturga import qilib, natijalarni ko\u2018rsating.","title":"\u2705 4-topshiriq:"},{"location":"python/modules/#5-topshiriq","text":"math modulidan pi va sin funksiyalarini import qilib, 0 dan \u03c0 gacha bo\u2018lgan 5 ta qiymat uchun sinuslarini hisoblab chiqaring.","title":"\u2705 5-topshiriq:"},{"location":"python/modules/#6-topshiriq","text":"random.choice() funksiyasi yordamida ro\u2018yxatdan tasodifiy 3 ta ism tanlab, ularni ekranga chiqaring.","title":"\u2705 6-topshiriq:"},{"location":"python/modules/#7-topshiriq","text":"random.shuffle() yordamida berilgan ro\u2018yxat elementlarini aralashtiring va natijani chop eting.","title":"\u2705 7-topshiriq:"},{"location":"python/modules/#8-topshiriq","text":"datetime modulidan foydalanib, foydalanuvchidan yil, oy, kun kiritishini so\u2018rang va shu sanani datetime.date obyekti sifatida saqlang.","title":"\u2705 8-topshiriq:"},{"location":"python/modules/#9-topshiriq","text":"Yangi modul yarating, unga greet(name) funksiyasini yozing, u berilgan ismga salom beradi. Modulni import qilib, turli ismlar bilan chaqiring.","title":"\u2705 9-topshiriq:"},{"location":"python/modules/#10-topshiriq","text":"math modulining ceil va floor funksiyalarini import qilib, foydalanuvchi kiritgan haqiqiy son uchun ikkala qiymatni ham chiqaring.","title":"\u2705 10-topshiriq:"},{"location":"python/modules/#11-topshiriq","text":"O\u2018z modulingizda yangi funksiya yarating \u2014 is_even(number) \u2014 son juft yoki toqligini tekshiradi va True yoki False qaytaradi. Modulni import qilib, ro\u2018yxatdagi sonlarni tekshiring.","title":"\u2705 11-topshiriq:"},{"location":"python/modules/#12-topshiriq","text":"random modulidan foydalanib, 52 ta kartadan iborat ro\u2018yxat yarating (masalan: \"Queen of Hearts\", \"10 of Diamonds\", va hokazo), keyin tasodifiy 5 ta kartani tanlab chiqaring. (Diamonds, Hearts, Clubs, Spades)","title":"\u2705 12-topshiriq:"},{"location":"python/modules/#13-topshiriq","text":"datetime modulidan hozirgi vaqtni olib, uni soat, daqiqa va sekundga ajratib chiqaradigan dastur yozing.","title":"\u2705 13-topshiriq:"},{"location":"python/modules/#14-topshiriq","text":"Modulga yangi funksiyalar qo\u2018shing: factorial(n) va is_prime(n) , ularni o\u2018zingiz yozing (modulda) va keyin asosiy dasturda chaqiring.","title":"\u2705 14-topshiriq:"},{"location":"python/modules/#15-topshiriq","text":"math modulidan pow funksiyasini import qilib, foydalanuvchidan asosi va darajani qabul qilib, natijani hisoblang.","title":"\u2705 15-topshiriq:"},{"location":"python/moduls/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 13-DARS MODULS \u2705 MODUL NIMA? \ud83d\udccc Modul \u2014 bu Python fayli bo\u2018lib, u ichida funksiyalar , classlar , o\u2018zgaruvchilar , yoki boshqa Python kodlari saqlanadi. \ud83d\udccc Modulning asosiy vazifasi \u2014 kodni bo\u2018laklarga ajratish, tartibli saqlash va boshqa joylarda qayta ishlatish imkonini berish. \u2705 MODUL KERAKMI? NIMA FOYDA? \ud83d\udccc Quyidagi sabablarga ko\u2018ra modul foydali: Kod takrorlanmasligi \u2014 bir marta yozilgan kodni istalgan joyda qayta ishlatish mumkin. Kodlarni guruhlash \u2014 o\u2018xshash funksiyalar bitta faylga to\u2018plansa, ularni boshqarish oson bo\u2018ladi. Katta dasturlarni boshqarish osonlashadi \u2014 har bir qism alohida modul bo\u2018lsa, tuzilma soddalashadi. Test qilish oson \u2014 modulni alohida sinab ko\u2018rish mumkin. \u2705 MODULLARNI import QILISH \ud83d\udccc Pythonda modullardan foydalanish uchun avvalo ularni import qilish kerak. Modullarni import qilish uchun import kalit so'zidan foydalaniladi. # Dasturga tashqi yoki ichki modulni ulash (import qilish) uchun ishlatiladi # 'modul_nomi' o\u2018rniga kerakli modul nomi yoziladi (masalan: math, random, datetime va h.k.) import modul_nomi \ud83d\udccc math modulini import qilish # 'math' modulini import qilamiz, bu modulda matematik funksiyalar mavjud import math # Aylananing radiusi 5 ga teng deb belgilaymiz radius = 5 # Aylana yuzini hisoblaymiz: \u03c0 * r^2 formulasi asosida yuza = math.pi * radius**2 # Hisoblangan aylana yuzini ekranga chiqaramiz print(f\"Aylana yuzi: {yuza}\") \u2705 MODULLARDAN MUAYYAN QISMLARNI IMPORT QILISH \ud83d\udccc from modul_nomi import funksiya_yoki_object sintaksisi yordamida siz ma'lum bir moduldan faqat kerakli funksiya yoki o'zgaruvchini import qilishingiz mumkin. Bu sizga modulni to'liq import qilmasdan, faqat zaruriy qismlarini olish imkonini beradi. # Belgilangan modul ichidan faqat kerakli funksiya yoki obyektni import qilish uchun ishlatiladi # 'modul_nomi' \u2013 bu modul nomi (masalan: math, random, datetime) # 'funksiya_yoki_object' \u2013 modul ichidagi aniq bir funksiya, klass yoki o\u2018zgaruvchi nomi from modul_nomi import funksiya_yoki_object \ud83d\udccc math modulidan sqrt funksiyasini import qilish # 'math' modulidan faqat 'sqrt' (kvadrat ildiz) funksiyasini import qilamiz from math import sqrt # Kvadrat ildizi olinadigan sonni belgilaymiz son = 16 # Berilgan sonning kvadrat ildizini hisoblaymiz ildiz = sqrt(son) # Natijani ekranga chiqaramiz print(f\"{son} ning kvadrat ildizi: {ildiz}\") \u2705 MODULGA BOSHQA NOM BERISH \ud83d\udccc Modulni import qilishda unga qisqa yoki qulayroq nom berish uchun as operatoridan foydalanishingiz mumkin. # 'math' modulini 'm' degan qisqa nom bilan import qilamiz import math as m # Aylananing radiusini belgilaymiz radius = 7 # Aylananing diametrini hisoblaymiz: D = 2 * \u03c0 * r formulasi bo\u2018yicha diametr = 2 * m.pi * radius # Hisoblangan diametrni ekranga chiqaramiz print(f\"Aylananing diametri: {diametr}\") \u2705 MODUL YARATISH \ud83d\udccc Modul yaratish uchun asosiy dasturimizdagi funksiyalarni yangi faylga ko'chiramiz xolos. Modulga oson murojat qilishimiz uchun, faylimiz asosiy dasturimiz bilan bitta papkada bo'lishi kerak. Bunda adashib ketmaslik uchun, loyihangizning(dasturning) asosiy faylini main.py deb nomlash o'rinli. # mymodule.py - Bu modulda funksiyalar va klasslar jamlangan # Salomlashish uchun funksiya def greet(name): \"\"\"Salomlashish funktsiyasi.\"\"\" return f\"Salom, {name}!\" # Ikki sonni qo\u2018shish funksiyasi def add(a, b): \"\"\"Ikki sonni qo'shish funktsiyasi.\"\"\" return a + b # Ikki sonni ko\u2018paytirish funksiyasi def multiply(a, b): \"\"\"Ikki sonni ko'paytirish funktsiyasi.\"\"\" return a * b # Shaxslarni ifodalovchi klass class Person: \"\"\"Shaxs klassi.\"\"\" # Klassni ishga tushiruvchi konstruktor def __init__(self, name, age): self.name = name self.age = age # Shaxs haqida tanishtiruvchi metod def introduce(self): \"\"\"Shaxsni tanishtiruvchi metod.\"\"\" return f\"Men {self.name} va {self.age} yoshdaman.\" \u2705MODULDAN FOYDALANISH \ud83d\udccc Modul yaratganingizdan so'ng, uni boshqa Python dasturlarida import qilib ishlatishingiz mumkin. # mymodule modulini import qilamiz, undagi funksiyalar va klasslardan foydalanish uchun import mymodule # greet funksiyasini chaqirib, \"Ali\" ga salom beramiz print(mymodule.greet(\"Ali\")) # add funksiyasi yordamida 5 va 3 sonlarini qo\u2018shamiz va natijani chiqaramiz print(mymodule.add(5, 3)) # multiply funksiyasi yordamida 4 va 7 sonlarini ko\u2018paytiramiz va natijani chiqaramiz print(mymodule.multiply(4, 7)) # Person klassidan yangi obyekt yaratamiz, ism va yoshni beramiz person = mymodule.Person(\"Omar\", 25) # obyektning introduce metodini chaqirib, tanishtirish matnini chiqaramiz print(person.introduce()) \u2705 MODULNI KENGAYTIRISH \ud83d\udccc Modulga qo'shimcha funksiyalar yoki klasslar qo'shishingiz mumkin. # Ikki sondan birini ayirish funksiyasi def subtract(a, b): \"\"\"Ikki sondan birini ayirish funktsiyasi.\"\"\" return a - b # Ikki sonni bo'lish funksiyasi def divide(a, b): \"\"\"Ikki sonni bo'lish funktsiyasi.\"\"\" if b == 0: # Agar bo\u2018luvchi 0 bo\u2018lsa, xatolik chiqaramiz raise ValueError(\"Bo'lish uchun 0 bilan bo'lish mumkin emas!\") return a / b \u2705 FOYDALI MODULLAR \ud83d\udccc math MODULI \u2705 NIMA UCHUN FOYDALI? Matematik hisob-kitoblarni oson va aniq bajarish uchun kerak. Kvadrat ildiz, logarifm, trigonometrik funksiyalar, faktoriyal kabi ko\u2018plab matematik operatsiyalarni bajarish imkonini beradi. Dasturlashda murakkab matematik formulalarni ishlatishda yordam beradi. 1. math.ceil(x) \ud83d\udccc x sonini yuqoriga qarab yaxlitlaydi. Ya'ni, agar son butun emas bo\u2018lsa, keyingi eng yaqin butun songa oshiradi. Agar son butun bo\u2018lsa, o\u2018zi o\u2018zgarmaydi. # 'math' modulini import qilamiz import math # 5.1 sonini yuqoriga qarab butun songa yaxlitlaymiz (ceil funksiyasi) print(math.ceil(5.1)) # Natija: 6 # 5.9 sonini yuqoriga qarab butun songa yaxlitlaymiz print(math.ceil(5.9)) # Natija: 6 # Manfiy -3.4 sonini yuqoriga qarab yaxlitlaymiz (-3.4 dan katta eng kichik butun son -3) print(math.ceil(-3.4)) # Natija: -3 # 7 allaqachon butun son, shuning uchun o\u2018zgarmaydi print(math.ceil(7)) # Natija: 7 2. math.floor(x) \ud83d\udccc x sonini pastga qarab yaxlitlaydi. Ya'ni, agar son butun emas bo\u2018lsa, oldingi eng yaqin butun songa tushiradi. Agar son butun bo\u2018lsa, o\u2018zi o\u2018zgarmaydi. # 'math' modulini import qilamiz import math # 5.9 sonini pastga qarab butun songa yaxlitlaymiz (floor funksiyasi) print(math.floor(5.9)) # Natija: 5 # 5.1 sonini pastga qarab butun songa yaxlitlaymiz print(math.floor(5.1)) # Natija: 5 # Manfiy -3.4 sonini pastga qarab yaxlitlaymiz (-3.4 dan kichik eng katta butun son -4) print(math.floor(-3.4)) # Natija: -4 # 7 allaqachon butun son, shuning uchun o\u2018zgarmaydi print(math.floor(7)) # Natija: 7 random MODULI \ud83d\udccc random moduli \u2014 bu Python kutubxonasi bo\u2018lib, u yordamida tasodifiy sonlar, tasodifiy elementlar tanlash va ro\u2018yxatlarni aralashtirish mumkin. \u2705 NIMA UCHUN FOYDALI? O'yinlarda qahramonlar yoki voqealar uchun tasodifiylik yaratish uchun, Testlarda tasodifiy savollar tanlash uchun, Statistik tadqiqotlarda namuna olish uchun ishlatiladi. Shuningdek, har xil dasturlarda tasodifiy natijalar yaratishda qo\u2018llaniladi. 1. random.randint(a, b) \ud83d\udccc a va b orasidagi tasodifiy butun sonni qaytaradi (a va b ham shu oraliqqa kiradi). # random modulini import qilamiz, bu modul tasodifiy sonlar bilan ishlash uchun kerak import random # 1 dan 10 gacha (ikkala chegarani ham qo'shib) tasodifiy butun son hosil qilamiz son = random.randint(1, 10) # Hosil qilingan tasodifiy sonni ekranga chiqaramiz print(son) # 1 dan 10 gacha bo'lgan butun son (masalan, 3, 7, 10 va hokazo) 2. random.choice(sequence) \ud83d\udccc Berilgan ketma-ketlik (list, string yoki boshqa iterable) ichidan tasodifiy bitta elementni tanlaydi. # random modulini import qilamiz, tasodifiy element tanlash uchun kerak bo\u2018ladi import random # Mevalar ro\u2018yxatini yaratamiz mevalar = ['olma', 'banan', 'anor', 'shaftoli'] # Ro\u2018yxatdan tasodifiy bitta meva tanlaymiz tasodifiy_meva = random.choice(mevalar) # Tanlangan mevaning nomini ekranga chiqaramiz print(tasodifiy_meva) # masalan, 'anor' yoki 'banan' chiqishi mumkin 3. random.shuffle(list) \ud83d\udccc List elementlarini joyini tasodifiy tarzda almashtiradi (listni o\u2018zgartiradi). # random modulini import qilamiz, ro'yxat elementlarini aralashtirish uchun kerak import random # Raqamlar ro'yxatini yaratamiz raqamlar = [1, 2, 3, 4, 5] # Ro'yxatdagi elementlarni tasodifiy tartibda aralashtiramiz random.shuffle(raqamlar) # Aralashtirilgan ro'yxatni ekranga chiqaramiz print(raqamlar) # ro'yxat elementlari aralashadi, masalan, [3, 1, 5, 2, 4] datetime MODULI \ud83d\udccc datetime moduli - Python kutubxonasi bo\u2018lib, sana va vaqt bilan ishlash uchun ishlatiladi. \u2705 NIMA UCHUN FOYDALI? Vaqtni hisoblash (masalan, ikki sana orasidagi farqni topish) Hozirgi vaqtni olish Sanalarni formatlash va ko\u2018rsatish Muddatlarni qo\u2018shish yoki ayirish. 1. datetime.date.today() \ud83d\udccc Hozirgi kundagi sanani qaytaradi (faqat sana, vaqt emas). # datetime modulini import qilamiz, vaqt va sana bilan ishlash uchun kerak import datetime # Hozirgi sanani olish uchun today() funksiyasidan foydalanamiz bugun = datetime.date.today() # Olingan sanani ekranga chiqaramiz, masalan: 2025-06-06 print(bugun) # masalan, 2025-06-06 2. datetime.datetime.now() \ud83d\udccc Hozirgi sanani va vaqtni to\u2018liq qaytaradi (soat, daqiqa, soniya bilan). # datetime modulini import qilamiz, sana va vaqt bilan ishlash uchun kerak import datetime # Hozirgi sana va vaqtni olish uchun now() funksiyasidan foydalanamiz hozir = datetime.datetime.now() # Olingan sana va vaqtni ekranga chiqaramiz, masalan: 2025-06-06 15:30:25.123456 print(hozir) # masalan, 2025-06-06 15:30:25.123456 3. datetime.timedelta(days=5) \ud83d\udccc Vaqt oralig\u2018ini ifodalaydi. Masalan, 5 kun yoki 2 soat kabilarni yaratadi. # datetime modulini import qilamiz, sana va vaqt bilan ishlash uchun kerak import datetime # timedelta obyektini yaratamiz, bu 5 kunlik vaqt farqini ifodalaydi besh_kun = datetime.timedelta(days=5) # Hozirgi sanani olamiz bugun = datetime.date.today() # Bugungi sanaga 5 kun qo'shamiz, natijada kelasi sana hosil bo'ladi kelasi_sana = bugun + besh_kun # Kelasi sanani ekranga chiqaramiz print(kelasi_sana) # bugun sanadan 5 kun keyingi sana chiqadi \ud83d\udccc os MODULI os moduli \u2014 bu Python kutubxonasi bo\u2018lib, u orqali operatsion tizim bilan bog\u2018liq amallarni bajarish mumkin. \u2705 NIMA UCHUN FOYDALI? Fayllar va papkalar ustida amallar bajarish (yaratish, o\u2018chirish, ko\u2018rish) Biz ishlab turgan papkani yo'lini aniqlash Papka va fayllar bilan dastur orqali interaktiv ishlash 1. os.getcwd() \ud83d\udccc Biz ishlab turgan papkani (working directory) yo\u2018lini qaytaradi. # os modulini import qilamiz, operatsion tizim bilan bog\u2018liq funksiyalar uchun kerak import os # Hozirgi ishchi papkaning (current working directory) yo\u2018lini olamiz papka = os.getcwd() # Olingan papka yo\u2018lini ekranga chiqaramiz, masalan: /home/username/projects print(papka) # Masalan: /home/username/projects 2. os.listdir(path) \ud83d\udccc Berilgan papka ichidagi barcha fayl va papkalar ro\u2018yxatini beradi. # os modulini import qilamiz, operatsion tizim bilan ishlash uchun kerak import os # Hozirgi papkadagi barcha fayl va papkalar ro'yxatini olamiz fayllar = os.listdir('.') # '.' bu hozirgi ishlab turgan papkani bildiradi # Olingan fayl va papkalar ro'yxatini ekranga chiqaramiz print(fayllar) # Masalan: ['file1.txt', 'image.png', 'folder1'] 3. os.mkdir(name) \ud83d\udccc Yangi papka yaratadi. # os modulini import qilamiz, operatsion tizim bilan ishlash uchun kerak import os # 'yangi_papka' nomli yangi papka yaratamiz (agar mavjud bo'lmasa) os.mkdir('yangi_papka') # Papka yaratilib bo\u2018lgani haqida xabar beramiz print(\"Yangi papka yaratildi\") 3. os.remove(filename) \ud83d\udccc Faylni o\u2018chiradi. # os modulini import qilamiz, fayllar va papkalar bilan ishlash uchun kerak import os # 'eskifayl.txt' nomli faylni o'chiramiz (agar mavjud bo'lsa) os.remove('old_file.txt') # Fayl muvaffaqiyatli o'chirilgani haqida xabar beramiz print(\"Fayl o'chirildi\") \ud83d\udccc json MODULI \ud83d\udccc json moduli \u2014 bu Python kutubxonasi bo\u2018lib, JSON formatidagi ma\u2019lumotlar bilan ishlash uchun ishlatiladi. JSON \u2014 bu ma\u2019lumotlarni yozish va uzatishda keng qo\u2018llaniladigan standart format. Web dasturlashda, API (Application Programming Interface) lar bilan ishlashda juda muhim. \u2705 NIMA UCHUN FOYDALI? JSON formatidagi ma\u2019lumotlarni Python obyektlariga o\u2018qish, Python obyektlarini JSON formatiga yozish, API dan kelgan JSON javoblarini qayta ishlash, Ma\u2019lumotlarni faylga JSON formatida saqlash va o\u2018qish. json.loads(s) \ud83d\udccc JSON ko\u2018rinishidagi satrni Python obyektiga (list, dictionary va boshqalar) aylantiradi. # json modulini import qilamiz, JSON formatidagi ma'lumotlarni o'qish va yozish uchun kerak import json # JSON formatidagi satrni yaratamiz (string ko'rinishida) json_satr = '{\"ism\": \"Umid\", \"yosh\": 25}' # json.loads() funksiyasi yordamida JSON stringlarni Python dictionaryga aylantiramiz python_obj = json.loads(json_satr) # Python lug'atini ekranga chiqaramiz print(python_obj) # {'ism': 'Umid', 'yosh': 25} # Dictionarydan 'ism' kalitiga mos keluvchi qiymatni chiqaramiz print(python_obj['ism']) # Umid 2. json.dumps(obj) \ud83d\udccc Python obyektini JSON formatidagi stringga aylantiradi. # json modulini import qilamiz, JSON formatiga o\u2018tkazish va o\u2018qish uchun kerak import json # Python dictionary yaratamiz python_obj = {'ism': 'Umid', 'yosh': 25} # json.dumps() yordamida Python dictionaryni JSON formatidagi stringga aylantiramiz json_satr = json.dumps(python_obj) # JSON formatidagi stringni ekranga chiqaramiz print(json_satr) # '{\"ism\": \"Umid\", \"yosh\": 25}' 3. json.load(file) \ud83d\udccc JSON faylini o\u2018qiydi va Python obyektiga aylantiradi. # json modulini import qilamiz, JSON fayllarni o'qish va yozish uchun kerak import json # 'data.json' faylini o'qish uchun ochamiz ('r' - read rejimi) with open('data.json', 'r') as fayl: # fayldagi JSON ma'lumotlarni Python obyektiga (masalan, dictionary) o\u2018qiymiz malumot = json.load(fayl) # Olingan ma'lumotni ekranga chiqaramiz print(malumot) 4. json.dump(obj, file) \ud83d\udccc Python obyektini JSON faylga yozadi. # json modulini import qilamiz, JSON formatida yozish va o'qish uchun kerak import json # Python dictionary yaratamiz, uni JSON formatida faylga yozamiz data = {'ism': 'Umid', 'yosh': 25} # 'data.json' faylini yozish uchun ochamiz ('w' - write rejimi) with open('data.json', 'w') as fayl: # Python dictionaryni JSON formatida faylga yozamiz json.dump(data, fayl) \u2705 AMALIYOT \u2705 1-topshiriq: math modulidan foydalanib, 10 ta sonning kvadrat ildizini hisoblovchi dastur yozing va natijalarni chiqaring. \u2705 2-topshiriq: random modulidan foydalanib, 1 dan 100 gacha bo\u2018lgan 5 ta tasodifiy butun sonlarni ro\u2018yxatga joylashtiring va ularni ekranga chiqaring. \u2705 3-topshiriq: datetime modulidan foydalanib, bugungi sanani va vaqtni formatlangan holda YYYY-MM-DD HH:MM:SS ko\u2018rinishida ekranga chiqaring. \u2705 4-topshiriq: O\u2018zingizning kichik modul faylingizni yarating ( mycalc.py ) va unga add(a, b) , subtract(a, b) , multiply(a, b) , divide(a, b) funksiyalarini yozing. Keyin ularni boshqa dasturga import qilib, natijalarni ko\u2018rsating. \u2705 5-topshiriq: math modulidan pi va sin funksiyalarini import qilib, 0 dan \u03c0 gacha bo\u2018lgan 5 ta qiymat uchun sinuslarini hisoblab chiqaring. \u2705 6-topshiriq: random.choice() funksiyasi yordamida ro\u2018yxatdan tasodifiy 3 ta ism tanlab, ularni ekranga chiqaring. \u2705 7-topshiriq: random.shuffle() yordamida berilgan ro\u2018yxat elementlarini aralashtiring va natijani chop eting. \u2705 8-topshiriq: datetime modulidan foydalanib, foydalanuvchidan yil, oy, kun kiritishini so\u2018rang va shu sanani datetime.date obyekti sifatida saqlang. \u2705 9-topshiriq: Yangi modul yarating, unga greet(name) funksiyasini yozing, u berilgan ismga salom beradi. Modulni import qilib, turli ismlar bilan chaqiring. \u2705 10-topshiriq: math modulining ceil va floor funksiyalarini import qilib, foydalanuvchi kiritgan haqiqiy son uchun ikkala qiymatni ham chiqaring. \u2705 11-topshiriq: O\u2018z modulingizda yangi funksiya yarating \u2014 is_even(number) \u2014 son juft yoki toqligini tekshiradi va True yoki False qaytaradi. Modulni import qilib, ro\u2018yxatdagi sonlarni tekshiring. \u2705 12-topshiriq: random modulidan foydalanib, 52 ta kartadan iborat ro\u2018yxat yarating (masalan: \"Queen of Hearts\", \"10 of Diamonds\", va hokazo), keyin tasodifiy 5 ta kartani tanlab chiqaring. (Diamonds, Hearts, Clubs, Spades) \u2705 13-topshiriq: datetime modulidan hozirgi vaqtni olib, uni soat, daqiqa va sekundga ajratib chiqaradigan dastur yozing. \u2705 14-topshiriq: Modulga yangi funksiyalar qo\u2018shing: factorial(n) va is_prime(n) , ularni o\u2018zingiz yozing (modulda) va keyin asosiy dasturda chaqiring. \u2705 15-topshiriq: math modulidan pow funksiyasini import qilib, foydalanuvchidan asosi va darajani qabul qilib, natijani hisoblang.","title":"Moduls"},{"location":"python/moduls/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/moduls/#13-dars-moduls","text":"","title":"\ud83e\udde9 13-DARS MODULS"},{"location":"python/moduls/#modul-nima","text":"\ud83d\udccc Modul \u2014 bu Python fayli bo\u2018lib, u ichida funksiyalar , classlar , o\u2018zgaruvchilar , yoki boshqa Python kodlari saqlanadi. \ud83d\udccc Modulning asosiy vazifasi \u2014 kodni bo\u2018laklarga ajratish, tartibli saqlash va boshqa joylarda qayta ishlatish imkonini berish.","title":"\u2705 MODUL NIMA?"},{"location":"python/moduls/#modul-kerakmi-nima-foyda","text":"\ud83d\udccc Quyidagi sabablarga ko\u2018ra modul foydali: Kod takrorlanmasligi \u2014 bir marta yozilgan kodni istalgan joyda qayta ishlatish mumkin. Kodlarni guruhlash \u2014 o\u2018xshash funksiyalar bitta faylga to\u2018plansa, ularni boshqarish oson bo\u2018ladi. Katta dasturlarni boshqarish osonlashadi \u2014 har bir qism alohida modul bo\u2018lsa, tuzilma soddalashadi. Test qilish oson \u2014 modulni alohida sinab ko\u2018rish mumkin.","title":"\u2705 MODUL KERAKMI? NIMA FOYDA?"},{"location":"python/moduls/#modullarni-import-qilish","text":"\ud83d\udccc Pythonda modullardan foydalanish uchun avvalo ularni import qilish kerak. Modullarni import qilish uchun import kalit so'zidan foydalaniladi. # Dasturga tashqi yoki ichki modulni ulash (import qilish) uchun ishlatiladi # 'modul_nomi' o\u2018rniga kerakli modul nomi yoziladi (masalan: math, random, datetime va h.k.) import modul_nomi \ud83d\udccc math modulini import qilish # 'math' modulini import qilamiz, bu modulda matematik funksiyalar mavjud import math # Aylananing radiusi 5 ga teng deb belgilaymiz radius = 5 # Aylana yuzini hisoblaymiz: \u03c0 * r^2 formulasi asosida yuza = math.pi * radius**2 # Hisoblangan aylana yuzini ekranga chiqaramiz print(f\"Aylana yuzi: {yuza}\")","title":"\u2705 MODULLARNI import QILISH"},{"location":"python/moduls/#modullardan-muayyan-qismlarni-import-qilish","text":"\ud83d\udccc from modul_nomi import funksiya_yoki_object sintaksisi yordamida siz ma'lum bir moduldan faqat kerakli funksiya yoki o'zgaruvchini import qilishingiz mumkin. Bu sizga modulni to'liq import qilmasdan, faqat zaruriy qismlarini olish imkonini beradi. # Belgilangan modul ichidan faqat kerakli funksiya yoki obyektni import qilish uchun ishlatiladi # 'modul_nomi' \u2013 bu modul nomi (masalan: math, random, datetime) # 'funksiya_yoki_object' \u2013 modul ichidagi aniq bir funksiya, klass yoki o\u2018zgaruvchi nomi from modul_nomi import funksiya_yoki_object \ud83d\udccc math modulidan sqrt funksiyasini import qilish # 'math' modulidan faqat 'sqrt' (kvadrat ildiz) funksiyasini import qilamiz from math import sqrt # Kvadrat ildizi olinadigan sonni belgilaymiz son = 16 # Berilgan sonning kvadrat ildizini hisoblaymiz ildiz = sqrt(son) # Natijani ekranga chiqaramiz print(f\"{son} ning kvadrat ildizi: {ildiz}\")","title":"\u2705 MODULLARDAN MUAYYAN QISMLARNI IMPORT QILISH"},{"location":"python/moduls/#modulga-boshqa-nom-berish","text":"\ud83d\udccc Modulni import qilishda unga qisqa yoki qulayroq nom berish uchun as operatoridan foydalanishingiz mumkin. # 'math' modulini 'm' degan qisqa nom bilan import qilamiz import math as m # Aylananing radiusini belgilaymiz radius = 7 # Aylananing diametrini hisoblaymiz: D = 2 * \u03c0 * r formulasi bo\u2018yicha diametr = 2 * m.pi * radius # Hisoblangan diametrni ekranga chiqaramiz print(f\"Aylananing diametri: {diametr}\")","title":"\u2705 MODULGA BOSHQA NOM BERISH"},{"location":"python/moduls/#modul-yaratish","text":"\ud83d\udccc Modul yaratish uchun asosiy dasturimizdagi funksiyalarni yangi faylga ko'chiramiz xolos. Modulga oson murojat qilishimiz uchun, faylimiz asosiy dasturimiz bilan bitta papkada bo'lishi kerak. Bunda adashib ketmaslik uchun, loyihangizning(dasturning) asosiy faylini main.py deb nomlash o'rinli. # mymodule.py - Bu modulda funksiyalar va klasslar jamlangan # Salomlashish uchun funksiya def greet(name): \"\"\"Salomlashish funktsiyasi.\"\"\" return f\"Salom, {name}!\" # Ikki sonni qo\u2018shish funksiyasi def add(a, b): \"\"\"Ikki sonni qo'shish funktsiyasi.\"\"\" return a + b # Ikki sonni ko\u2018paytirish funksiyasi def multiply(a, b): \"\"\"Ikki sonni ko'paytirish funktsiyasi.\"\"\" return a * b # Shaxslarni ifodalovchi klass class Person: \"\"\"Shaxs klassi.\"\"\" # Klassni ishga tushiruvchi konstruktor def __init__(self, name, age): self.name = name self.age = age # Shaxs haqida tanishtiruvchi metod def introduce(self): \"\"\"Shaxsni tanishtiruvchi metod.\"\"\" return f\"Men {self.name} va {self.age} yoshdaman.\"","title":"\u2705 MODUL YARATISH"},{"location":"python/moduls/#moduldan-foydalanish","text":"\ud83d\udccc Modul yaratganingizdan so'ng, uni boshqa Python dasturlarida import qilib ishlatishingiz mumkin. # mymodule modulini import qilamiz, undagi funksiyalar va klasslardan foydalanish uchun import mymodule # greet funksiyasini chaqirib, \"Ali\" ga salom beramiz print(mymodule.greet(\"Ali\")) # add funksiyasi yordamida 5 va 3 sonlarini qo\u2018shamiz va natijani chiqaramiz print(mymodule.add(5, 3)) # multiply funksiyasi yordamida 4 va 7 sonlarini ko\u2018paytiramiz va natijani chiqaramiz print(mymodule.multiply(4, 7)) # Person klassidan yangi obyekt yaratamiz, ism va yoshni beramiz person = mymodule.Person(\"Omar\", 25) # obyektning introduce metodini chaqirib, tanishtirish matnini chiqaramiz print(person.introduce())","title":"\u2705MODULDAN FOYDALANISH"},{"location":"python/moduls/#modulni-kengaytirish","text":"\ud83d\udccc Modulga qo'shimcha funksiyalar yoki klasslar qo'shishingiz mumkin. # Ikki sondan birini ayirish funksiyasi def subtract(a, b): \"\"\"Ikki sondan birini ayirish funktsiyasi.\"\"\" return a - b # Ikki sonni bo'lish funksiyasi def divide(a, b): \"\"\"Ikki sonni bo'lish funktsiyasi.\"\"\" if b == 0: # Agar bo\u2018luvchi 0 bo\u2018lsa, xatolik chiqaramiz raise ValueError(\"Bo'lish uchun 0 bilan bo'lish mumkin emas!\") return a / b","title":"\u2705 MODULNI KENGAYTIRISH"},{"location":"python/moduls/#foydali-modullar","text":"","title":"\u2705 FOYDALI MODULLAR"},{"location":"python/moduls/#math-moduli","text":"","title":"\ud83d\udccc math MODULI"},{"location":"python/moduls/#nima-uchun-foydali","text":"Matematik hisob-kitoblarni oson va aniq bajarish uchun kerak. Kvadrat ildiz, logarifm, trigonometrik funksiyalar, faktoriyal kabi ko\u2018plab matematik operatsiyalarni bajarish imkonini beradi. Dasturlashda murakkab matematik formulalarni ishlatishda yordam beradi.","title":"\u2705 NIMA UCHUN FOYDALI?"},{"location":"python/moduls/#1-mathceilx","text":"\ud83d\udccc x sonini yuqoriga qarab yaxlitlaydi. Ya'ni, agar son butun emas bo\u2018lsa, keyingi eng yaqin butun songa oshiradi. Agar son butun bo\u2018lsa, o\u2018zi o\u2018zgarmaydi. # 'math' modulini import qilamiz import math # 5.1 sonini yuqoriga qarab butun songa yaxlitlaymiz (ceil funksiyasi) print(math.ceil(5.1)) # Natija: 6 # 5.9 sonini yuqoriga qarab butun songa yaxlitlaymiz print(math.ceil(5.9)) # Natija: 6 # Manfiy -3.4 sonini yuqoriga qarab yaxlitlaymiz (-3.4 dan katta eng kichik butun son -3) print(math.ceil(-3.4)) # Natija: -3 # 7 allaqachon butun son, shuning uchun o\u2018zgarmaydi print(math.ceil(7)) # Natija: 7","title":"1. math.ceil(x)"},{"location":"python/moduls/#2-mathfloorx","text":"\ud83d\udccc x sonini pastga qarab yaxlitlaydi. Ya'ni, agar son butun emas bo\u2018lsa, oldingi eng yaqin butun songa tushiradi. Agar son butun bo\u2018lsa, o\u2018zi o\u2018zgarmaydi. # 'math' modulini import qilamiz import math # 5.9 sonini pastga qarab butun songa yaxlitlaymiz (floor funksiyasi) print(math.floor(5.9)) # Natija: 5 # 5.1 sonini pastga qarab butun songa yaxlitlaymiz print(math.floor(5.1)) # Natija: 5 # Manfiy -3.4 sonini pastga qarab yaxlitlaymiz (-3.4 dan kichik eng katta butun son -4) print(math.floor(-3.4)) # Natija: -4 # 7 allaqachon butun son, shuning uchun o\u2018zgarmaydi print(math.floor(7)) # Natija: 7","title":"2. math.floor(x)"},{"location":"python/moduls/#random-moduli","text":"\ud83d\udccc random moduli \u2014 bu Python kutubxonasi bo\u2018lib, u yordamida tasodifiy sonlar, tasodifiy elementlar tanlash va ro\u2018yxatlarni aralashtirish mumkin.","title":"random MODULI"},{"location":"python/moduls/#nima-uchun-foydali_1","text":"O'yinlarda qahramonlar yoki voqealar uchun tasodifiylik yaratish uchun, Testlarda tasodifiy savollar tanlash uchun, Statistik tadqiqotlarda namuna olish uchun ishlatiladi. Shuningdek, har xil dasturlarda tasodifiy natijalar yaratishda qo\u2018llaniladi.","title":"\u2705 NIMA UCHUN FOYDALI?"},{"location":"python/moduls/#1-randomrandinta-b","text":"\ud83d\udccc a va b orasidagi tasodifiy butun sonni qaytaradi (a va b ham shu oraliqqa kiradi). # random modulini import qilamiz, bu modul tasodifiy sonlar bilan ishlash uchun kerak import random # 1 dan 10 gacha (ikkala chegarani ham qo'shib) tasodifiy butun son hosil qilamiz son = random.randint(1, 10) # Hosil qilingan tasodifiy sonni ekranga chiqaramiz print(son) # 1 dan 10 gacha bo'lgan butun son (masalan, 3, 7, 10 va hokazo)","title":"1. random.randint(a, b)"},{"location":"python/moduls/#2-randomchoicesequence","text":"\ud83d\udccc Berilgan ketma-ketlik (list, string yoki boshqa iterable) ichidan tasodifiy bitta elementni tanlaydi. # random modulini import qilamiz, tasodifiy element tanlash uchun kerak bo\u2018ladi import random # Mevalar ro\u2018yxatini yaratamiz mevalar = ['olma', 'banan', 'anor', 'shaftoli'] # Ro\u2018yxatdan tasodifiy bitta meva tanlaymiz tasodifiy_meva = random.choice(mevalar) # Tanlangan mevaning nomini ekranga chiqaramiz print(tasodifiy_meva) # masalan, 'anor' yoki 'banan' chiqishi mumkin","title":"2. random.choice(sequence)"},{"location":"python/moduls/#3-randomshufflelist","text":"\ud83d\udccc List elementlarini joyini tasodifiy tarzda almashtiradi (listni o\u2018zgartiradi). # random modulini import qilamiz, ro'yxat elementlarini aralashtirish uchun kerak import random # Raqamlar ro'yxatini yaratamiz raqamlar = [1, 2, 3, 4, 5] # Ro'yxatdagi elementlarni tasodifiy tartibda aralashtiramiz random.shuffle(raqamlar) # Aralashtirilgan ro'yxatni ekranga chiqaramiz print(raqamlar) # ro'yxat elementlari aralashadi, masalan, [3, 1, 5, 2, 4]","title":"3. random.shuffle(list)"},{"location":"python/moduls/#datetime-moduli","text":"\ud83d\udccc datetime moduli - Python kutubxonasi bo\u2018lib, sana va vaqt bilan ishlash uchun ishlatiladi.","title":"datetime MODULI"},{"location":"python/moduls/#nima-uchun-foydali_2","text":"Vaqtni hisoblash (masalan, ikki sana orasidagi farqni topish) Hozirgi vaqtni olish Sanalarni formatlash va ko\u2018rsatish Muddatlarni qo\u2018shish yoki ayirish.","title":"\u2705 NIMA UCHUN FOYDALI?"},{"location":"python/moduls/#1-datetimedatetoday","text":"\ud83d\udccc Hozirgi kundagi sanani qaytaradi (faqat sana, vaqt emas). # datetime modulini import qilamiz, vaqt va sana bilan ishlash uchun kerak import datetime # Hozirgi sanani olish uchun today() funksiyasidan foydalanamiz bugun = datetime.date.today() # Olingan sanani ekranga chiqaramiz, masalan: 2025-06-06 print(bugun) # masalan, 2025-06-06","title":"1. datetime.date.today()"},{"location":"python/moduls/#2-datetimedatetimenow","text":"\ud83d\udccc Hozirgi sanani va vaqtni to\u2018liq qaytaradi (soat, daqiqa, soniya bilan). # datetime modulini import qilamiz, sana va vaqt bilan ishlash uchun kerak import datetime # Hozirgi sana va vaqtni olish uchun now() funksiyasidan foydalanamiz hozir = datetime.datetime.now() # Olingan sana va vaqtni ekranga chiqaramiz, masalan: 2025-06-06 15:30:25.123456 print(hozir) # masalan, 2025-06-06 15:30:25.123456","title":"2. datetime.datetime.now()"},{"location":"python/moduls/#3-datetimetimedeltadays5","text":"\ud83d\udccc Vaqt oralig\u2018ini ifodalaydi. Masalan, 5 kun yoki 2 soat kabilarni yaratadi. # datetime modulini import qilamiz, sana va vaqt bilan ishlash uchun kerak import datetime # timedelta obyektini yaratamiz, bu 5 kunlik vaqt farqini ifodalaydi besh_kun = datetime.timedelta(days=5) # Hozirgi sanani olamiz bugun = datetime.date.today() # Bugungi sanaga 5 kun qo'shamiz, natijada kelasi sana hosil bo'ladi kelasi_sana = bugun + besh_kun # Kelasi sanani ekranga chiqaramiz print(kelasi_sana) # bugun sanadan 5 kun keyingi sana chiqadi","title":"3. datetime.timedelta(days=5)"},{"location":"python/moduls/#os-moduli","text":"os moduli \u2014 bu Python kutubxonasi bo\u2018lib, u orqali operatsion tizim bilan bog\u2018liq amallarni bajarish mumkin.","title":"\ud83d\udccc os MODULI"},{"location":"python/moduls/#nima-uchun-foydali_3","text":"Fayllar va papkalar ustida amallar bajarish (yaratish, o\u2018chirish, ko\u2018rish) Biz ishlab turgan papkani yo'lini aniqlash Papka va fayllar bilan dastur orqali interaktiv ishlash","title":"\u2705 NIMA UCHUN FOYDALI?"},{"location":"python/moduls/#1-osgetcwd","text":"\ud83d\udccc Biz ishlab turgan papkani (working directory) yo\u2018lini qaytaradi. # os modulini import qilamiz, operatsion tizim bilan bog\u2018liq funksiyalar uchun kerak import os # Hozirgi ishchi papkaning (current working directory) yo\u2018lini olamiz papka = os.getcwd() # Olingan papka yo\u2018lini ekranga chiqaramiz, masalan: /home/username/projects print(papka) # Masalan: /home/username/projects","title":"1. os.getcwd()"},{"location":"python/moduls/#2-oslistdirpath","text":"\ud83d\udccc Berilgan papka ichidagi barcha fayl va papkalar ro\u2018yxatini beradi. # os modulini import qilamiz, operatsion tizim bilan ishlash uchun kerak import os # Hozirgi papkadagi barcha fayl va papkalar ro'yxatini olamiz fayllar = os.listdir('.') # '.' bu hozirgi ishlab turgan papkani bildiradi # Olingan fayl va papkalar ro'yxatini ekranga chiqaramiz print(fayllar) # Masalan: ['file1.txt', 'image.png', 'folder1']","title":"2. os.listdir(path)"},{"location":"python/moduls/#3-osmkdirname","text":"\ud83d\udccc Yangi papka yaratadi. # os modulini import qilamiz, operatsion tizim bilan ishlash uchun kerak import os # 'yangi_papka' nomli yangi papka yaratamiz (agar mavjud bo'lmasa) os.mkdir('yangi_papka') # Papka yaratilib bo\u2018lgani haqida xabar beramiz print(\"Yangi papka yaratildi\")","title":"3. os.mkdir(name)"},{"location":"python/moduls/#3-osremovefilename","text":"\ud83d\udccc Faylni o\u2018chiradi. # os modulini import qilamiz, fayllar va papkalar bilan ishlash uchun kerak import os # 'eskifayl.txt' nomli faylni o'chiramiz (agar mavjud bo'lsa) os.remove('old_file.txt') # Fayl muvaffaqiyatli o'chirilgani haqida xabar beramiz print(\"Fayl o'chirildi\")","title":"3. os.remove(filename)"},{"location":"python/moduls/#json-moduli","text":"\ud83d\udccc json moduli \u2014 bu Python kutubxonasi bo\u2018lib, JSON formatidagi ma\u2019lumotlar bilan ishlash uchun ishlatiladi. JSON \u2014 bu ma\u2019lumotlarni yozish va uzatishda keng qo\u2018llaniladigan standart format. Web dasturlashda, API (Application Programming Interface) lar bilan ishlashda juda muhim.","title":"\ud83d\udccc json MODULI"},{"location":"python/moduls/#nima-uchun-foydali_4","text":"JSON formatidagi ma\u2019lumotlarni Python obyektlariga o\u2018qish, Python obyektlarini JSON formatiga yozish, API dan kelgan JSON javoblarini qayta ishlash, Ma\u2019lumotlarni faylga JSON formatida saqlash va o\u2018qish.","title":"\u2705 NIMA UCHUN FOYDALI?"},{"location":"python/moduls/#jsonloadss","text":"\ud83d\udccc JSON ko\u2018rinishidagi satrni Python obyektiga (list, dictionary va boshqalar) aylantiradi. # json modulini import qilamiz, JSON formatidagi ma'lumotlarni o'qish va yozish uchun kerak import json # JSON formatidagi satrni yaratamiz (string ko'rinishida) json_satr = '{\"ism\": \"Umid\", \"yosh\": 25}' # json.loads() funksiyasi yordamida JSON stringlarni Python dictionaryga aylantiramiz python_obj = json.loads(json_satr) # Python lug'atini ekranga chiqaramiz print(python_obj) # {'ism': 'Umid', 'yosh': 25} # Dictionarydan 'ism' kalitiga mos keluvchi qiymatni chiqaramiz print(python_obj['ism']) # Umid","title":"json.loads(s)"},{"location":"python/moduls/#2-jsondumpsobj","text":"\ud83d\udccc Python obyektini JSON formatidagi stringga aylantiradi. # json modulini import qilamiz, JSON formatiga o\u2018tkazish va o\u2018qish uchun kerak import json # Python dictionary yaratamiz python_obj = {'ism': 'Umid', 'yosh': 25} # json.dumps() yordamida Python dictionaryni JSON formatidagi stringga aylantiramiz json_satr = json.dumps(python_obj) # JSON formatidagi stringni ekranga chiqaramiz print(json_satr) # '{\"ism\": \"Umid\", \"yosh\": 25}'","title":"2. json.dumps(obj)"},{"location":"python/moduls/#3-jsonloadfile","text":"\ud83d\udccc JSON faylini o\u2018qiydi va Python obyektiga aylantiradi. # json modulini import qilamiz, JSON fayllarni o'qish va yozish uchun kerak import json # 'data.json' faylini o'qish uchun ochamiz ('r' - read rejimi) with open('data.json', 'r') as fayl: # fayldagi JSON ma'lumotlarni Python obyektiga (masalan, dictionary) o\u2018qiymiz malumot = json.load(fayl) # Olingan ma'lumotni ekranga chiqaramiz print(malumot)","title":"3. json.load(file)"},{"location":"python/moduls/#4-jsondumpobj-file","text":"\ud83d\udccc Python obyektini JSON faylga yozadi. # json modulini import qilamiz, JSON formatida yozish va o'qish uchun kerak import json # Python dictionary yaratamiz, uni JSON formatida faylga yozamiz data = {'ism': 'Umid', 'yosh': 25} # 'data.json' faylini yozish uchun ochamiz ('w' - write rejimi) with open('data.json', 'w') as fayl: # Python dictionaryni JSON formatida faylga yozamiz json.dump(data, fayl)","title":"4. json.dump(obj, file)"},{"location":"python/moduls/#amaliyot","text":"","title":"\u2705 AMALIYOT"},{"location":"python/moduls/#1-topshiriq","text":"math modulidan foydalanib, 10 ta sonning kvadrat ildizini hisoblovchi dastur yozing va natijalarni chiqaring.","title":"\u2705 1-topshiriq:"},{"location":"python/moduls/#2-topshiriq","text":"random modulidan foydalanib, 1 dan 100 gacha bo\u2018lgan 5 ta tasodifiy butun sonlarni ro\u2018yxatga joylashtiring va ularni ekranga chiqaring.","title":"\u2705 2-topshiriq:"},{"location":"python/moduls/#3-topshiriq","text":"datetime modulidan foydalanib, bugungi sanani va vaqtni formatlangan holda YYYY-MM-DD HH:MM:SS ko\u2018rinishida ekranga chiqaring.","title":"\u2705 3-topshiriq:"},{"location":"python/moduls/#4-topshiriq","text":"O\u2018zingizning kichik modul faylingizni yarating ( mycalc.py ) va unga add(a, b) , subtract(a, b) , multiply(a, b) , divide(a, b) funksiyalarini yozing. Keyin ularni boshqa dasturga import qilib, natijalarni ko\u2018rsating.","title":"\u2705 4-topshiriq:"},{"location":"python/moduls/#5-topshiriq","text":"math modulidan pi va sin funksiyalarini import qilib, 0 dan \u03c0 gacha bo\u2018lgan 5 ta qiymat uchun sinuslarini hisoblab chiqaring.","title":"\u2705 5-topshiriq:"},{"location":"python/moduls/#6-topshiriq","text":"random.choice() funksiyasi yordamida ro\u2018yxatdan tasodifiy 3 ta ism tanlab, ularni ekranga chiqaring.","title":"\u2705 6-topshiriq:"},{"location":"python/moduls/#7-topshiriq","text":"random.shuffle() yordamida berilgan ro\u2018yxat elementlarini aralashtiring va natijani chop eting.","title":"\u2705 7-topshiriq:"},{"location":"python/moduls/#8-topshiriq","text":"datetime modulidan foydalanib, foydalanuvchidan yil, oy, kun kiritishini so\u2018rang va shu sanani datetime.date obyekti sifatida saqlang.","title":"\u2705 8-topshiriq:"},{"location":"python/moduls/#9-topshiriq","text":"Yangi modul yarating, unga greet(name) funksiyasini yozing, u berilgan ismga salom beradi. Modulni import qilib, turli ismlar bilan chaqiring.","title":"\u2705 9-topshiriq:"},{"location":"python/moduls/#10-topshiriq","text":"math modulining ceil va floor funksiyalarini import qilib, foydalanuvchi kiritgan haqiqiy son uchun ikkala qiymatni ham chiqaring.","title":"\u2705 10-topshiriq:"},{"location":"python/moduls/#11-topshiriq","text":"O\u2018z modulingizda yangi funksiya yarating \u2014 is_even(number) \u2014 son juft yoki toqligini tekshiradi va True yoki False qaytaradi. Modulni import qilib, ro\u2018yxatdagi sonlarni tekshiring.","title":"\u2705 11-topshiriq:"},{"location":"python/moduls/#12-topshiriq","text":"random modulidan foydalanib, 52 ta kartadan iborat ro\u2018yxat yarating (masalan: \"Queen of Hearts\", \"10 of Diamonds\", va hokazo), keyin tasodifiy 5 ta kartani tanlab chiqaring. (Diamonds, Hearts, Clubs, Spades)","title":"\u2705 12-topshiriq:"},{"location":"python/moduls/#13-topshiriq","text":"datetime modulidan hozirgi vaqtni olib, uni soat, daqiqa va sekundga ajratib chiqaradigan dastur yozing.","title":"\u2705 13-topshiriq:"},{"location":"python/moduls/#14-topshiriq","text":"Modulga yangi funksiyalar qo\u2018shing: factorial(n) va is_prime(n) , ularni o\u2018zingiz yozing (modulda) va keyin asosiy dasturda chaqiring.","title":"\u2705 14-topshiriq:"},{"location":"python/moduls/#15-topshiriq","text":"math modulidan pow funksiyasini import qilib, foydalanuvchidan asosi va darajani qabul qilib, natijani hisoblang.","title":"\u2705 15-topshiriq:"},{"location":"python/oop/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 17-DARS OOP (OBJECT-ORIENTED PROGRAMMING) [!NOTE] Object-Oriented Programming ( OOP ) Python dasturlash tilida muhim mavzulardan biri hisoblanadi va u orqali dasturlarni modulli, qayta foydalanish mumkin bo'lgan, tuzilmaviy kodlarni yaratish mumkin. Keling, OOPning asosiy tushunchalari va amaliy misollari bilan tanishib chiqamiz. Key OOP Principles: 1. Encapsulation (Inkapsulyatsiya) - Ma'lumotlarni va funksiyalarni (metodlarni) bitta birlikda, ya'ni ob'ekt ichida saqlashni ta'minlaydi. Bu ma'lumotlarni tashqi tomondan to'g'ridan-to'g'ri o'zgartirilmasligini ta'minlash uchun ishlatiladi. 2. Inheritance (Meros olish) - Bir klass (ota klass) xususiyatlarini boshqa klassga (farzand klass) o'tkazish imkoniyatini beradi, ya'ni yangi klassni mavjud klass asosida yaratish mumkin. 3. Polymorphism (Polimorfizm) - Bir xil nomdagi metodlarning turli xil sinflarda turlicha ishlash imkoniyatini beradi. 4. Abstraction (Abstraksiya) - Muhim detallarni ajratib olish va ortiqcha tafsilotlarni yashirishni ta'minlaydi. What is a class in Python? [!NOTE] class bu ma'lumotlar va ularni qayta ishlovchi funksiyalarni birlashtiruvchi shablon yoki qolip hisoblanadi. class yordamida obyektlar yaratamiz. Har bir obyekt biror class ning nusxasi hisoblanadi. Creating a Simple class class yaratish uchun class kalit so'zidan foydalanamiz va unga nom beramiz. class Car: def __init__(self, model, color): self.model = model self.color = color def display_info(self): print(f\"Model: {self.model}, Color: {self.color}\") Yuqoridagi misolda Car nomli class yaratilgan. __init__ metodi har safar yangi obyekt yaratilganda avtomatik ravishda chaqiriladi. Bu metod obyektni boshlang'ich holatini o'rnatadi. self bu obyektning o'zi, ya'ni yaratilgan obyektga murojaat qilish uchun ishlatiladi. Creating an Object class asosida obyekt yaratish uchun class nomiga qavs ichida kerakli parametrlarni yozamiz: class Car: def __init__(self, model, color): self.model = model self.color = color def display_info(self): print(f\"Model: {self.model}, Color: {self.color}\") my_car = Car(\"Chevrolet\", \"Black\") my_car.display_info() Bu kod Car classidan yangi my_car obyektini yaratadi va uning ma'lumotlarini qaytaradi. Natija quyidagicha bo'ladi: Model: Chevrolet, Color: Black Encapsulation(Inkapsulyatsiya) Encapsulation yordamida class dagi xususiyatlar ( property ) va metodlarni yashirish mumkin. Bu o'zgaruvchilarning to'g'ridan-to'g'ri o'zgartirilishini oldini olib, maxsus metodlar orqali ularga kirishni ta'minlaydi. Pythonda private( xususiy ) o'zgaruvchilarni yaratish uchun o'zgaruvchining nomi oldiga ikki pastki chiziq ( __ ) qo'yamiz: class BankAccount: def __init__(self, balance): self.__balance = balance # private attribute def deposit(self, amount): if amount > 0: self.__balance += amount print(f\"{amount} deposited. New balance: {self.__balance}\") else: print(\"Invalid deposit amount\") def withdraw(self, amount): if amount <= self.__balance: self.__balance -= amount print(f\"{amount} withdrawn. New balance: {self.__balance}\") else: print(\"Insufficient funds\") # BankAccount ob'ektini yaratamiz va unga pul qo'shamiz account = BankAccount(1000) account.deposit(500) # 500 deposited. New balance: 1500 account.withdraw(200) # 200 withdrawn. New balance: 1300 Yuqorida __balance xususiyati to'g'ridan-to'g'ri obyektdan kirish mumkin emas, faqat deposit va withdraw metodlari orqali o'zgartiriladi. Inheritance(Meros olish) Meros olish boshqa class dan xususiyatlar va metodlarni meros qilib olish imkonini beradi, bu orqali kod qayta ishlatiladi. Keling, Car va ElectricCar misollarini yanada kengaytiramiz. class Car: def __init__(self, model, color, year): self.model = model self.color = color self.year = year def drive(self): print(f\"{self.model} is driving\") def stop(self): print(f\"{self.model} has stopped\") class ElectricCar(Car): def __init__(self, model, color, year, battery_size): super().__init__(model, color, year) # Ota klass `Car` ning __init__ metodini chaqiramiz self.battery_size = battery_size def charge(self): print(f\"{self.model} is charging. Battery size: {self.battery_size} kWh\") tesla = ElectricCar(\"Tesla Model S\", \"Red\", 2023, 100) tesla.drive() # Tesla Model S is driving tesla.charge() # Tesla Model S is charging. Battery size: 100 kWh tesla.stop() # Tesla Model S has stopped Bu yerda ElectricCar classi Car classidan meros oladi va qo'shimcha charge metodini qo'shadi: Natija: Model: Tesla, Color: White Battery size: 75 kWh Polymorphism(Polimorfizm) Polimorfizm bir xil nomdagi metodlarning turli class larda turlicha ishlashini anglatadi. Bu OOP da muhim bo'lib, turli ob'ektlarga bir xil metodni qo'llash imkonini beradi. class Bird: def sound(self): print(\"Bird makes a sound\") class Parrot(Bird): def sound(self): print(\"Parrot says hello\") class Sparrow(Bird): def sound(self): print(\"Sparrow chirps\") Yuqorida Parrot va Sparrow classlari Bird classidan meros olgan, lekin har bir classda sound metodi turlicha bajariladi: class Bird: def sound(self): print(\"Bird makes a sound\") class Parrot(Bird): def sound(self): print(\"Parrot says hello\") class Sparrow(Bird): def sound(self): print(\"Sparrow chirps\") def make_sound(bird): bird.sound() parrot = Parrot() sparrow = Sparrow() make_sound(parrot) # Parrot says hello make_sound(sparrow) # Sparrow chirps Abstraction(Abstraksiya) Abstraksiya yordamida foydalanuvchilar faqat kerakli metod va atribut larga kirishi mumkin bo'ladi. Pythonda to\u2018g\u2018ridan-to\u2018g\u2018ri abstrakt classlar mavjud emas, ammo abc ( Abstract Base Classes ) modulidan foydalanib, abstrakt class yaratish mumkin. Keling, hayvonlar misolida ko'ramiz: from abc import ABC, abstractmethod class Animal(ABC): @abstractmethod def sound(self): pass class Dog(Animal): def sound(self): print(\"Woof!\") class Cat(Animal): def sound(self): print(\"Meow!\") dog = Dog() cat = Cat() dog.sound() # Woof! cat.sound() # Meow! Bu yerda Animal class i abstract class bo'lib, undagi sound metodi barcha farzand classlarida aniqlanishi kerak. Dog va Cat classlarida sound metodini har xil bajarish mumkin. AMALIYOT class yaratish Book classini yarating. U quyidagi atributlarga ega bo'lishi kerak: title ( nomi ) author ( muallifi ) year ( nashr yili ) Shuningdek, classda display_info metodini qo'shing, u kitob haqida ma'lumotlarni chiqarishi kerak. class Book: # Bu yerga kod yozing Instansiya O'zgaruvchilarini Qo'llash Yuqoridagi Book classini davom ettiring va unda get_age metodini qo'shing. Bu metod kitobning bugungi kunga nisbatan yoshini hisoblash kerak ( hozirgi yil - nashr yili ). class Book: # Bu yerga kod yozing Meros Olish Book classidan meros oluvchi Ebook classini yarating. Ebook classi quyidagi qo'shimcha atributga ega bo'lishi kerak: file_size ( fayl o'lchami ) Ebook classida display_info metodini yangilang va unda fayl o'lchamini ko'rsatish uchun ma'lumotlarni chiqarishi kerak. class Book: # Bu yerga kod yozing class Ebook(Book): # Bu yerga kod yozing Inkapsulyatsiya BankAccount classini yarating, unda maxfiy __balance atributi bo'lishi kerak. classda quyidagi metodlar bo'lishi kerak: deposit ( amount ) - hisobga pul qo'shish. withdraw ( amount ) - hisobdan pul yechib olish. get_balance() - hisobdagi mablag'ni ko'rsatish. class BankAccount: # Bu yerga kod yozing classlararo Aloqa Author classini yarating, unda name va books atributlari bo'lishi kerak. books - bu Book classidan iborat ro'yxat. Author classida quyidagi metodlar bo'lishi kerak: add_book ( book ) - yangi kitob qo'shish. display_books() - muallifga tegishli kitoblarni ko'rsatish. class Author: # Bu yerga kod yozing Barcha Tuzilmalarni Qo'llash Yangi dastur yarating, unda Library classini yarating. Library classida quyidagi atributlar bo'lishi kerak: name ( kutubxona nomi ) books ( kitoblar ro'yxati ) Library classida quyidagi metodlar bo'lishi kerak: add_book ( book ) - kutubxonaga kitob qo'shish. remove_book ( title ) - kutubxonadan kitobni olib tashlash. display_books() - kutubxonadagi kitoblarni ko'rsatish. class Library: # Bu yerga kod yozing Avtobus classini yaratish Bus classini yarating, bu class quyidagi atributlarga ega bo'lishi kerak: bus_number ( avtobus raqami ) capacity ( sig'imi ) passengers ( yo'lovchilar ro'yxati ) Bus classida quyidagi metodlar bo'lishi kerak: add_passenger ( passenger ) - avtobusga yo'lovchi qo'shish. remove_passenger ( passenger ) - avtobusdan yo'lovchini olib tashlash. display_passengers() - avtobusdagi barcha yo'lovchilarni ko'rsatish. class Bus: # Bu yerga kod yozing Avtobusdan meros olish DoubleDeckerBus classini Bus classidan meros qilib oling. Bu classda qo'shimcha atributlar sifatida upper_capacity (yuqori qavat sig'imi) va lower_capacity (pastki qavat sig'imi) bo'lishi kerak. DoubleDeckerBus klassida add_passenger metodini yangilang, shunda u har ikki qavatda yo'lovchilarni hisobga olishi kerak. class Bus: # Bu yerga kod yozing class DoubleDeckerBus(Bus): # Bu yerga kod yozing Mashinalar garaji Garage classini yarating, bu classda quyidagi atributlar bo'lishi kerak: name ( garaj nomi ) cars ( mashinalar ro'yxati ) Garage classida quyidagi metodlar bo'lishi kerak: add_car ( car ) - garajga mashina qo'shish. remove_car ( car ) - garajdan mashinani olib tashlash. display_cars() - garajdagi barcha mashinalarni ko'rsatish. class Garage: # Bu yerga kod yozing Qo'shimcha muallif classini yaratish Publisher classini yarating, unda name va books atributlari bo'lishi kerak. books - bu Book classidan iborat ro'yxat. Publisher classida quyidagi metodlar bo'lishi kerak: add_book ( book ) - nashriyotga kitob qo'shish. remove_book ( title ) - nashriyotdan kitobni olib tashlash. display_books() - nashriyotdagi kitoblarni ko'rsatish. class Publisher: # Bu yerga kod yozing","title":"OOP"},{"location":"python/oop/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/oop/#17-dars-oop-object-oriented-programming","text":"[!NOTE] Object-Oriented Programming ( OOP ) Python dasturlash tilida muhim mavzulardan biri hisoblanadi va u orqali dasturlarni modulli, qayta foydalanish mumkin bo'lgan, tuzilmaviy kodlarni yaratish mumkin. Keling, OOPning asosiy tushunchalari va amaliy misollari bilan tanishib chiqamiz. Key OOP Principles: 1. Encapsulation (Inkapsulyatsiya) - Ma'lumotlarni va funksiyalarni (metodlarni) bitta birlikda, ya'ni ob'ekt ichida saqlashni ta'minlaydi. Bu ma'lumotlarni tashqi tomondan to'g'ridan-to'g'ri o'zgartirilmasligini ta'minlash uchun ishlatiladi. 2. Inheritance (Meros olish) - Bir klass (ota klass) xususiyatlarini boshqa klassga (farzand klass) o'tkazish imkoniyatini beradi, ya'ni yangi klassni mavjud klass asosida yaratish mumkin. 3. Polymorphism (Polimorfizm) - Bir xil nomdagi metodlarning turli xil sinflarda turlicha ishlash imkoniyatini beradi. 4. Abstraction (Abstraksiya) - Muhim detallarni ajratib olish va ortiqcha tafsilotlarni yashirishni ta'minlaydi.","title":"\ud83e\udde9 17-DARS OOP (OBJECT-ORIENTED PROGRAMMING)"},{"location":"python/oop/#what-is-a-class-in-python","text":"[!NOTE] class bu ma'lumotlar va ularni qayta ishlovchi funksiyalarni birlashtiruvchi shablon yoki qolip hisoblanadi. class yordamida obyektlar yaratamiz. Har bir obyekt biror class ning nusxasi hisoblanadi.","title":"What is a class in Python?"},{"location":"python/oop/#creating-a-simple-class","text":"class yaratish uchun class kalit so'zidan foydalanamiz va unga nom beramiz. class Car: def __init__(self, model, color): self.model = model self.color = color def display_info(self): print(f\"Model: {self.model}, Color: {self.color}\") Yuqoridagi misolda Car nomli class yaratilgan. __init__ metodi har safar yangi obyekt yaratilganda avtomatik ravishda chaqiriladi. Bu metod obyektni boshlang'ich holatini o'rnatadi. self bu obyektning o'zi, ya'ni yaratilgan obyektga murojaat qilish uchun ishlatiladi.","title":"Creating a Simple class"},{"location":"python/oop/#creating-an-object","text":"class asosida obyekt yaratish uchun class nomiga qavs ichida kerakli parametrlarni yozamiz: class Car: def __init__(self, model, color): self.model = model self.color = color def display_info(self): print(f\"Model: {self.model}, Color: {self.color}\") my_car = Car(\"Chevrolet\", \"Black\") my_car.display_info() Bu kod Car classidan yangi my_car obyektini yaratadi va uning ma'lumotlarini qaytaradi. Natija quyidagicha bo'ladi: Model: Chevrolet, Color: Black","title":"Creating an Object"},{"location":"python/oop/#encapsulationinkapsulyatsiya","text":"Encapsulation yordamida class dagi xususiyatlar ( property ) va metodlarni yashirish mumkin. Bu o'zgaruvchilarning to'g'ridan-to'g'ri o'zgartirilishini oldini olib, maxsus metodlar orqali ularga kirishni ta'minlaydi. Pythonda private( xususiy ) o'zgaruvchilarni yaratish uchun o'zgaruvchining nomi oldiga ikki pastki chiziq ( __ ) qo'yamiz: class BankAccount: def __init__(self, balance): self.__balance = balance # private attribute def deposit(self, amount): if amount > 0: self.__balance += amount print(f\"{amount} deposited. New balance: {self.__balance}\") else: print(\"Invalid deposit amount\") def withdraw(self, amount): if amount <= self.__balance: self.__balance -= amount print(f\"{amount} withdrawn. New balance: {self.__balance}\") else: print(\"Insufficient funds\") # BankAccount ob'ektini yaratamiz va unga pul qo'shamiz account = BankAccount(1000) account.deposit(500) # 500 deposited. New balance: 1500 account.withdraw(200) # 200 withdrawn. New balance: 1300 Yuqorida __balance xususiyati to'g'ridan-to'g'ri obyektdan kirish mumkin emas, faqat deposit va withdraw metodlari orqali o'zgartiriladi.","title":"Encapsulation(Inkapsulyatsiya)"},{"location":"python/oop/#inheritancemeros-olish","text":"Meros olish boshqa class dan xususiyatlar va metodlarni meros qilib olish imkonini beradi, bu orqali kod qayta ishlatiladi. Keling, Car va ElectricCar misollarini yanada kengaytiramiz. class Car: def __init__(self, model, color, year): self.model = model self.color = color self.year = year def drive(self): print(f\"{self.model} is driving\") def stop(self): print(f\"{self.model} has stopped\") class ElectricCar(Car): def __init__(self, model, color, year, battery_size): super().__init__(model, color, year) # Ota klass `Car` ning __init__ metodini chaqiramiz self.battery_size = battery_size def charge(self): print(f\"{self.model} is charging. Battery size: {self.battery_size} kWh\") tesla = ElectricCar(\"Tesla Model S\", \"Red\", 2023, 100) tesla.drive() # Tesla Model S is driving tesla.charge() # Tesla Model S is charging. Battery size: 100 kWh tesla.stop() # Tesla Model S has stopped Bu yerda ElectricCar classi Car classidan meros oladi va qo'shimcha charge metodini qo'shadi: Natija: Model: Tesla, Color: White Battery size: 75 kWh","title":"Inheritance(Meros olish)"},{"location":"python/oop/#polymorphismpolimorfizm","text":"Polimorfizm bir xil nomdagi metodlarning turli class larda turlicha ishlashini anglatadi. Bu OOP da muhim bo'lib, turli ob'ektlarga bir xil metodni qo'llash imkonini beradi. class Bird: def sound(self): print(\"Bird makes a sound\") class Parrot(Bird): def sound(self): print(\"Parrot says hello\") class Sparrow(Bird): def sound(self): print(\"Sparrow chirps\") Yuqorida Parrot va Sparrow classlari Bird classidan meros olgan, lekin har bir classda sound metodi turlicha bajariladi: class Bird: def sound(self): print(\"Bird makes a sound\") class Parrot(Bird): def sound(self): print(\"Parrot says hello\") class Sparrow(Bird): def sound(self): print(\"Sparrow chirps\") def make_sound(bird): bird.sound() parrot = Parrot() sparrow = Sparrow() make_sound(parrot) # Parrot says hello make_sound(sparrow) # Sparrow chirps","title":"Polymorphism(Polimorfizm)"},{"location":"python/oop/#abstractionabstraksiya","text":"Abstraksiya yordamida foydalanuvchilar faqat kerakli metod va atribut larga kirishi mumkin bo'ladi. Pythonda to\u2018g\u2018ridan-to\u2018g\u2018ri abstrakt classlar mavjud emas, ammo abc ( Abstract Base Classes ) modulidan foydalanib, abstrakt class yaratish mumkin. Keling, hayvonlar misolida ko'ramiz: from abc import ABC, abstractmethod class Animal(ABC): @abstractmethod def sound(self): pass class Dog(Animal): def sound(self): print(\"Woof!\") class Cat(Animal): def sound(self): print(\"Meow!\") dog = Dog() cat = Cat() dog.sound() # Woof! cat.sound() # Meow! Bu yerda Animal class i abstract class bo'lib, undagi sound metodi barcha farzand classlarida aniqlanishi kerak. Dog va Cat classlarida sound metodini har xil bajarish mumkin.","title":"Abstraction(Abstraksiya)"},{"location":"python/oop/#amaliyot","text":"class yaratish Book classini yarating. U quyidagi atributlarga ega bo'lishi kerak: title ( nomi ) author ( muallifi ) year ( nashr yili ) Shuningdek, classda display_info metodini qo'shing, u kitob haqida ma'lumotlarni chiqarishi kerak. class Book: # Bu yerga kod yozing Instansiya O'zgaruvchilarini Qo'llash Yuqoridagi Book classini davom ettiring va unda get_age metodini qo'shing. Bu metod kitobning bugungi kunga nisbatan yoshini hisoblash kerak ( hozirgi yil - nashr yili ). class Book: # Bu yerga kod yozing Meros Olish Book classidan meros oluvchi Ebook classini yarating. Ebook classi quyidagi qo'shimcha atributga ega bo'lishi kerak: file_size ( fayl o'lchami ) Ebook classida display_info metodini yangilang va unda fayl o'lchamini ko'rsatish uchun ma'lumotlarni chiqarishi kerak. class Book: # Bu yerga kod yozing class Ebook(Book): # Bu yerga kod yozing Inkapsulyatsiya BankAccount classini yarating, unda maxfiy __balance atributi bo'lishi kerak. classda quyidagi metodlar bo'lishi kerak: deposit ( amount ) - hisobga pul qo'shish. withdraw ( amount ) - hisobdan pul yechib olish. get_balance() - hisobdagi mablag'ni ko'rsatish. class BankAccount: # Bu yerga kod yozing classlararo Aloqa Author classini yarating, unda name va books atributlari bo'lishi kerak. books - bu Book classidan iborat ro'yxat. Author classida quyidagi metodlar bo'lishi kerak: add_book ( book ) - yangi kitob qo'shish. display_books() - muallifga tegishli kitoblarni ko'rsatish. class Author: # Bu yerga kod yozing Barcha Tuzilmalarni Qo'llash Yangi dastur yarating, unda Library classini yarating. Library classida quyidagi atributlar bo'lishi kerak: name ( kutubxona nomi ) books ( kitoblar ro'yxati ) Library classida quyidagi metodlar bo'lishi kerak: add_book ( book ) - kutubxonaga kitob qo'shish. remove_book ( title ) - kutubxonadan kitobni olib tashlash. display_books() - kutubxonadagi kitoblarni ko'rsatish. class Library: # Bu yerga kod yozing Avtobus classini yaratish Bus classini yarating, bu class quyidagi atributlarga ega bo'lishi kerak: bus_number ( avtobus raqami ) capacity ( sig'imi ) passengers ( yo'lovchilar ro'yxati ) Bus classida quyidagi metodlar bo'lishi kerak: add_passenger ( passenger ) - avtobusga yo'lovchi qo'shish. remove_passenger ( passenger ) - avtobusdan yo'lovchini olib tashlash. display_passengers() - avtobusdagi barcha yo'lovchilarni ko'rsatish. class Bus: # Bu yerga kod yozing Avtobusdan meros olish DoubleDeckerBus classini Bus classidan meros qilib oling. Bu classda qo'shimcha atributlar sifatida upper_capacity (yuqori qavat sig'imi) va lower_capacity (pastki qavat sig'imi) bo'lishi kerak. DoubleDeckerBus klassida add_passenger metodini yangilang, shunda u har ikki qavatda yo'lovchilarni hisobga olishi kerak. class Bus: # Bu yerga kod yozing class DoubleDeckerBus(Bus): # Bu yerga kod yozing Mashinalar garaji Garage classini yarating, bu classda quyidagi atributlar bo'lishi kerak: name ( garaj nomi ) cars ( mashinalar ro'yxati ) Garage classida quyidagi metodlar bo'lishi kerak: add_car ( car ) - garajga mashina qo'shish. remove_car ( car ) - garajdan mashinani olib tashlash. display_cars() - garajdagi barcha mashinalarni ko'rsatish. class Garage: # Bu yerga kod yozing Qo'shimcha muallif classini yaratish Publisher classini yarating, unda name va books atributlari bo'lishi kerak. books - bu Book classidan iborat ro'yxat. Publisher classida quyidagi metodlar bo'lishi kerak: add_book ( book ) - nashriyotga kitob qo'shish. remove_book ( title ) - nashriyotdan kitobni olib tashlash. display_books() - nashriyotdagi kitoblarni ko'rsatish. class Publisher: # Bu yerga kod yozing","title":"AMALIYOT"},{"location":"python/operators/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 3-DARS OPERATORS Python operatorlarini quyidagi guruhlarga bo'lish mumkin: Arifmetik operatorlar Taqqoslash operatorlari Mantiqiy operatorlar Bitwise (Bitli) operatorlar Tayinlash (Assign) operatorlari A'zolik (Membership) operatorlari Identifikatsiya (Identity) operatorlari Aralashtirilgan operatorlar (Mixed Operators) \u2705 ARIFMETIK OPERATORLAR \ud83d\udccc Python dasturlash tilida arifmetik operatorlar \u2014 sonlar ustida hisob-kitob qilish uchun ishlatiladigan maxsus belgilar yoki ifodalardir. Ular yordamida qo\u2018shish, ayirish, ko\u2018paytirish, bo\u2018lish kabi oddiy matematik amallarni bajarish mumkin. # a va b o'zgaruvchilariga qiymat beramiz a = 10 b = 3 # Qo\u2018shish amali: a + b yigindi = a + b print(yigindi) # Natija: 13 # Ayirish amali: a - b ayirma = a - b print(ayirma) # Natija: 7 # Ko\u2018paytirish amali: a * b kopaytma = a * b print(kopaytma) # Natija: 30 # Bo\u2018lish amali (natija float): a / b bolish = a / b print(bolish) # Natija: 3.3333333333333335 # Butun qismga bo\u2018lish: a // b (natija butun son) butun_qism = a // b print(butun_qism) # Natija: 3 # Qoldiqni topish: a % b qoldiq = a % b print(qoldiq) # Natija: 1 # Darajaga ko\u2018tarish: a ** b (10 ning 3-darajasi) daraja = a ** b print(daraja) # Natija: 1000 \u2705 TAQQOSLASH OPERATORLARI \ud83d\udccc Python dasturlash tilida taqqoslash operatorlari (comparison operators) \u2014 ikki qiymatni taqqoslash uchun ishlatiladi. Ular natijada True yoki False (ya'ni mantiqiy qiymat) qaytaradi. 1. \u2747\ufe0f TENGMI == Ikkita qiymat teng bo\u2018lsa, True , aks holda False qaytaradi. # 'a' o'zgaruvchisiga 5 soni berilyapti a = 5 # 'b' o'zgaruvchisiga 3 soni berilyapti b = 3 # 'result' o'zgaruvchisiga 'a' va 'b' tengmi degan shart natijasi berilyapti # Bu yerda 5 == 3 bo'lmagani uchun natija False bo'ladi result = (a == b) # False, chunki 5 \u2260 3 # 'result' o'zgaruvchisini ekranga chiqaramiz print(result) # Natija: False 2. \u2747\ufe0f TENG EMAS != \ud83d\udccc Qiymatlar bir-biriga teng bo\u2018lmasa, True qaytaradi. # 'a' o'zgaruvchisiga 5 soni berilyapti a = 5 # 'b' o'zgaruvchisiga 3 soni berilyapti b = 3 # 'result' o'zgaruvchisiga 'a' va 'b' teng emasmi degan shart natijasi berilyapti # Bu yerda 5 != 3 bo'lgani uchun natija True bo'ladi result = (a != b) # True, chunki 5 \u2260 3 # 'result' o'zgaruvchisini ekranga chiqaramiz print(result) # Natija: True 3. \u2747\ufe0f KATTA > \ud83d\udccc Chap tomondagi qiymat o\u2018ng tomondagidan katta bo\u2018lsa, True . # 'a' o'zgaruvchisiga 5 soni berilyapti a = 5 # 'b' o'zgaruvchisiga 3 soni berilyapti b = 3 # 'result' o'zgaruvchisiga 'a' > 'b' sharti natijasi berilyapti # Bu yerda 5 > 3 bo'lgani uchun natija True bo'ladi result = (a > b) # True, chunki 5 > 3 # 'result' o'zgaruvchisini ekranga chiqaramiz print(result) # Natija: True 4. \u2747\ufe0f KICHIK < \ud83d\udccc Chap tomondagi qiymat o\u2018ng tomondagidan kichik bo\u2018lsa, True . # 'a' o'zgaruvchisiga 5 soni berilyapti a = 5 # 'b' o'zgaruvchisiga 3 soni berilyapti b = 3 # 'result' o'zgaruvchisiga 'a' < 'b' (ya'ni 5 < 3) sharti tekshirilmoqda # Bu shart noto\u2018g\u2018ri, chunki 5 kichik emas 3 dan \u2014 natija: False result = (a < b) # False, chunki 5 < 3 emas # 'result' o'zgaruvchisini ekranga chiqaramiz print(result) # Natija: False 5. \u2747\ufe0f KATTA YOKI TENG >= \ud83d\udccc Agar chap tomondagi qiymat katta yoki teng bo\u2018lsa, True . # 'a' o'zgaruvchisiga 5 soni berilyapti a = 5 # 'b' o'zgaruvchisiga 3 soni berilyapti b = 3 # 'result' o'zgaruvchisiga 'a' >= 'b' (ya'ni 5 katta yoki teng 3) sharti tekshirilmoqda # Bu shart to\u2018g\u2018ri, chunki 5 katta 3 dan \u2014 natija: True result = (a >= b) # True, chunki 5 >= 3 # 'result' o'zgaruvchisini ekranga chiqaramiz print(result) # Natija: True 6. \u2747\ufe0f KICHIK YOKI TENG (<=) \ud83d\udccc Agar chap tomondagi qiymat kichik yoki teng bo\u2018lsa, True . # 'a' o'zgaruvchisiga 5 soni berilyapti a = 5 # 'b' o'zgaruvchisiga 3 soni berilyapti b = 3 # 'result' o'zgaruvchisiga 'a' <= 'b' (ya'ni 5 kichik yoki teng 3) sharti tekshirilmoqda # Bu shart noto\u2018g\u2018ri, chunki 5 kichik emas va 5 teng ham emas 3 ga \u2014 natija: False result = (a <= b) # False, chunki 5 <= 3 emas # 'result' o'zgaruvchisini ekranga chiqaramiz print(result) # Natija: False \u2705 MANTIQIY OPERATORLAR \ud83d\udccc Python dasturlash tilida mantiqiy operatorlar (logical operators) shartlarni solishtirishda ishlatiladi va ular True yoki False qiymatlar bilan ishlaydi. Ular bir nechta shartlarni birlashtirish yoki tahlil qilish uchun qo\u02bbllaniladi. 1. \u2747\ufe0f AND \ud83d\udccc Bu operator ikkala shart True bo\u02bblsa, True qaytaradi. # 'a' o'zgaruvchisiga True (rost) qiymati berilmoqda a = True # 'b' o'zgaruvchisiga False (yolg'on) qiymati berilmoqda b = False # 'result' o'zgaruvchisiga 'a and b' mantiqiy ifodasi natijasi berilmoqda # AND operatori ikkala qiymat ham True bo'lsa, True qaytaradi. Aks holda False. # Bu yerda: True and False \u2192 natija: False result = a and b # result False ga teng bo'ladi # 'result' ni ekranga chiqaramiz print(result) # Natija: False 2. \u2747\ufe0f OR \ud83d\udccc Hech bo'lmaganda bitta shart True bo'lsa, natija True bo'ladi, aks holda False . # 'a' o'zgaruvchisiga True (rost) qiymati berilyapti a = True # 'b' o'zgaruvchisiga False (yolg'on) qiymati berilyapti b = False # 'result' o'zgaruvchisiga 'a or b' mantiqiy ifodasi natijasi berilyapti # OR operatori ikkala qiymatdan hech bo'lmaganda bittasi True bo'lsa, True qaytaradi # Bu yerda: True or False \u2192 natija: True result = a or b # result True ga teng bo'ladi # 'result' o'zgaruvchisini ekranga chiqaramiz print(result) # Natija: True 3. \u2747\ufe0f NOT \ud83d\udccc Shartning mantiqiy qiymatini teskariga o'zgartiradi ( True bo'lsa False ga, False bo'lsa True ga). # 'a' o'zgaruvchisiga True (rost) qiymati berilyapti a = True # 'result' o'zgaruvchisiga 'not a' ifodasi natijasi berilmoqda # NOT operatori qiymatni teskarisiga o'zgartiradi: True \u2192 False, False \u2192 True # Bu yerda: not True \u2192 False result = not a # result False ga teng bo'ladi # 'result' o'zgaruvchisini ekranga chiqaramiz print(result) # Natija: False \ud83d\udccc Quyidagi misolda mantiqiy operatorlar qanday ishlashini ko'rishimiz mumkin: # 'a' o'zgaruvchisiga 8 soni berilmoqda a = 8 # 'b' o'zgaruvchisiga 12 soni berilmoqda b = 12 # 'c' o'zgaruvchisiga 8 soni berilmoqda c = 8 # 'd' o'zgaruvchisiga 15 soni berilmoqda d = 15 # AND operatorlari bilan uchta shart tekshirilmoqda: # (a == c) \u2192 8 == 8 \u2192 True # (b > a) \u2192 12 > 8 \u2192 True # (d % 5 == 0) \u2192 15 % 5 == 0 \u2192 0 == 0 \u2192 True # AND operatori bilan bog\u2018langan barcha shartlar True bo\u2018lsa, umumiy natija ham True bo'ladi result = (a == c) and (b > a) and (d % 5 == 0) # True: chunki a va c teng, b a dan katta, d esa 5 ga bo'linadi # Natijani ekranga chiqaramiz print(result) # True # 'x' o'zgaruvchisiga 3 soni berilmoqda x = 3 # 'y' o'zgaruvchisiga 7 soni berilmoqda y = 7 # 'z' o'zgaruvchisiga 10 soni berilmoqda z = 10 # OR operatorlari bilan uchta shart tekshirilmoqda: # (x > y) \u2192 3 > 7 \u2192 False # (z == 10) \u2192 10 == 10 \u2192 True # (y < 5) \u2192 7 < 5 \u2192 False # OR operatorida hech bo\u2018lmaganda bitta shart True bo\u2018lsa, umumiy natija True bo\u2018ladi result = (x > y) or (z == 10) or (y < 5) # True: chunki faqat (z == 10) sharti True # Natijani ekranga chiqaramiz print(result) # True # 'a' o'zgaruvchisiga 4 soni berilmoqda a = 4 # 'b' o'zgaruvchisiga 9 soni berilmoqda b = 9 # Quyidagi ifodada birinchi navbatda AND operatori ishlaydi: # (a < b) \u2192 4 < 9 \u2192 True # (b < 10) \u2192 9 < 10 \u2192 True # Demak: (a < b) and (b < 10) \u2192 True and True \u2192 True # NOT operatori esa ifodani inkor qiladi: not True \u2192 False result = not ((a < b) and (b < 10)) # (a < b) and (b < 10) \u2192 True, lekin not uni False qiladi # Natijani ekranga chiqaramiz print(result) # False # 'x' o'zgaruvchisiga 6 soni berilmoqda x = 6 # 'y' o'zgaruvchisiga 12 soni berilmoqda y = 12 # 'z' o'zgaruvchisiga 6 soni berilmoqda z = 6 # Butun ifoda ikki qismdan iborat: # 1-qism: (x == z or y < 10) # (x == z) \u2192 6 == 6 \u2192 True # (y < 10) \u2192 12 < 10 \u2192 False # OR operatori bor, shuning uchun hech bo\u2018lmaganda bitta shart True bo\u2018lsa, natija: True # 2-qism: not (y % 2 != 0) # (y % 2 != 0) \u2192 12 % 2 \u2192 0 \u2192 0 != 0 \u2192 False # not False \u2192 True # Yakuniy ifoda: # True and True \u2192 natija: True result = (x == z or y < 10) and not (y % 2 != 0) # Natijani ekranga chiqaramiz print(result) # True # 'is_logged_in' \u2014 foydalanuvchi tizimga kirganmi? \u2192 True (ha, kirgan) is_logged_in = True # 'is_admin' \u2014 foydalanuvchi adminmi? \u2192 False (yo\u2018q, admin emas) is_admin = False # 'has_permission' \u2014 foydalanuvchining kerakli ruxsatlari bormi? \u2192 True (ha, bor) has_permission = True # Yakuniy mantiqiy ifoda: # Foydalanuvchi tizimga kirgan bo\u2018lishi kerak (is_logged_in \u2192 True) # Ruxsati bo\u2018lishi kerak (has_permission \u2192 True) # Va admin bo\u2018lmasligi kerak (not is_admin \u2192 not False \u2192 True) # Shartlar: True and True and True \u2192 natija: True result = is_logged_in and has_permission and not is_admin # Natijani ekranga chiqaramiz print(result) # True \u2705 BITWISE(BITLI) OPERATORLAR \ud83d\udccc Bitwise operatorlar \u2014 bu sonlar ustida 0 va 1 lar bilan ishlaydigan maxsus amallar. Kompyuter har bir sonni ichida faqat 0 va 1 larda saqlaydi (buni ikkilik son deyiladi). Bitwise operatorlar ana shu 0 va 1 larni solishtirib hisob-kitob qiladi. \u2747\ufe0f AND ( & ) \ud83d\udccc Bu operator ikkala sonning mos bitlarini AND amali bilan solishtiradi. Ikkala bit ham 1 bo'lsa, natija 1 , aks holda 0 . # a o'zgaruvchiga 5 soni berilmoqda # 5 ning ikkilik (binary) ko'rinishi: 0101 a = 5 # b o'zgaruvchiga 3 soni berilmoqda # 3 ning ikkilik (binary) ko'rinishi: 0011 b = 3 # a va b o'zgaruvchilari ustida bitwise AND (&) amali bajarilmoqda # a: 0101 # b: 0011 # ---- # & 0001 --> faqat ikkala bit ham 1 bo'lgan joyda natija 1 bo'ladi natija = a & b # natijani ekranga chiqaramiz # 0001 bu 10lik sanoq sistemasida 1 ga teng print(natija) \u2747\ufe0f OR ( | ) \ud83d\udccc Bu operator ikkala sonning mos bitlarini OR amali bilan solishtiradi. Kamida bitta bit 1 bo'lsa, natija 1 , aks holda 0 . # a o'zgaruvchiga 5 soni berilmoqda # 5 ning ikkilik (binary) ko'rinishi: 0101 a = 5 # b o'zgaruvchiga 3 soni berilmoqda # 3 ning ikkilik (binary) ko'rinishi: 0011 b = 3 # a va b ustida bitwise OR (|) operatori bajarilmoqda # a: 0101 # b: 0011 # ---- # | 0111 --> har ikkala bitdan hech bo'lmaganda biri 1 bo'lsa, natijada 1 bo'ladi natija = a | b # natijani ekranga chiqaramiz # 0111 bu 10lik sanoq sistemasida 7 ga teng print(natija) \u2747\ufe0f XOR ( ^ ) \ud83d\udccc Bu operator ikkala sonning mos bitlarini XOR amali bilan solishtiradi. Agar bitta bit 1 , ikkinchisi 0 bo'lsa, natija 1 , aks holda 0 . # a o'zgaruvchiga 5 soni berilmoqda # 5 ning ikkilik (binary) ko'rinishi: 0101 a = 5 # b o'zgaruvchiga 3 soni berilmoqda # 3 ning ikkilik (binary) ko'rinishi: 0011 b = 3 # a va b ustida bitwise XOR (^) operatori bajarilmoqda # a: 0101 # b: 0011 # ---- # ^ 0110 --> faqat bitta bit 1 bo'lsa (ya'ni faqat 1 yoki faqat 0 bo'lsa), natija 1 bo'ladi # agar ikkala bit bir xil bo\u2018lsa (0-0 yoki 1-1) natija 0 bo\u2018ladi natija = a ^ b # natijani ekranga chiqaramiz # 0110 bu 10lik sanoq sistemasida 6 ga teng print(natija) \u2747\ufe0f NOT ( ~ ) \ud83d\udccc Bu operator bitlarning qarama-qarshi qiymatini qaytaradi. 0 ni 1 ga, 1 ni 0 ga o'zgartiradi. Python tilida ~x = -x-1 deb qabul qilinadi. # a o'zgaruvchiga 5 soni berilmoqda # 5 ning ikkilik (binary) ko'rinishi: 0101 a = 5 # bitwise NOT (~) operatori a ustida qo'llanilmoqda # ~a bu bitlarning inkori (teskari qiymati) degani # Python tilida bu quyidagicha ishlaydi: ~x = -x - 1 # ~5 = -5 - 1 = -6 # Yoki binary orqali tushuntirsak: # 5 -> 0000 0101 # ~5 -> 1111 1010 (ya'ni 2 ning komplementi orqali -6 bo'ladi) natija = ~a # natijani ekranga chiqaramiz # natija: -6 print(natija) \u2747\ufe0f LEFT SHIFT ( << ) \ud83d\udccc Bu operator bitlarni chapga siljitadi va o'ng tomonga 0 qo'shadi. Har bir siljitish operatsiyasi bitlarning qiymatini 2 ga ko'paytiradi. # a o'zgaruvchiga 5 soni berilmoqda # 5 ning ikkilik (binary) ko'rinishi: 0101 a = 5 # a << 1 bu bitlarni 1 pozitsiyaga chapga siljitish degani # 0101 (5) chapga 1 ta siljisa: 1010 bo'ladi # bu 10 lik sanoq sistemasida 10 ga teng # Har bir chapga siljitish qiymatni 2 ga ko'paytiradi: # 5 << 1 = 5 * 2 = 10 natija = a << 1 # natijani ekranga chiqaramiz # natija: 10 print(natija) \u2747\ufe0f RIGHT SHIFT ( >> ) \ud83d\udccc Bu operator bitlarni o'ngga siljitadi va chap tomonga 0 yoki sonning ishorasi ( positive / negative sign ) qo'yiladi. Har bir siljitish operatsiyasi bitlarning qiymatini 2 ga kamaytiradi. # a o'zgaruvchiga 5 soni berilmoqda # 5 ning ikkilik (binary) ko'rinishi: 0101 a = 5 # a >> 1 bu bitlarni 1 pozitsiyaga o'ngga siljitish degani # 0101 (5) o'ngga 1 ta siljisa: 0010 bo'ladi # bu 10 lik sanoq sistemasida 2 ga teng # Har bir o'ngga siljitish qiymatni 2 ga kamaytiradi: # 5 >> 1 = 5 // 2 = 2 natija = a >> 1 # natijani ekranga chiqaramiz # natija: 2 print(natija) EXTRA EXAMPLES AND , OR , XOR operatorlari bilan: # a o'zgaruvchiga 12 soni berilmoqda # 12 ning ikkilik (binary) ko\u2018rinishi: 1100 a = 12 # b o'zgaruvchiga 6 soni berilmoqda # 6 ning ikkilik (binary) ko\u2018rinishi: 0110 b = 6 # AND (&) operatori: faqat ikkala bit ham 1 bo\u2018lsa, natija 1 bo\u2018ladi # 1100 # &0110 # ---- # 0100 \u2192 10likda bu 4 ga teng natija_and = a & b # OR (|) operatori: kamida bittasi 1 bo\u2018lsa, natija 1 bo\u2018ladi # 1100 # |0110 # ---- # 1110 \u2192 10likda bu 14 ga teng natija_or = a | b # XOR (^) operatori: agar bitlar turlicha bo\u2018lsa, natija 1 bo\u2018ladi # 1100 # ^0110 # ---- # 1010 \u2192 10likda bu 10 ga teng natija_xor = a ^ b # AND natijani ekranga chiqaramiz print(natija_and) # 4 # OR natijani ekranga chiqaramiz print(natija_or) # 14 # XOR natijani ekranga chiqaramiz print(natija_xor) # 10 NOT , chapga va o'ngga siljitish bilan: # x o'zgaruvchiga 7 qiymati berilmoqda # 7 ning ikkilik (binary) ko\u2018rinishi: 0111 x = 7 # NOT (~) operatori: barcha bitlarni teskari qiladi (1\u21920, 0\u21921) # ~0111 \u2192 1000 (lekin bu -8 bo\u2018ladi, chunki bu bitlar manfiy son sifatida talqin qilinadi) # Pythonda ~x bu -x-1 bo\u2018ladi: ~7 = -7 - 1 = -8 natija_not = ~x # -8 # CHAPGA siljitish (<<): bitlarni chapga siljitadi, har bir siljitish 2 baravar oshadi # 0111 << 2 \u2192 11100 (ya'ni 7 * 2 * 2 = 28) chapga = x << 2 # 28 # O\u2018NGGA siljitish (>>): bitlarni o\u2018ngga siljitadi, har bir siljitish 2 ga kamaytiradi # 0111 >> 2 \u2192 0001 (ya'ni 7 // 2 // 2 = 1) ongga = x >> 2 # 1 # NOT natijani chiqaramiz print(natija_not) # -8 # CHAPGA siljitish natijasini chiqaramiz print(chapga) # 28 # O\u2018NGGA siljitish natijasini chiqaramiz print(ongga) # 1 \u2705 TAYINLASH(ASSIGN) OPERATORALRI \ud83d\udccc Pythonda tayinlash operatorlari yordamida o\u2018zgaruvchiga qiymat beriladi. Shuningdek, ba\u2019zi operatorlar matematik amalni bajarib, natijani o\u2018sha o\u2018zgaruvchining o\u2018ziga yozib qo\u2018yadi. \u2747\ufe0f = \ud83d\udccc Bu operator bilan o\u2018zgaruvchiga qiymat beriladi. x = 10 y = 5 \u2747\ufe0f += \ud83d\udccc Bu operator orqali x ga biror son qo\u2018shiladi va natija yana x ga yoziladi. x = 10 x += 5 # x endi 15 ga teng bo'ladi \u2747\ufe0f -= \ud83d\udccc Bu operator orqali x dan son ayriladi va natija x ga yoziladi. x = 10 x -= 3 # x endi 7 ga teng bo'ladi \u2747\ufe0f *= \ud83d\udccc Bu operator orqali x ga biror son ko\u2018paytiriladi va natija x ga yoziladi. x = 4 x *= 2 # x endi 8 ga teng bo'ladi \u2747\ufe0f /= \ud83d\udccc Bu operator orqali x bo\u2018linadi va natija kasr (float) ko\u2018rinishda saqlanadi. x = 20 x /= 4 # x endi 5.0 ga teng bo'ladi (natija float turida bo'ladi) Bu operator orqali x dan y bo\u2018linadi va qoldiq x ga yoziladi. \u2747\ufe0f %= \ud83d\udccc Bu operator orqali x dan y bo\u2018linadi va qoldiq x ga yoziladi. x = 10 x %= 3 # x endi 1 ga teng bo'ladi (qoldiq) \u2747\ufe0f **= \ud83d\udccc Bu operator orqali x o\u2018zining darajasiga oshiriladi va natija x ga yoziladi. x = 3 x **= 2 # x endi 9 ga teng bo'ladi (3^2 = 9) \u2747\ufe0f //= \ud83d\udccc Bu operator orqali x bo\u2018linadi, lekin faqat butun qismi olinadi. x = 10 x //= 3 # x endi 3 ga teng bo'ladi (butun qismini oladi) A'ZOLIK(MEMBERSHIP) OPERATORLARI Pythonda a'zolik (membership) operatorlari ma'lum bir elementning ketma-ketlik ( sequence ), masalan, ro'yxat ( list ), qator ( string ) yoki to'plam ( set ) ichida mavjudligini tekshirish uchun ishlatiladi. in operatori Bu operator yordamida elementning ma'lum bir ketma-ketlikda mavjudligini tekshirish mumkin. mevalar = ['olma', 'banan', 'nok'] if 'olma' in mevalar: print(\"Olma ro'yxatda mavjud.\") Natija: Olma ro'yxatda mavjud. Bu yerda olma in mevalar ifodasi True qiymatini qaytaradi, chunki olma mevalar ro'yxatida mavjud. not in operatori Bu operator yordamida elementning ma'lum bir ketma-ketlikda mavjud emasligini tekshirish mumkin. mevalar = ['olma', 'banan', 'nok'] if 'uzum' not in mevalar: print(\"Uzum ro'yxatda mavjud emas.\") Natija: Uzum ro'yxatda mavjud emas. Yuqorida uzum not in mevalar ifodasi True qiymatini qaytaradi, chunki 'uzum' mevalar ro'yxatida mavjud emas. Stringlarda misollar A'zolik operatorlari qatorlar ( string ) bilan ham ishlaydi. Kichik qatorning kattaroq qator ichida mavjud yoki mavjud emasligini tekshirish mumkin. matn = \"Salom dunyo\" if 'dunyo' in matn: print(\"'dunyo' matn ichida mavjud.\") IDENTIFIKATSIYA(IDENTYFY) OPERATORLARI Pythonda identifikatsiya (identity) operatorlari ikki ob'ektning bir xil xotira joylashuvida saqlanayotganini aniqlash uchun ishlatiladi. Bu operatorlar ob'ektlarning identifikatorlarini solishtiradi, ya'ni ikki o'zgaruvchining aslida bitta ob'ektga ishora qilayotganini tekshiradi. is operatori is operatori yordamida ikkita o'zgaruvchining bir xil ob'ektga ishora qilayotganligini tekshirish mumkin. a = [1, 2, 3] b = a if a is b: print(\"a va b bir xil ob'ekt.\") Natija: a va b bir xil ob'ekt. Yuqorida a va b bir xil ro'yxatga ishora qilmoqda, shuning uchun a is b ifodasi True qiymatini qaytaradi. is not operatori is not operatori yordamida ikkita o'zgaruvchining bir xil obyektga ishora qilmayotganini tekshirish mumkin. a = [1, 2, 3] b = [1, 2, 3] if a is not b: print(\"a va b bir xil ob'ekt emas.\") Natija: a va b bir xil ob'ekt emas. Yuqorida a va b bir xil qiymatlarni o'z ichiga olgan bo'lsa ham, ular alohida ob'ektlar. Shuning uchun a is not b ifodasi True qiymatini qaytaradi. Identifikatsiya operatorlarining ishlash prinsipi Identifikatsiya operatorlari ob'ektlarning xotira joylashuvini tekshiradi, ya'ni ob'ektlarning ID raqamlarini solishtiradi. a = [1, 2, 3] b = [1, 2, 3] print(id(a)) # a ob'ektining ID raqami print(id(b)) # b ob'ektining ID raqami Agar a va b ID raqamlari turli bo'lsa, demak ular alohida obyektlar. ARALASHTIRILGAN OPERATORLAR(MIXED OPERATORS) Python dasturlash tilida aralashtirilgan operatorlar ( mixed operators ) deganda bir nechta turli operatorlarni bitta ifodada ishlatish tushuniladi. Bu ifodalar matematik va mantiqiy amallarni birlashtirib, ancha murakkab hisob-kitoblar yoki shartlarni aniqlashga yordam beradi. Quyida aralashtirilgan operatorlardan foydalanish misollari keltirilgan: Arifmetik va mantiqiy operatorlar aralashmasi x = 10 y = 5 z = 20 natija = (x + y) * z > 100 and z % y == 0 print(natija) Natija: True Yuqoridagi (x + y) * z > 100 and z % y == 0 ifodasi arifmetik ( +, *, % ) va mantiqiy ( and ) operatorlar aralashmasidan iborat. Ifoda birinchi bo'lib (x + y) * z > 100 qismini hisoblaydi, so'ngra z % y == 0 qismini tekshiradi va oxirida and operatori yordamida natijalarni birlashtiradi. Arifmetik va solishtirish operatorlari aralashmasi a = 7 b = 3 natija = a * 2 > b + 5 print(natija) Natija: True Yuqorida a * 2 > b + 5 ifodasi avval a * 2 va b + 5 qismlarini hisoblaydi, keyin esa ularni > solishtirish operatori bilan solishtiradi. Shartli ( ternary ) ifoda va arifmetik operatorlar a = 10 b = 5 max_qiymat = a if a > b else b print(max_qiymat) Natija: 10 Yuqoridagi misolda a if a > b else b shartli ifoda yordamida aralashtirilgan operatorlar orqali a va b ning maksimal qiymatini aniqlaymiz. AMALIYOT Ikkita o'zgaruvchi yarating va ularning qiymatlarini qo'shib natijani ekranga chiqaruvchi dastur yozing. Foydalanuvchi tomonidan kiritilgan ikkita sonning ayirmasini hisoblab ekranga chiqaruvchi dastur yozing. Ikkita o'zgaruvchi yarating va ularni bo'lgandan keyin butun qismini ekranga chiqaruvchi dastur yozing. Foydalanuvchi tomonidan kiritilgan ikkita sonni bo'lgandan keyin qoldig'ini ekranga chiqaruvchi dastur yozing.","title":"Operatos"},{"location":"python/operators/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/operators/#3-dars-operators","text":"Python operatorlarini quyidagi guruhlarga bo'lish mumkin: Arifmetik operatorlar Taqqoslash operatorlari Mantiqiy operatorlar Bitwise (Bitli) operatorlar Tayinlash (Assign) operatorlari A'zolik (Membership) operatorlari Identifikatsiya (Identity) operatorlari Aralashtirilgan operatorlar (Mixed Operators)","title":"\ud83e\udde9 3-DARS OPERATORS"},{"location":"python/operators/#arifmetik-operatorlar","text":"\ud83d\udccc Python dasturlash tilida arifmetik operatorlar \u2014 sonlar ustida hisob-kitob qilish uchun ishlatiladigan maxsus belgilar yoki ifodalardir. Ular yordamida qo\u2018shish, ayirish, ko\u2018paytirish, bo\u2018lish kabi oddiy matematik amallarni bajarish mumkin. # a va b o'zgaruvchilariga qiymat beramiz a = 10 b = 3 # Qo\u2018shish amali: a + b yigindi = a + b print(yigindi) # Natija: 13 # Ayirish amali: a - b ayirma = a - b print(ayirma) # Natija: 7 # Ko\u2018paytirish amali: a * b kopaytma = a * b print(kopaytma) # Natija: 30 # Bo\u2018lish amali (natija float): a / b bolish = a / b print(bolish) # Natija: 3.3333333333333335 # Butun qismga bo\u2018lish: a // b (natija butun son) butun_qism = a // b print(butun_qism) # Natija: 3 # Qoldiqni topish: a % b qoldiq = a % b print(qoldiq) # Natija: 1 # Darajaga ko\u2018tarish: a ** b (10 ning 3-darajasi) daraja = a ** b print(daraja) # Natija: 1000","title":"\u2705 ARIFMETIK OPERATORLAR"},{"location":"python/operators/#taqqoslash-operatorlari","text":"\ud83d\udccc Python dasturlash tilida taqqoslash operatorlari (comparison operators) \u2014 ikki qiymatni taqqoslash uchun ishlatiladi. Ular natijada True yoki False (ya'ni mantiqiy qiymat) qaytaradi.","title":"\u2705 TAQQOSLASH OPERATORLARI"},{"location":"python/operators/#1-tengmi","text":"Ikkita qiymat teng bo\u2018lsa, True , aks holda False qaytaradi. # 'a' o'zgaruvchisiga 5 soni berilyapti a = 5 # 'b' o'zgaruvchisiga 3 soni berilyapti b = 3 # 'result' o'zgaruvchisiga 'a' va 'b' tengmi degan shart natijasi berilyapti # Bu yerda 5 == 3 bo'lmagani uchun natija False bo'ladi result = (a == b) # False, chunki 5 \u2260 3 # 'result' o'zgaruvchisini ekranga chiqaramiz print(result) # Natija: False","title":"1. \u2747\ufe0f TENGMI =="},{"location":"python/operators/#2-teng-emas","text":"\ud83d\udccc Qiymatlar bir-biriga teng bo\u2018lmasa, True qaytaradi. # 'a' o'zgaruvchisiga 5 soni berilyapti a = 5 # 'b' o'zgaruvchisiga 3 soni berilyapti b = 3 # 'result' o'zgaruvchisiga 'a' va 'b' teng emasmi degan shart natijasi berilyapti # Bu yerda 5 != 3 bo'lgani uchun natija True bo'ladi result = (a != b) # True, chunki 5 \u2260 3 # 'result' o'zgaruvchisini ekranga chiqaramiz print(result) # Natija: True","title":"2. \u2747\ufe0f TENG EMAS !="},{"location":"python/operators/#3-katta","text":"\ud83d\udccc Chap tomondagi qiymat o\u2018ng tomondagidan katta bo\u2018lsa, True . # 'a' o'zgaruvchisiga 5 soni berilyapti a = 5 # 'b' o'zgaruvchisiga 3 soni berilyapti b = 3 # 'result' o'zgaruvchisiga 'a' > 'b' sharti natijasi berilyapti # Bu yerda 5 > 3 bo'lgani uchun natija True bo'ladi result = (a > b) # True, chunki 5 > 3 # 'result' o'zgaruvchisini ekranga chiqaramiz print(result) # Natija: True","title":"3. \u2747\ufe0f KATTA &gt;"},{"location":"python/operators/#4-kichik","text":"\ud83d\udccc Chap tomondagi qiymat o\u2018ng tomondagidan kichik bo\u2018lsa, True . # 'a' o'zgaruvchisiga 5 soni berilyapti a = 5 # 'b' o'zgaruvchisiga 3 soni berilyapti b = 3 # 'result' o'zgaruvchisiga 'a' < 'b' (ya'ni 5 < 3) sharti tekshirilmoqda # Bu shart noto\u2018g\u2018ri, chunki 5 kichik emas 3 dan \u2014 natija: False result = (a < b) # False, chunki 5 < 3 emas # 'result' o'zgaruvchisini ekranga chiqaramiz print(result) # Natija: False","title":"4. \u2747\ufe0f KICHIK &lt;"},{"location":"python/operators/#5-katta-yoki-teng","text":"\ud83d\udccc Agar chap tomondagi qiymat katta yoki teng bo\u2018lsa, True . # 'a' o'zgaruvchisiga 5 soni berilyapti a = 5 # 'b' o'zgaruvchisiga 3 soni berilyapti b = 3 # 'result' o'zgaruvchisiga 'a' >= 'b' (ya'ni 5 katta yoki teng 3) sharti tekshirilmoqda # Bu shart to\u2018g\u2018ri, chunki 5 katta 3 dan \u2014 natija: True result = (a >= b) # True, chunki 5 >= 3 # 'result' o'zgaruvchisini ekranga chiqaramiz print(result) # Natija: True","title":"5. \u2747\ufe0f KATTA YOKI TENG &gt;="},{"location":"python/operators/#6-kichik-yoki-teng","text":"\ud83d\udccc Agar chap tomondagi qiymat kichik yoki teng bo\u2018lsa, True . # 'a' o'zgaruvchisiga 5 soni berilyapti a = 5 # 'b' o'zgaruvchisiga 3 soni berilyapti b = 3 # 'result' o'zgaruvchisiga 'a' <= 'b' (ya'ni 5 kichik yoki teng 3) sharti tekshirilmoqda # Bu shart noto\u2018g\u2018ri, chunki 5 kichik emas va 5 teng ham emas 3 ga \u2014 natija: False result = (a <= b) # False, chunki 5 <= 3 emas # 'result' o'zgaruvchisini ekranga chiqaramiz print(result) # Natija: False","title":"6. \u2747\ufe0f KICHIK YOKI TENG (&lt;=)"},{"location":"python/operators/#mantiqiy-operatorlar","text":"\ud83d\udccc Python dasturlash tilida mantiqiy operatorlar (logical operators) shartlarni solishtirishda ishlatiladi va ular True yoki False qiymatlar bilan ishlaydi. Ular bir nechta shartlarni birlashtirish yoki tahlil qilish uchun qo\u02bbllaniladi.","title":"\u2705 MANTIQIY OPERATORLAR"},{"location":"python/operators/#1-and","text":"\ud83d\udccc Bu operator ikkala shart True bo\u02bblsa, True qaytaradi. # 'a' o'zgaruvchisiga True (rost) qiymati berilmoqda a = True # 'b' o'zgaruvchisiga False (yolg'on) qiymati berilmoqda b = False # 'result' o'zgaruvchisiga 'a and b' mantiqiy ifodasi natijasi berilmoqda # AND operatori ikkala qiymat ham True bo'lsa, True qaytaradi. Aks holda False. # Bu yerda: True and False \u2192 natija: False result = a and b # result False ga teng bo'ladi # 'result' ni ekranga chiqaramiz print(result) # Natija: False","title":"1. \u2747\ufe0f AND"},{"location":"python/operators/#2-or","text":"\ud83d\udccc Hech bo'lmaganda bitta shart True bo'lsa, natija True bo'ladi, aks holda False . # 'a' o'zgaruvchisiga True (rost) qiymati berilyapti a = True # 'b' o'zgaruvchisiga False (yolg'on) qiymati berilyapti b = False # 'result' o'zgaruvchisiga 'a or b' mantiqiy ifodasi natijasi berilyapti # OR operatori ikkala qiymatdan hech bo'lmaganda bittasi True bo'lsa, True qaytaradi # Bu yerda: True or False \u2192 natija: True result = a or b # result True ga teng bo'ladi # 'result' o'zgaruvchisini ekranga chiqaramiz print(result) # Natija: True","title":"2. \u2747\ufe0f OR"},{"location":"python/operators/#3-not","text":"\ud83d\udccc Shartning mantiqiy qiymatini teskariga o'zgartiradi ( True bo'lsa False ga, False bo'lsa True ga). # 'a' o'zgaruvchisiga True (rost) qiymati berilyapti a = True # 'result' o'zgaruvchisiga 'not a' ifodasi natijasi berilmoqda # NOT operatori qiymatni teskarisiga o'zgartiradi: True \u2192 False, False \u2192 True # Bu yerda: not True \u2192 False result = not a # result False ga teng bo'ladi # 'result' o'zgaruvchisini ekranga chiqaramiz print(result) # Natija: False \ud83d\udccc Quyidagi misolda mantiqiy operatorlar qanday ishlashini ko'rishimiz mumkin: # 'a' o'zgaruvchisiga 8 soni berilmoqda a = 8 # 'b' o'zgaruvchisiga 12 soni berilmoqda b = 12 # 'c' o'zgaruvchisiga 8 soni berilmoqda c = 8 # 'd' o'zgaruvchisiga 15 soni berilmoqda d = 15 # AND operatorlari bilan uchta shart tekshirilmoqda: # (a == c) \u2192 8 == 8 \u2192 True # (b > a) \u2192 12 > 8 \u2192 True # (d % 5 == 0) \u2192 15 % 5 == 0 \u2192 0 == 0 \u2192 True # AND operatori bilan bog\u2018langan barcha shartlar True bo\u2018lsa, umumiy natija ham True bo'ladi result = (a == c) and (b > a) and (d % 5 == 0) # True: chunki a va c teng, b a dan katta, d esa 5 ga bo'linadi # Natijani ekranga chiqaramiz print(result) # True # 'x' o'zgaruvchisiga 3 soni berilmoqda x = 3 # 'y' o'zgaruvchisiga 7 soni berilmoqda y = 7 # 'z' o'zgaruvchisiga 10 soni berilmoqda z = 10 # OR operatorlari bilan uchta shart tekshirilmoqda: # (x > y) \u2192 3 > 7 \u2192 False # (z == 10) \u2192 10 == 10 \u2192 True # (y < 5) \u2192 7 < 5 \u2192 False # OR operatorida hech bo\u2018lmaganda bitta shart True bo\u2018lsa, umumiy natija True bo\u2018ladi result = (x > y) or (z == 10) or (y < 5) # True: chunki faqat (z == 10) sharti True # Natijani ekranga chiqaramiz print(result) # True # 'a' o'zgaruvchisiga 4 soni berilmoqda a = 4 # 'b' o'zgaruvchisiga 9 soni berilmoqda b = 9 # Quyidagi ifodada birinchi navbatda AND operatori ishlaydi: # (a < b) \u2192 4 < 9 \u2192 True # (b < 10) \u2192 9 < 10 \u2192 True # Demak: (a < b) and (b < 10) \u2192 True and True \u2192 True # NOT operatori esa ifodani inkor qiladi: not True \u2192 False result = not ((a < b) and (b < 10)) # (a < b) and (b < 10) \u2192 True, lekin not uni False qiladi # Natijani ekranga chiqaramiz print(result) # False # 'x' o'zgaruvchisiga 6 soni berilmoqda x = 6 # 'y' o'zgaruvchisiga 12 soni berilmoqda y = 12 # 'z' o'zgaruvchisiga 6 soni berilmoqda z = 6 # Butun ifoda ikki qismdan iborat: # 1-qism: (x == z or y < 10) # (x == z) \u2192 6 == 6 \u2192 True # (y < 10) \u2192 12 < 10 \u2192 False # OR operatori bor, shuning uchun hech bo\u2018lmaganda bitta shart True bo\u2018lsa, natija: True # 2-qism: not (y % 2 != 0) # (y % 2 != 0) \u2192 12 % 2 \u2192 0 \u2192 0 != 0 \u2192 False # not False \u2192 True # Yakuniy ifoda: # True and True \u2192 natija: True result = (x == z or y < 10) and not (y % 2 != 0) # Natijani ekranga chiqaramiz print(result) # True # 'is_logged_in' \u2014 foydalanuvchi tizimga kirganmi? \u2192 True (ha, kirgan) is_logged_in = True # 'is_admin' \u2014 foydalanuvchi adminmi? \u2192 False (yo\u2018q, admin emas) is_admin = False # 'has_permission' \u2014 foydalanuvchining kerakli ruxsatlari bormi? \u2192 True (ha, bor) has_permission = True # Yakuniy mantiqiy ifoda: # Foydalanuvchi tizimga kirgan bo\u2018lishi kerak (is_logged_in \u2192 True) # Ruxsati bo\u2018lishi kerak (has_permission \u2192 True) # Va admin bo\u2018lmasligi kerak (not is_admin \u2192 not False \u2192 True) # Shartlar: True and True and True \u2192 natija: True result = is_logged_in and has_permission and not is_admin # Natijani ekranga chiqaramiz print(result) # True","title":"3. \u2747\ufe0f NOT"},{"location":"python/operators/#bitwisebitli-operatorlar","text":"\ud83d\udccc Bitwise operatorlar \u2014 bu sonlar ustida 0 va 1 lar bilan ishlaydigan maxsus amallar. Kompyuter har bir sonni ichida faqat 0 va 1 larda saqlaydi (buni ikkilik son deyiladi). Bitwise operatorlar ana shu 0 va 1 larni solishtirib hisob-kitob qiladi.","title":"\u2705 BITWISE(BITLI) OPERATORLAR"},{"location":"python/operators/#and","text":"\ud83d\udccc Bu operator ikkala sonning mos bitlarini AND amali bilan solishtiradi. Ikkala bit ham 1 bo'lsa, natija 1 , aks holda 0 . # a o'zgaruvchiga 5 soni berilmoqda # 5 ning ikkilik (binary) ko'rinishi: 0101 a = 5 # b o'zgaruvchiga 3 soni berilmoqda # 3 ning ikkilik (binary) ko'rinishi: 0011 b = 3 # a va b o'zgaruvchilari ustida bitwise AND (&) amali bajarilmoqda # a: 0101 # b: 0011 # ---- # & 0001 --> faqat ikkala bit ham 1 bo'lgan joyda natija 1 bo'ladi natija = a & b # natijani ekranga chiqaramiz # 0001 bu 10lik sanoq sistemasida 1 ga teng print(natija)","title":"\u2747\ufe0f AND (&amp;)"},{"location":"python/operators/#or","text":"\ud83d\udccc Bu operator ikkala sonning mos bitlarini OR amali bilan solishtiradi. Kamida bitta bit 1 bo'lsa, natija 1 , aks holda 0 . # a o'zgaruvchiga 5 soni berilmoqda # 5 ning ikkilik (binary) ko'rinishi: 0101 a = 5 # b o'zgaruvchiga 3 soni berilmoqda # 3 ning ikkilik (binary) ko'rinishi: 0011 b = 3 # a va b ustida bitwise OR (|) operatori bajarilmoqda # a: 0101 # b: 0011 # ---- # | 0111 --> har ikkala bitdan hech bo'lmaganda biri 1 bo'lsa, natijada 1 bo'ladi natija = a | b # natijani ekranga chiqaramiz # 0111 bu 10lik sanoq sistemasida 7 ga teng print(natija)","title":"\u2747\ufe0f OR (|)"},{"location":"python/operators/#xor","text":"\ud83d\udccc Bu operator ikkala sonning mos bitlarini XOR amali bilan solishtiradi. Agar bitta bit 1 , ikkinchisi 0 bo'lsa, natija 1 , aks holda 0 . # a o'zgaruvchiga 5 soni berilmoqda # 5 ning ikkilik (binary) ko'rinishi: 0101 a = 5 # b o'zgaruvchiga 3 soni berilmoqda # 3 ning ikkilik (binary) ko'rinishi: 0011 b = 3 # a va b ustida bitwise XOR (^) operatori bajarilmoqda # a: 0101 # b: 0011 # ---- # ^ 0110 --> faqat bitta bit 1 bo'lsa (ya'ni faqat 1 yoki faqat 0 bo'lsa), natija 1 bo'ladi # agar ikkala bit bir xil bo\u2018lsa (0-0 yoki 1-1) natija 0 bo\u2018ladi natija = a ^ b # natijani ekranga chiqaramiz # 0110 bu 10lik sanoq sistemasida 6 ga teng print(natija)","title":"\u2747\ufe0f XOR (^)"},{"location":"python/operators/#not","text":"\ud83d\udccc Bu operator bitlarning qarama-qarshi qiymatini qaytaradi. 0 ni 1 ga, 1 ni 0 ga o'zgartiradi. Python tilida ~x = -x-1 deb qabul qilinadi. # a o'zgaruvchiga 5 soni berilmoqda # 5 ning ikkilik (binary) ko'rinishi: 0101 a = 5 # bitwise NOT (~) operatori a ustida qo'llanilmoqda # ~a bu bitlarning inkori (teskari qiymati) degani # Python tilida bu quyidagicha ishlaydi: ~x = -x - 1 # ~5 = -5 - 1 = -6 # Yoki binary orqali tushuntirsak: # 5 -> 0000 0101 # ~5 -> 1111 1010 (ya'ni 2 ning komplementi orqali -6 bo'ladi) natija = ~a # natijani ekranga chiqaramiz # natija: -6 print(natija)","title":"\u2747\ufe0f NOT (~)"},{"location":"python/operators/#left-shift","text":"\ud83d\udccc Bu operator bitlarni chapga siljitadi va o'ng tomonga 0 qo'shadi. Har bir siljitish operatsiyasi bitlarning qiymatini 2 ga ko'paytiradi. # a o'zgaruvchiga 5 soni berilmoqda # 5 ning ikkilik (binary) ko'rinishi: 0101 a = 5 # a << 1 bu bitlarni 1 pozitsiyaga chapga siljitish degani # 0101 (5) chapga 1 ta siljisa: 1010 bo'ladi # bu 10 lik sanoq sistemasida 10 ga teng # Har bir chapga siljitish qiymatni 2 ga ko'paytiradi: # 5 << 1 = 5 * 2 = 10 natija = a << 1 # natijani ekranga chiqaramiz # natija: 10 print(natija)","title":"\u2747\ufe0f LEFT SHIFT (&lt;&lt;)"},{"location":"python/operators/#right-shift","text":"\ud83d\udccc Bu operator bitlarni o'ngga siljitadi va chap tomonga 0 yoki sonning ishorasi ( positive / negative sign ) qo'yiladi. Har bir siljitish operatsiyasi bitlarning qiymatini 2 ga kamaytiradi. # a o'zgaruvchiga 5 soni berilmoqda # 5 ning ikkilik (binary) ko'rinishi: 0101 a = 5 # a >> 1 bu bitlarni 1 pozitsiyaga o'ngga siljitish degani # 0101 (5) o'ngga 1 ta siljisa: 0010 bo'ladi # bu 10 lik sanoq sistemasida 2 ga teng # Har bir o'ngga siljitish qiymatni 2 ga kamaytiradi: # 5 >> 1 = 5 // 2 = 2 natija = a >> 1 # natijani ekranga chiqaramiz # natija: 2 print(natija) EXTRA EXAMPLES AND , OR , XOR operatorlari bilan: # a o'zgaruvchiga 12 soni berilmoqda # 12 ning ikkilik (binary) ko\u2018rinishi: 1100 a = 12 # b o'zgaruvchiga 6 soni berilmoqda # 6 ning ikkilik (binary) ko\u2018rinishi: 0110 b = 6 # AND (&) operatori: faqat ikkala bit ham 1 bo\u2018lsa, natija 1 bo\u2018ladi # 1100 # &0110 # ---- # 0100 \u2192 10likda bu 4 ga teng natija_and = a & b # OR (|) operatori: kamida bittasi 1 bo\u2018lsa, natija 1 bo\u2018ladi # 1100 # |0110 # ---- # 1110 \u2192 10likda bu 14 ga teng natija_or = a | b # XOR (^) operatori: agar bitlar turlicha bo\u2018lsa, natija 1 bo\u2018ladi # 1100 # ^0110 # ---- # 1010 \u2192 10likda bu 10 ga teng natija_xor = a ^ b # AND natijani ekranga chiqaramiz print(natija_and) # 4 # OR natijani ekranga chiqaramiz print(natija_or) # 14 # XOR natijani ekranga chiqaramiz print(natija_xor) # 10 NOT , chapga va o'ngga siljitish bilan: # x o'zgaruvchiga 7 qiymati berilmoqda # 7 ning ikkilik (binary) ko\u2018rinishi: 0111 x = 7 # NOT (~) operatori: barcha bitlarni teskari qiladi (1\u21920, 0\u21921) # ~0111 \u2192 1000 (lekin bu -8 bo\u2018ladi, chunki bu bitlar manfiy son sifatida talqin qilinadi) # Pythonda ~x bu -x-1 bo\u2018ladi: ~7 = -7 - 1 = -8 natija_not = ~x # -8 # CHAPGA siljitish (<<): bitlarni chapga siljitadi, har bir siljitish 2 baravar oshadi # 0111 << 2 \u2192 11100 (ya'ni 7 * 2 * 2 = 28) chapga = x << 2 # 28 # O\u2018NGGA siljitish (>>): bitlarni o\u2018ngga siljitadi, har bir siljitish 2 ga kamaytiradi # 0111 >> 2 \u2192 0001 (ya'ni 7 // 2 // 2 = 1) ongga = x >> 2 # 1 # NOT natijani chiqaramiz print(natija_not) # -8 # CHAPGA siljitish natijasini chiqaramiz print(chapga) # 28 # O\u2018NGGA siljitish natijasini chiqaramiz print(ongga) # 1","title":"\u2747\ufe0f RIGHT SHIFT (&gt;&gt;)"},{"location":"python/operators/#tayinlashassign-operatoralri","text":"\ud83d\udccc Pythonda tayinlash operatorlari yordamida o\u2018zgaruvchiga qiymat beriladi. Shuningdek, ba\u2019zi operatorlar matematik amalni bajarib, natijani o\u2018sha o\u2018zgaruvchining o\u2018ziga yozib qo\u2018yadi.","title":"\u2705 TAYINLASH(ASSIGN) OPERATORALRI"},{"location":"python/operators/#_1","text":"\ud83d\udccc Bu operator bilan o\u2018zgaruvchiga qiymat beriladi. x = 10 y = 5","title":"\u2747\ufe0f ="},{"location":"python/operators/#_2","text":"\ud83d\udccc Bu operator orqali x ga biror son qo\u2018shiladi va natija yana x ga yoziladi. x = 10 x += 5 # x endi 15 ga teng bo'ladi","title":"\u2747\ufe0f +="},{"location":"python/operators/#-","text":"\ud83d\udccc Bu operator orqali x dan son ayriladi va natija x ga yoziladi. x = 10 x -= 3 # x endi 7 ga teng bo'ladi","title":"\u2747\ufe0f -="},{"location":"python/operators/#_3","text":"\ud83d\udccc Bu operator orqali x ga biror son ko\u2018paytiriladi va natija x ga yoziladi. x = 4 x *= 2 # x endi 8 ga teng bo'ladi","title":"\u2747\ufe0f *="},{"location":"python/operators/#_4","text":"\ud83d\udccc Bu operator orqali x bo\u2018linadi va natija kasr (float) ko\u2018rinishda saqlanadi. x = 20 x /= 4 # x endi 5.0 ga teng bo'ladi (natija float turida bo'ladi) Bu operator orqali x dan y bo\u2018linadi va qoldiq x ga yoziladi.","title":"\u2747\ufe0f /="},{"location":"python/operators/#_5","text":"\ud83d\udccc Bu operator orqali x dan y bo\u2018linadi va qoldiq x ga yoziladi. x = 10 x %= 3 # x endi 1 ga teng bo'ladi (qoldiq)","title":"\u2747\ufe0f %="},{"location":"python/operators/#_6","text":"\ud83d\udccc Bu operator orqali x o\u2018zining darajasiga oshiriladi va natija x ga yoziladi. x = 3 x **= 2 # x endi 9 ga teng bo'ladi (3^2 = 9)","title":"\u2747\ufe0f **="},{"location":"python/operators/#_7","text":"\ud83d\udccc Bu operator orqali x bo\u2018linadi, lekin faqat butun qismi olinadi. x = 10 x //= 3 # x endi 3 ga teng bo'ladi (butun qismini oladi)","title":"\u2747\ufe0f //="},{"location":"python/operators/#azolikmembership-operatorlari","text":"Pythonda a'zolik (membership) operatorlari ma'lum bir elementning ketma-ketlik ( sequence ), masalan, ro'yxat ( list ), qator ( string ) yoki to'plam ( set ) ichida mavjudligini tekshirish uchun ishlatiladi. in operatori Bu operator yordamida elementning ma'lum bir ketma-ketlikda mavjudligini tekshirish mumkin. mevalar = ['olma', 'banan', 'nok'] if 'olma' in mevalar: print(\"Olma ro'yxatda mavjud.\") Natija: Olma ro'yxatda mavjud. Bu yerda olma in mevalar ifodasi True qiymatini qaytaradi, chunki olma mevalar ro'yxatida mavjud. not in operatori Bu operator yordamida elementning ma'lum bir ketma-ketlikda mavjud emasligini tekshirish mumkin. mevalar = ['olma', 'banan', 'nok'] if 'uzum' not in mevalar: print(\"Uzum ro'yxatda mavjud emas.\") Natija: Uzum ro'yxatda mavjud emas. Yuqorida uzum not in mevalar ifodasi True qiymatini qaytaradi, chunki 'uzum' mevalar ro'yxatida mavjud emas. Stringlarda misollar A'zolik operatorlari qatorlar ( string ) bilan ham ishlaydi. Kichik qatorning kattaroq qator ichida mavjud yoki mavjud emasligini tekshirish mumkin. matn = \"Salom dunyo\" if 'dunyo' in matn: print(\"'dunyo' matn ichida mavjud.\")","title":"A'ZOLIK(MEMBERSHIP) OPERATORLARI"},{"location":"python/operators/#identifikatsiyaidentyfy-operatorlari","text":"Pythonda identifikatsiya (identity) operatorlari ikki ob'ektning bir xil xotira joylashuvida saqlanayotganini aniqlash uchun ishlatiladi. Bu operatorlar ob'ektlarning identifikatorlarini solishtiradi, ya'ni ikki o'zgaruvchining aslida bitta ob'ektga ishora qilayotganini tekshiradi. is operatori is operatori yordamida ikkita o'zgaruvchining bir xil ob'ektga ishora qilayotganligini tekshirish mumkin. a = [1, 2, 3] b = a if a is b: print(\"a va b bir xil ob'ekt.\") Natija: a va b bir xil ob'ekt. Yuqorida a va b bir xil ro'yxatga ishora qilmoqda, shuning uchun a is b ifodasi True qiymatini qaytaradi. is not operatori is not operatori yordamida ikkita o'zgaruvchining bir xil obyektga ishora qilmayotganini tekshirish mumkin. a = [1, 2, 3] b = [1, 2, 3] if a is not b: print(\"a va b bir xil ob'ekt emas.\") Natija: a va b bir xil ob'ekt emas. Yuqorida a va b bir xil qiymatlarni o'z ichiga olgan bo'lsa ham, ular alohida ob'ektlar. Shuning uchun a is not b ifodasi True qiymatini qaytaradi. Identifikatsiya operatorlarining ishlash prinsipi Identifikatsiya operatorlari ob'ektlarning xotira joylashuvini tekshiradi, ya'ni ob'ektlarning ID raqamlarini solishtiradi. a = [1, 2, 3] b = [1, 2, 3] print(id(a)) # a ob'ektining ID raqami print(id(b)) # b ob'ektining ID raqami Agar a va b ID raqamlari turli bo'lsa, demak ular alohida obyektlar.","title":"IDENTIFIKATSIYA(IDENTYFY) OPERATORLARI"},{"location":"python/operators/#aralashtirilgan-operatorlarmixed-operators","text":"Python dasturlash tilida aralashtirilgan operatorlar ( mixed operators ) deganda bir nechta turli operatorlarni bitta ifodada ishlatish tushuniladi. Bu ifodalar matematik va mantiqiy amallarni birlashtirib, ancha murakkab hisob-kitoblar yoki shartlarni aniqlashga yordam beradi. Quyida aralashtirilgan operatorlardan foydalanish misollari keltirilgan: Arifmetik va mantiqiy operatorlar aralashmasi x = 10 y = 5 z = 20 natija = (x + y) * z > 100 and z % y == 0 print(natija) Natija: True Yuqoridagi (x + y) * z > 100 and z % y == 0 ifodasi arifmetik ( +, *, % ) va mantiqiy ( and ) operatorlar aralashmasidan iborat. Ifoda birinchi bo'lib (x + y) * z > 100 qismini hisoblaydi, so'ngra z % y == 0 qismini tekshiradi va oxirida and operatori yordamida natijalarni birlashtiradi. Arifmetik va solishtirish operatorlari aralashmasi a = 7 b = 3 natija = a * 2 > b + 5 print(natija) Natija: True Yuqorida a * 2 > b + 5 ifodasi avval a * 2 va b + 5 qismlarini hisoblaydi, keyin esa ularni > solishtirish operatori bilan solishtiradi. Shartli ( ternary ) ifoda va arifmetik operatorlar a = 10 b = 5 max_qiymat = a if a > b else b print(max_qiymat) Natija: 10 Yuqoridagi misolda a if a > b else b shartli ifoda yordamida aralashtirilgan operatorlar orqali a va b ning maksimal qiymatini aniqlaymiz.","title":"ARALASHTIRILGAN OPERATORLAR(MIXED OPERATORS)"},{"location":"python/operators/#amaliyot","text":"Ikkita o'zgaruvchi yarating va ularning qiymatlarini qo'shib natijani ekranga chiqaruvchi dastur yozing. Foydalanuvchi tomonidan kiritilgan ikkita sonning ayirmasini hisoblab ekranga chiqaruvchi dastur yozing. Ikkita o'zgaruvchi yarating va ularni bo'lgandan keyin butun qismini ekranga chiqaruvchi dastur yozing. Foydalanuvchi tomonidan kiritilgan ikkita sonni bo'lgandan keyin qoldig'ini ekranga chiqaruvchi dastur yozing.","title":"AMALIYOT"},{"location":"python/sets/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 6-DARS SETS \ud83d\udccc Set \u2014 bu noyob (takrorlanmaydigan) elementlar dan tashkil topgan, tartibsiz va indekssiz ma\u2019lumot turi. \u2705 SET YARATISH # Bo'sh set yaratish my_set = set() # Elementlar bilan set yaratish my_set = {1, 2, 3, 4, 5} \u2705 SETGA E'LEMENT QO'SHISH # Set yaratamiz my_set = {1, 2, 3} # Yangi element qo'shamiz my_set.add(4) # 4 element sifatida qo'shiladi print(my_set) # Natija: {1, 2, 3, 4} # Takroriy element qo'shilsa, set o'zgarmaydi my_set.add(3) # 3 allaqachon mavjud, shuning uchun set o'zgarmaydi print(my_set) # Natija: {1, 2, 3, 4} # Bir nechta element qo'shamiz my_set.update([5, 6, 7]) # 5, 6, 7 elementlari qo'shildi print(my_set) # Natija: {1, 2, 3, 4, 5, 6, 7} \u2705 SETDAN E'LEMENT O'CHIRISH # Set yaratamiz my_set = {1, 2, 3, 4, 5} # Ma'lum bir elementni o'chiramiz my_set.remove(3) # 3 elementi o'chiriladi print(my_set) # Natija: {1, 2, 4, 5} # remove() bilan mavjud bo'lmagan elementni o'chirsak xatolik bo'ladi # my_set.remove(10) # KeyError: 10 # discard() bilan element mavjud bo'lmasa ham xatolik bo'lmaydi my_set.discard(10) # Xatolik yo'q, set o'zgarishsiz qoladi print(my_set) # Natija: {1, 2, 4, 5} \u2705 SET OPERATSIYALARI \u2747\ufe0f .intersection() \ud83d\udccc intersection \u2014 bu ikki yoki undan ortiq to\u2018plamdagi umumiy elementlarni topadi. Ya\u2019ni, faqat har ikki setda mavjud bo\u2018lgan elementlargina natijaga olinadi. Agar biror element faqat bir setda bo\u2018lsa, u intersectionga kirmaydi. Bu amal orqali \u201cikkalasi orasida qanday o\u2018xshashlik bor?\u201d degan savolga javob topiladi. # Ikki set yaratamiz set1 = {1, 2, 3, 4} set2 = {3, 4, 5, 6} # Umumiy elementlarni topamiz (& operatori bilan) intersection_result = set1 & set2 # Faqat umumiy elementlar print(intersection_result) # Natija: {3, 4} # intersection() metodi bilan print(set1.intersection(set2)) # Natija: {3, 4} \ud83d\udccc Agar intersection bo\u2018sh set bilan ishlatilsa, natija ham bo\u2018sh bo\u2018ladi. Intersection faqat ikkala setda bir vaqtda mavjud bo\u2018lgan elementlarni qaytaradi. set1 da: {1, 2, 3, 4} empty_set da: hech narsa yo\u2018q \u2192 {} Demak, ikkala setda mavjud bo\u2018lgan hech qanday element yo\u2018q. Shuning uchun natija \u2014 bo\u2018sh set: set() set1 = {1, 2, 3, 4} empty_set = set() result = set1 & empty_set # Bo'sh set bilan kesishish print(result) # Natija: set() \u2747\ufe0f .difference() \ud83d\udccc difference esa farqni topadi. Bu amal birinchi setdagi, lekin ikkinchi setda yo\u2018q bo\u2018lgan elementlarni ajratib beradi. Bunda faqat birinchi setga xos elementlar natijaga olinadi, umumiy yoki ikkinchisida mavjud bo\u2018lganlar olinmaydi. Bu orqali \u201cmenda bor, unda yo\u2018q\u201d degan mantiqqa asoslangan natija olinadi. # Ikkita set yaratamiz set1 = {1, 2, 3, 4} set2 = {3, 4, 5, 6} # set1 dan set2 farqi (ya'ni, set1 dagi, ammo set2 da yo'q elementlar) diff_result = set1 - set2 print(diff_result) # Natija: {1, 2} # difference() metodi bilan print(set1.difference(set2)) # Natija: {1, 2} \u2747\ufe0f .union() \ud83d\udccc union esa barcha elementlarni birlashtiradi. Ya\u2019ni, har ikki setdagi barcha elementlar bitta setga yig\u2018iladi va takrorlanmas holda saqlanadi. Union orqali \u201cikkovining jamlanmasi\u201d olinadi. Bu amal barcha mavjud ma\u2019lumotlarni umumlashtirish, birlashtirish uchun ishlatiladi. # Ikkita set yaratamiz set1 = {1, 2, 3} set2 = {3, 4, 5} # Barcha elementlarni birlashtiramiz (takroriylar olib tashlanadi) union_result = set1 | set2 print(union_result) # Natija: {1, 2, 3, 4, 5} # union() metodi bilan print(set1.union(set2)) # Natija: {1, 2, 3, 4, 5} \u2705 FROZENSET frozenset nima? frozenset \u2014 bu o\u2018zgarmas set turidir. Ya\u2019ni: Oddiy set bilan bir xil ishlaydi, lekin uni yaratgandan so\u2018ng o\u2018zgartirib bo\u2018lmaydi. Ichiga noyob elementlar saqlanadi. Tartibsiz va indekssiz . Undan .add() , .remove() kabi metodlar ishlamaydi, chunki u o\u2018zgartirilmaydi. \u2705 FROZENSET YARATISH # Oddiy ro'yxat yaratamiz my_list = [1, 2, 3, 4, 5] # Ro'yxatdan frozenset yaratamiz my_frozen_set = frozenset(my_list) print(my_frozen_set) # Natija: frozenset({1, 2, 3, 4, 5}) \u2705 FROZENSETDA .intersection() va .union() .difference() a = frozenset([1, 2, 3]) b = frozenset([2, 3, 4]) # intersection print(a & b) # Natija: frozenset({2, 3}) # union print(a | b) # Natija: frozenset({1, 2, 3, 4}) # difference print(a - b) # Natija: frozenset({1}) \u2705 AMALIYOT \u2705 1-topshiriq: Bo\u2018sh set yarating va unga 10 , 20 , 30 qiymatlarini ketma-ket qo\u2018shing. - add() metodidan foydalaning. - Yakuniy setni ekranga chiqaring. \u2705 2-topshiriq: Quyidagi elementlardan iborat my_set yarating: {1, 2, 2, 3, 3, 3, 4} - Ekranga chiqarilgan setda faqat noyob qiymatlar qoladi. \u2705 3-topshiriq: Set yarating: {5, 10, 15, 20} - remove() metodidan foydalanib, 15 sonini o\u2018chiring. - So\u2018ng setni chop eting. \u2705 4-topshiriq: Set yarating: {100, 200, 300} - discard() yordamida 400 ni o\u2018chirishga harakat qiling. - Xatolik bo\u2018lmasligiga e\u2019tibor bering. Natijani chop eting. \u2705 5-topshiriq: Ikki set yarating: a = {1, 2, 3, 4} b = {3, 4, 5, 6} Ularning kesishmasini & operatori yordamida toping. Natijani intersection_result nomli o\u2018zgaruvchiga saqlang. \u2705 6-topshiriq: Yuqoridagi a va b setlari ustida .intersection() metodini ishlatib, umumiy elementlarni chiqaring. \u2705 7-topshiriq: Setlar: x = {10, 20, 30} y = {30, 40, 50} difference() metodidan foydalanib, x setida bor-u, y da yo\u2018q elementlarni toping. \u2705 8-topshiriq: Setlar: x = {10, 20, 30} y = {30, 40, 50} x - y amali bilan farqni toping. Natijani ekranga chiqaring. \u2705 9-topshiriq: Quyidagi ikki set ustida birlashtirish ( union ) amalini bajaring: a = {\"python\", \"java\"} b = {\"c++\", \"java\", \"go\"} Natijada faqat noyob qiymatlar chiqishi kerak. \u2705 10-topshiriq: Set yarating va update() metodi orqali [100, 200, 300] ro\u2018yxatidagi qiymatlarni qo\u2018shing. \u2705 11-topshiriq: Setni quyidagicha yarating: my_set = {1, 2, 3} add() metodi orqali yana 3 ni qo\u2018shishga urinib ko\u2018ring. Set o\u2018zgarmasligiga ishonch hosil qiling. \u2705 12-topshiriq: frozenset yarating: [1, 2, 3, 4] ro\u2018yxatidan foydalaning. - Ekranga chiqaring. \u2705 13-topshiriq: Quyidagi ikki frozenset ustida intersection bajaring: a = frozenset([1, 2, 3]) b = frozenset([2, 3, 4]) Natijani ekranga chiqaring. \u2705 14-topshiriq: Yuqoridagi a va b ustida union va difference amallarini bajaring. - Har bir natijani alohida chiqarib bering. \u2705 15-topshiriq: Set yaratib, unga True , False , 1 , 0 qiymatlarini joylang. - Ekranga chiqaring va natijani tushuntiring (setda nechta element chiqdi?).","title":"Sets"},{"location":"python/sets/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/sets/#6-dars-sets","text":"\ud83d\udccc Set \u2014 bu noyob (takrorlanmaydigan) elementlar dan tashkil topgan, tartibsiz va indekssiz ma\u2019lumot turi.","title":"\ud83e\udde9 6-DARS SETS"},{"location":"python/sets/#set-yaratish","text":"# Bo'sh set yaratish my_set = set() # Elementlar bilan set yaratish my_set = {1, 2, 3, 4, 5}","title":"\u2705 SET YARATISH"},{"location":"python/sets/#setga-element-qoshish","text":"# Set yaratamiz my_set = {1, 2, 3} # Yangi element qo'shamiz my_set.add(4) # 4 element sifatida qo'shiladi print(my_set) # Natija: {1, 2, 3, 4} # Takroriy element qo'shilsa, set o'zgarmaydi my_set.add(3) # 3 allaqachon mavjud, shuning uchun set o'zgarmaydi print(my_set) # Natija: {1, 2, 3, 4} # Bir nechta element qo'shamiz my_set.update([5, 6, 7]) # 5, 6, 7 elementlari qo'shildi print(my_set) # Natija: {1, 2, 3, 4, 5, 6, 7}","title":"\u2705 SETGA E'LEMENT QO'SHISH"},{"location":"python/sets/#setdan-element-ochirish","text":"# Set yaratamiz my_set = {1, 2, 3, 4, 5} # Ma'lum bir elementni o'chiramiz my_set.remove(3) # 3 elementi o'chiriladi print(my_set) # Natija: {1, 2, 4, 5} # remove() bilan mavjud bo'lmagan elementni o'chirsak xatolik bo'ladi # my_set.remove(10) # KeyError: 10 # discard() bilan element mavjud bo'lmasa ham xatolik bo'lmaydi my_set.discard(10) # Xatolik yo'q, set o'zgarishsiz qoladi print(my_set) # Natija: {1, 2, 4, 5}","title":"\u2705 SETDAN E'LEMENT O'CHIRISH"},{"location":"python/sets/#set-operatsiyalari","text":"","title":"\u2705 SET OPERATSIYALARI"},{"location":"python/sets/#intersection","text":"\ud83d\udccc intersection \u2014 bu ikki yoki undan ortiq to\u2018plamdagi umumiy elementlarni topadi. Ya\u2019ni, faqat har ikki setda mavjud bo\u2018lgan elementlargina natijaga olinadi. Agar biror element faqat bir setda bo\u2018lsa, u intersectionga kirmaydi. Bu amal orqali \u201cikkalasi orasida qanday o\u2018xshashlik bor?\u201d degan savolga javob topiladi. # Ikki set yaratamiz set1 = {1, 2, 3, 4} set2 = {3, 4, 5, 6} # Umumiy elementlarni topamiz (& operatori bilan) intersection_result = set1 & set2 # Faqat umumiy elementlar print(intersection_result) # Natija: {3, 4} # intersection() metodi bilan print(set1.intersection(set2)) # Natija: {3, 4} \ud83d\udccc Agar intersection bo\u2018sh set bilan ishlatilsa, natija ham bo\u2018sh bo\u2018ladi. Intersection faqat ikkala setda bir vaqtda mavjud bo\u2018lgan elementlarni qaytaradi. set1 da: {1, 2, 3, 4} empty_set da: hech narsa yo\u2018q \u2192 {} Demak, ikkala setda mavjud bo\u2018lgan hech qanday element yo\u2018q. Shuning uchun natija \u2014 bo\u2018sh set: set() set1 = {1, 2, 3, 4} empty_set = set() result = set1 & empty_set # Bo'sh set bilan kesishish print(result) # Natija: set()","title":"\u2747\ufe0f .intersection()"},{"location":"python/sets/#difference","text":"\ud83d\udccc difference esa farqni topadi. Bu amal birinchi setdagi, lekin ikkinchi setda yo\u2018q bo\u2018lgan elementlarni ajratib beradi. Bunda faqat birinchi setga xos elementlar natijaga olinadi, umumiy yoki ikkinchisida mavjud bo\u2018lganlar olinmaydi. Bu orqali \u201cmenda bor, unda yo\u2018q\u201d degan mantiqqa asoslangan natija olinadi. # Ikkita set yaratamiz set1 = {1, 2, 3, 4} set2 = {3, 4, 5, 6} # set1 dan set2 farqi (ya'ni, set1 dagi, ammo set2 da yo'q elementlar) diff_result = set1 - set2 print(diff_result) # Natija: {1, 2} # difference() metodi bilan print(set1.difference(set2)) # Natija: {1, 2}","title":"\u2747\ufe0f .difference()"},{"location":"python/sets/#union","text":"\ud83d\udccc union esa barcha elementlarni birlashtiradi. Ya\u2019ni, har ikki setdagi barcha elementlar bitta setga yig\u2018iladi va takrorlanmas holda saqlanadi. Union orqali \u201cikkovining jamlanmasi\u201d olinadi. Bu amal barcha mavjud ma\u2019lumotlarni umumlashtirish, birlashtirish uchun ishlatiladi. # Ikkita set yaratamiz set1 = {1, 2, 3} set2 = {3, 4, 5} # Barcha elementlarni birlashtiramiz (takroriylar olib tashlanadi) union_result = set1 | set2 print(union_result) # Natija: {1, 2, 3, 4, 5} # union() metodi bilan print(set1.union(set2)) # Natija: {1, 2, 3, 4, 5}","title":"\u2747\ufe0f .union()"},{"location":"python/sets/#frozenset","text":"frozenset nima? frozenset \u2014 bu o\u2018zgarmas set turidir. Ya\u2019ni: Oddiy set bilan bir xil ishlaydi, lekin uni yaratgandan so\u2018ng o\u2018zgartirib bo\u2018lmaydi. Ichiga noyob elementlar saqlanadi. Tartibsiz va indekssiz . Undan .add() , .remove() kabi metodlar ishlamaydi, chunki u o\u2018zgartirilmaydi.","title":"\u2705 FROZENSET"},{"location":"python/sets/#frozenset-yaratish","text":"# Oddiy ro'yxat yaratamiz my_list = [1, 2, 3, 4, 5] # Ro'yxatdan frozenset yaratamiz my_frozen_set = frozenset(my_list) print(my_frozen_set) # Natija: frozenset({1, 2, 3, 4, 5})","title":"\u2705 FROZENSET YARATISH"},{"location":"python/sets/#frozensetda-intersection-va-union-difference","text":"a = frozenset([1, 2, 3]) b = frozenset([2, 3, 4]) # intersection print(a & b) # Natija: frozenset({2, 3}) # union print(a | b) # Natija: frozenset({1, 2, 3, 4}) # difference print(a - b) # Natija: frozenset({1})","title":"\u2705 FROZENSETDA .intersection() va .union() .difference()"},{"location":"python/sets/#amaliyot","text":"","title":"\u2705 AMALIYOT"},{"location":"python/sets/#1-topshiriq","text":"Bo\u2018sh set yarating va unga 10 , 20 , 30 qiymatlarini ketma-ket qo\u2018shing. - add() metodidan foydalaning. - Yakuniy setni ekranga chiqaring.","title":"\u2705 1-topshiriq:"},{"location":"python/sets/#2-topshiriq","text":"Quyidagi elementlardan iborat my_set yarating: {1, 2, 2, 3, 3, 3, 4} - Ekranga chiqarilgan setda faqat noyob qiymatlar qoladi.","title":"\u2705 2-topshiriq:"},{"location":"python/sets/#3-topshiriq","text":"Set yarating: {5, 10, 15, 20} - remove() metodidan foydalanib, 15 sonini o\u2018chiring. - So\u2018ng setni chop eting.","title":"\u2705 3-topshiriq:"},{"location":"python/sets/#4-topshiriq","text":"Set yarating: {100, 200, 300} - discard() yordamida 400 ni o\u2018chirishga harakat qiling. - Xatolik bo\u2018lmasligiga e\u2019tibor bering. Natijani chop eting.","title":"\u2705 4-topshiriq:"},{"location":"python/sets/#5-topshiriq","text":"Ikki set yarating: a = {1, 2, 3, 4} b = {3, 4, 5, 6} Ularning kesishmasini & operatori yordamida toping. Natijani intersection_result nomli o\u2018zgaruvchiga saqlang.","title":"\u2705 5-topshiriq:"},{"location":"python/sets/#6-topshiriq","text":"Yuqoridagi a va b setlari ustida .intersection() metodini ishlatib, umumiy elementlarni chiqaring.","title":"\u2705 6-topshiriq:"},{"location":"python/sets/#7-topshiriq","text":"Setlar: x = {10, 20, 30} y = {30, 40, 50} difference() metodidan foydalanib, x setida bor-u, y da yo\u2018q elementlarni toping.","title":"\u2705 7-topshiriq:"},{"location":"python/sets/#8-topshiriq","text":"Setlar: x = {10, 20, 30} y = {30, 40, 50} x - y amali bilan farqni toping. Natijani ekranga chiqaring.","title":"\u2705 8-topshiriq:"},{"location":"python/sets/#9-topshiriq","text":"Quyidagi ikki set ustida birlashtirish ( union ) amalini bajaring: a = {\"python\", \"java\"} b = {\"c++\", \"java\", \"go\"} Natijada faqat noyob qiymatlar chiqishi kerak.","title":"\u2705 9-topshiriq:"},{"location":"python/sets/#10-topshiriq","text":"Set yarating va update() metodi orqali [100, 200, 300] ro\u2018yxatidagi qiymatlarni qo\u2018shing.","title":"\u2705 10-topshiriq:"},{"location":"python/sets/#11-topshiriq","text":"Setni quyidagicha yarating: my_set = {1, 2, 3} add() metodi orqali yana 3 ni qo\u2018shishga urinib ko\u2018ring. Set o\u2018zgarmasligiga ishonch hosil qiling.","title":"\u2705 11-topshiriq:"},{"location":"python/sets/#12-topshiriq","text":"frozenset yarating: [1, 2, 3, 4] ro\u2018yxatidan foydalaning. - Ekranga chiqaring.","title":"\u2705 12-topshiriq:"},{"location":"python/sets/#13-topshiriq","text":"Quyidagi ikki frozenset ustida intersection bajaring: a = frozenset([1, 2, 3]) b = frozenset([2, 3, 4]) Natijani ekranga chiqaring.","title":"\u2705 13-topshiriq:"},{"location":"python/sets/#14-topshiriq","text":"Yuqoridagi a va b ustida union va difference amallarini bajaring. - Har bir natijani alohida chiqarib bering.","title":"\u2705 14-topshiriq:"},{"location":"python/sets/#15-topshiriq","text":"Set yaratib, unga True , False , 1 , 0 qiymatlarini joylang. - Ekranga chiqaring va natijani tushuntiring (setda nechta element chiqdi?).","title":"\u2705 15-topshiriq:"},{"location":"python/third-party-packages/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 16-DARS THIRD PARTY PACKAGES \ud83d\udccc Python kutubxonalari 3 guruhga bo\u2018linadi: Standart kutubxonalar \u2013 Python bilan birga keladi. Ikkinchi tomon kutubxonalari \u2013 rasmiy Python jamoasi tashqarisida ishlab chiqilgan, ammo mashhur. Uchinchi tomon kutubxonalari (Third-party) \u2013 mustaqil ishlab chiquvchilar yoki jamoalar tomonidan yaratilgan va keng turdagi loyihalar uchun ishlatiladi. \ud83d\udd0d Third-Party Packages nima? Third-party packages \u2014 bu Pythonning o\u2018zida yo\u2018q, lekin boshqa ishlab chiquvchilar tomonidan ishlab chiqilgan kutubxonalardir. Ular dasturchilarga turli murakkab ishlarni oson bajarishga yordam beradi (masalan: web dasturlash, ma\u2019lumotlar tahlili, sun\u2019iy intellekt, grafikalar chizish va h.k.). \ud83d\ude80 Third-party paketlarni o\u2018rnatish Python\u2019ning pip (Python Package Installer) vositasi yordamida: pip install package_nomi Masalan: pip install requests pip install numpy pip install flask \u2705 Eng ko\u2018p ishlatiladigan third-party kutubxonalar Kutubxona Maqsadi requests HTTP so\u2018rovlar yuborish va javob olish uchun beautifulsoup4 Web sahifalarni tahlil qilish (scraping) pandas Jadval (DataFrame) ko\u2018rinishidagi ma\u2019lumotlar bilan ishlash numpy Katta hajmdagi massivlar va matematik hisoblar matplotlib Grafikalar chizish seaborn Statistik grafiklar chizish (matplotlib ustida ishlaydi) scikit-learn Mashinaviy o\u2018rganish (machine learning) algoritmlari flask Yengil web ilovalar yaratish uchun freymvork django To\u2018liq web freymvork (backend development) pytest Avtomatik test yozish va bajarish uchun opencv-python Rasm va video tahlili, kompyuter ko\u2018rish (Computer Vision) sqlalchemy Ma\u2019lumotlar bazalari bilan ishlash (ORM) celery Asinxron ishlov berish (masalan: xabar yuborish fon rejimida) fastapi Tezkor REST API yaratish uchun zamonaviy web-freymvork transformers Natural Language Processing (NLP) uchun (Hugging Face tomonidan yaratilgan) \ud83d\udd27 Misollar bilan tushuntirish 1. requests bilan API\u2019dan ma\u2019lumot olish: import requests url = \"https://jsonplaceholder.typicode.com/posts\" response = requests.get(url) if response.status_code == 200: data = response.json() print(data[0]) # Birinchi post else: print(\"Xatolik yuz berdi.\") 2. numpy bilan matematik amallar: import numpy as np arr = np.array([1, 2, 3, 4]) print(arr * 2) # Har bir elementni 2 ga ko\u2018paytiradi 3. pandas bilan jadval (DataFrame) ishlatish: import pandas as pd data = { \"Ism\": [\"Umid\", \"Ali\"], \"Yosh\": [25, 30] } df = pd.DataFrame(data) print(df) 4. matplotlib bilan grafik chizish: import matplotlib.pyplot as plt x = [1, 2, 3] y = [2, 4, 6] plt.plot(x, y) plt.title(\"Oddiy Grafik\") plt.show() \ud83d\udcc4 requirements.txt bilan kutubxonalarni boshqarish Loyihada foydalanilgan barcha kutubxonalarni ro\u2018yxatga olish: pip freeze > requirements.txt Keyin boshqa kompyuterda bu fayl orqali hammasini o\u2018rnatish: pip install -r requirements.txt \ud83c\udf10 PyPI (Python Package Index) Python kutubxonalarining asosiy ombori: https://pypi.org Bu yerda har qanday third-party paketni topish, hujjatlari bilan tanishish va o\u2018rnatish mumkin. \ud83d\udccc Third-party kutubxonalarni yangilash va o\u2018chirish Yangilash: pip install --upgrade package_nomi O\u2018chirish: pip uninstall package_nomi \ud83d\udee0\ufe0f Virtual Environment (tavsiya qilinadi) Har bir loyiha uchun alohida muhit yaratish muhim. Misol: python -m venv venv source venv/bin/activate # Linux/Mac venv\\Scripts\\activate # Windows Bu orqali har bir loyiha o\u2018z kutubxonalariga ega bo\u2018ladi. \u2705 AMALIYOT \u2705 1-topshiriq: requests bilan so\u02bbrov yuboring: https://jsonplaceholder.typicode.com/posts sahifasiga GET so\u02bbrovi yuboring va javobdan 5 ta postning sarlavhasini ( title ) chiqaring. \u2705 2-topshiriq: beautifulsoup4 bilan HTML tahlil qilish: https://www.example.com sahifasidan barcha <a> teglarini ajrating va havola ( href ) manzillarini chop eting. \u2705 3-topshiriq: numpy yordamida massiv bilan ishlash: 1 dan 100 gacha bo\u02bblgan sonlar bilan massiv yarating va barcha juft sonlarni chiqaring. \u2705 4-topshiriq: matplotlib bilan grafik chizish: 1 dan 10 gacha sonlarning kvadratlarini chizadigan grafik tuzing. \u2705 5-topshiriq: pandas yordamida ma\u02bclumotlar tahlili: Talabalar haqida ma\u02bclumotlardan iborat DataFrame yarating (Ism, Yoshi, Ball). Yoshi 20 dan katta bo\u02bblganlarni ajrating. \u2705 6-topshiriq: flask bilan oddiy web ilova: Flask yordamida sahifada \"Assalomu alaykum!\" yozuvi chiqadigan web ilova yarating. \u2705 7-topshiriq: pytest bilan test yozish: Ikki sonni qo\u02bbshuvchi funksiya yozing va pytest orqali uni test qiling. \u2705 8-topshiriq: pandas bilan CSV fayl o'qish: data.csv faylini pandas yordamida o'qing va ma\u02bclumotlarni ekranga chiqaring. \u2705 9-topshiriq: requests bilan JSON API dan ma\u02bclumot olish: https://api.coindesk.com/v1/bpi/currentprice.json API dan Bitcoin narxini olib, konsolga chiqaring. \u2705 10-topshiriq: matplotlib bilan histogram chizish: Tasodifiy 100 ta son yarating ( numpy yordamida) va histogram ko'rinishida chizing. \u2705 11-topshiriq: numpy bilan matritsalar ustida amallar: 2 ta 3x3 o'lchamdagi matritsa yarating va ularni qo'shing. \u2705 12-topshiriq: flask bilan parametrli sahifa: URL orqali foydalanuvchi ismini qabul qilib, \"Salom, Ism!\" degan javob qaytaradigan Flask ilova yarating. \u2705 13-topshiriq: beautifulsoup4 bilan sahifa sarlavhasini olish: Web sahifadan <title> tegidagi matnni chiqaradigan dastur tuzing. \u2705 14-topshiriq: pandas bilan ustun qo\u02bbshish: Mavjud jadvalga yangi ustun qo\u02bbshing: talaba baholari asosida \"O\u02bbtdi\" yoki \"O\u02bbtmadi\" degan ustun hosil qiling. \u2705 15-topshiriq: venv yordamida virtual muhit yaratish: Terminal orqali yangi virtual muhit yarating va unga requests , numpy , pandas paketlarini o\u2018rnating.","title":"Third Party Packages"},{"location":"python/third-party-packages/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/third-party-packages/#16-dars-third-party-packages","text":"\ud83d\udccc Python kutubxonalari 3 guruhga bo\u2018linadi: Standart kutubxonalar \u2013 Python bilan birga keladi. Ikkinchi tomon kutubxonalari \u2013 rasmiy Python jamoasi tashqarisida ishlab chiqilgan, ammo mashhur. Uchinchi tomon kutubxonalari (Third-party) \u2013 mustaqil ishlab chiquvchilar yoki jamoalar tomonidan yaratilgan va keng turdagi loyihalar uchun ishlatiladi.","title":"\ud83e\udde9 16-DARS THIRD PARTY PACKAGES"},{"location":"python/third-party-packages/#third-party-packages-nima","text":"Third-party packages \u2014 bu Pythonning o\u2018zida yo\u2018q, lekin boshqa ishlab chiquvchilar tomonidan ishlab chiqilgan kutubxonalardir. Ular dasturchilarga turli murakkab ishlarni oson bajarishga yordam beradi (masalan: web dasturlash, ma\u2019lumotlar tahlili, sun\u2019iy intellekt, grafikalar chizish va h.k.).","title":"\ud83d\udd0d Third-Party Packages nima?"},{"location":"python/third-party-packages/#third-party-paketlarni-ornatish","text":"Python\u2019ning pip (Python Package Installer) vositasi yordamida: pip install package_nomi","title":"\ud83d\ude80 Third-party paketlarni o\u2018rnatish"},{"location":"python/third-party-packages/#masalan","text":"pip install requests pip install numpy pip install flask","title":"Masalan:"},{"location":"python/third-party-packages/#eng-kop-ishlatiladigan-third-party-kutubxonalar","text":"Kutubxona Maqsadi requests HTTP so\u2018rovlar yuborish va javob olish uchun beautifulsoup4 Web sahifalarni tahlil qilish (scraping) pandas Jadval (DataFrame) ko\u2018rinishidagi ma\u2019lumotlar bilan ishlash numpy Katta hajmdagi massivlar va matematik hisoblar matplotlib Grafikalar chizish seaborn Statistik grafiklar chizish (matplotlib ustida ishlaydi) scikit-learn Mashinaviy o\u2018rganish (machine learning) algoritmlari flask Yengil web ilovalar yaratish uchun freymvork django To\u2018liq web freymvork (backend development) pytest Avtomatik test yozish va bajarish uchun opencv-python Rasm va video tahlili, kompyuter ko\u2018rish (Computer Vision) sqlalchemy Ma\u2019lumotlar bazalari bilan ishlash (ORM) celery Asinxron ishlov berish (masalan: xabar yuborish fon rejimida) fastapi Tezkor REST API yaratish uchun zamonaviy web-freymvork transformers Natural Language Processing (NLP) uchun (Hugging Face tomonidan yaratilgan)","title":"\u2705 Eng ko\u2018p ishlatiladigan third-party kutubxonalar"},{"location":"python/third-party-packages/#misollar-bilan-tushuntirish","text":"","title":"\ud83d\udd27 Misollar bilan tushuntirish"},{"location":"python/third-party-packages/#1-requests-bilan-apidan-malumot-olish","text":"import requests url = \"https://jsonplaceholder.typicode.com/posts\" response = requests.get(url) if response.status_code == 200: data = response.json() print(data[0]) # Birinchi post else: print(\"Xatolik yuz berdi.\")","title":"1. requests bilan API\u2019dan ma\u2019lumot olish:"},{"location":"python/third-party-packages/#2-numpy-bilan-matematik-amallar","text":"import numpy as np arr = np.array([1, 2, 3, 4]) print(arr * 2) # Har bir elementni 2 ga ko\u2018paytiradi","title":"2. numpy bilan matematik amallar:"},{"location":"python/third-party-packages/#3-pandas-bilan-jadval-dataframe-ishlatish","text":"import pandas as pd data = { \"Ism\": [\"Umid\", \"Ali\"], \"Yosh\": [25, 30] } df = pd.DataFrame(data) print(df)","title":"3. pandas bilan jadval (DataFrame) ishlatish:"},{"location":"python/third-party-packages/#4-matplotlib-bilan-grafik-chizish","text":"import matplotlib.pyplot as plt x = [1, 2, 3] y = [2, 4, 6] plt.plot(x, y) plt.title(\"Oddiy Grafik\") plt.show()","title":"4. matplotlib bilan grafik chizish:"},{"location":"python/third-party-packages/#requirementstxt-bilan-kutubxonalarni-boshqarish","text":"Loyihada foydalanilgan barcha kutubxonalarni ro\u2018yxatga olish: pip freeze > requirements.txt Keyin boshqa kompyuterda bu fayl orqali hammasini o\u2018rnatish: pip install -r requirements.txt","title":"\ud83d\udcc4 requirements.txt bilan kutubxonalarni boshqarish"},{"location":"python/third-party-packages/#pypi-python-package-index","text":"Python kutubxonalarining asosiy ombori: https://pypi.org Bu yerda har qanday third-party paketni topish, hujjatlari bilan tanishish va o\u2018rnatish mumkin.","title":"\ud83c\udf10 PyPI (Python Package Index)"},{"location":"python/third-party-packages/#third-party-kutubxonalarni-yangilash-va-ochirish","text":"","title":"\ud83d\udccc Third-party kutubxonalarni yangilash va o\u2018chirish"},{"location":"python/third-party-packages/#yangilash","text":"pip install --upgrade package_nomi","title":"Yangilash:"},{"location":"python/third-party-packages/#ochirish","text":"pip uninstall package_nomi","title":"O\u2018chirish:"},{"location":"python/third-party-packages/#virtual-environment-tavsiya-qilinadi","text":"Har bir loyiha uchun alohida muhit yaratish muhim. Misol: python -m venv venv source venv/bin/activate # Linux/Mac venv\\Scripts\\activate # Windows Bu orqali har bir loyiha o\u2018z kutubxonalariga ega bo\u2018ladi.","title":"\ud83d\udee0\ufe0f Virtual Environment (tavsiya qilinadi)"},{"location":"python/third-party-packages/#amaliyot","text":"","title":"\u2705 AMALIYOT"},{"location":"python/third-party-packages/#1-topshiriq","text":"requests bilan so\u02bbrov yuboring: https://jsonplaceholder.typicode.com/posts sahifasiga GET so\u02bbrovi yuboring va javobdan 5 ta postning sarlavhasini ( title ) chiqaring.","title":"\u2705 1-topshiriq:"},{"location":"python/third-party-packages/#2-topshiriq","text":"beautifulsoup4 bilan HTML tahlil qilish: https://www.example.com sahifasidan barcha <a> teglarini ajrating va havola ( href ) manzillarini chop eting.","title":"\u2705 2-topshiriq:"},{"location":"python/third-party-packages/#3-topshiriq","text":"numpy yordamida massiv bilan ishlash: 1 dan 100 gacha bo\u02bblgan sonlar bilan massiv yarating va barcha juft sonlarni chiqaring.","title":"\u2705 3-topshiriq:"},{"location":"python/third-party-packages/#4-topshiriq","text":"matplotlib bilan grafik chizish: 1 dan 10 gacha sonlarning kvadratlarini chizadigan grafik tuzing.","title":"\u2705 4-topshiriq:"},{"location":"python/third-party-packages/#5-topshiriq","text":"pandas yordamida ma\u02bclumotlar tahlili: Talabalar haqida ma\u02bclumotlardan iborat DataFrame yarating (Ism, Yoshi, Ball). Yoshi 20 dan katta bo\u02bblganlarni ajrating.","title":"\u2705 5-topshiriq:"},{"location":"python/third-party-packages/#6-topshiriq","text":"flask bilan oddiy web ilova: Flask yordamida sahifada \"Assalomu alaykum!\" yozuvi chiqadigan web ilova yarating.","title":"\u2705 6-topshiriq:"},{"location":"python/third-party-packages/#7-topshiriq","text":"pytest bilan test yozish: Ikki sonni qo\u02bbshuvchi funksiya yozing va pytest orqali uni test qiling.","title":"\u2705 7-topshiriq:"},{"location":"python/third-party-packages/#8-topshiriq","text":"pandas bilan CSV fayl o'qish: data.csv faylini pandas yordamida o'qing va ma\u02bclumotlarni ekranga chiqaring.","title":"\u2705 8-topshiriq:"},{"location":"python/third-party-packages/#9-topshiriq","text":"requests bilan JSON API dan ma\u02bclumot olish: https://api.coindesk.com/v1/bpi/currentprice.json API dan Bitcoin narxini olib, konsolga chiqaring.","title":"\u2705 9-topshiriq:"},{"location":"python/third-party-packages/#10-topshiriq","text":"matplotlib bilan histogram chizish: Tasodifiy 100 ta son yarating ( numpy yordamida) va histogram ko'rinishida chizing.","title":"\u2705 10-topshiriq:"},{"location":"python/third-party-packages/#11-topshiriq","text":"numpy bilan matritsalar ustida amallar: 2 ta 3x3 o'lchamdagi matritsa yarating va ularni qo'shing.","title":"\u2705 11-topshiriq:"},{"location":"python/third-party-packages/#12-topshiriq","text":"flask bilan parametrli sahifa: URL orqali foydalanuvchi ismini qabul qilib, \"Salom, Ism!\" degan javob qaytaradigan Flask ilova yarating.","title":"\u2705 12-topshiriq:"},{"location":"python/third-party-packages/#13-topshiriq","text":"beautifulsoup4 bilan sahifa sarlavhasini olish: Web sahifadan <title> tegidagi matnni chiqaradigan dastur tuzing.","title":"\u2705 13-topshiriq:"},{"location":"python/third-party-packages/#14-topshiriq","text":"pandas bilan ustun qo\u02bbshish: Mavjud jadvalga yangi ustun qo\u02bbshing: talaba baholari asosida \"O\u02bbtdi\" yoki \"O\u02bbtmadi\" degan ustun hosil qiling.","title":"\u2705 14-topshiriq:"},{"location":"python/third-party-packages/#15-topshiriq","text":"venv yordamida virtual muhit yaratish: Terminal orqali yangi virtual muhit yarating va unga requests , numpy , pandas paketlarini o\u2018rnating.","title":"\u2705 15-topshiriq:"},{"location":"python/tuples/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 5-DARS TUPLES \ud83d\udccc Tuple \u2014 bu Pythonda bir nechta ma\u2019lumotni bitta o\u2018zgaruvchida saqlash uchun ishlatiladigan o\u2018zgarmas tuzilma. U dumaloq qavs ichida yoziladi va elementlar vergul bilan ajratiladi. Tuple yaratilgach, uning ichidagi qiymatlarni o\u2018zgartirib, o\u2018chirib yoki yangisini qo\u2018shib bo\u2018lmaydi. Undagi ma\u2019lumotlar tartib bilan saqlanadi va indeks orqali chaqiriladi. Tuple listga o\u2018xshaydi, lekin o\u2018zgarmasligi bilan farq qiladi. U dasturda tezroq ishlaydi va kamroq xotira egallaydi. O\u2018zgarmas ma\u2019lumotlarni xavfsiz saqlash uchun tuple juda qulay. \u2705 TUPLE XUSUSIYATLARI \ud83d\udccc O\u2018zgarmaydi: Tuple yaratilgandan keyin uning ichidagi ma\u2019lumotlarni o\u2018zgartirib bo\u2018lmaydi. Masalan, yangi element qo\u2018shib yoki mavjudini o\u2018chirib bo\u2018lmaydi. Bu degani \u2014 tuple ichidagi ma\u2019lumotlar doim bir xil bo\u2018lib qoladi. \ud83d\udccc Tartibli: Tuple ichida ma\u2019lumotlar tartib bilan saqlanadi. Har bir element o\u2018z o\u2018rniga ega. Siz bu o\u2018rinni raqam bilan chaqirishingiz mumkin (masalan: birinchi element, ikkinchi element va hokazo). \ud83d\udccc Har xil turdagi ma\u2019lumot bo\u2018lishi mumkin: Tuple ichida sonlar, matnlar, True/False qiymatlar yoki boshqa turdagi ma\u2019lumotlar aralash bo\u2018lishi mumkin. Bularni bir joyda saqlash imkonini beradi. \ud83d\udccc Tez ishlaydi: Tuple \u2014 kompyuter uchun engil va tez tuzilma. Dastur ishlaganda tuplelar ro\u2018yxatlarga qaraganda tezroq ishlaydi va kam xotira ishlatadi. \ud83d\udccc O\u2018zgarmaydigan ma\u2019lumotlar uchun qulay: Agar sizda haftaning kunlari, oylar nomi, davlatlar ro\u2018yxati kabi o\u2018zgarmas ma\u2019lumotlar bo\u2018lsa, tuple juda foydali bo\u2018ladi. \u2705 TUPLE VA LIST FARQI Feature Tuple List O'zgarishi mumkinmi? Yo'q( immutable ) Ha( mutable ) Tezligi Tezroq Sekinroq Qavs turi () [] Xotira sarfi Kamroq Ko'proq Qo'llanilish holati O'zgarmas ma'lumotlar uchun O'zgaruvchi ma'lumotlar uchun \u2705 TUPLE YARATISH \u2747\ufe0f ODDIY TUPLE YARATISH # Uchta meva nomini o\u2018z ichiga olgan tuple yaratamiz fruits = (\"apple\", \"banana\", \"cherry\") # fruits tuple ichidagi barcha elementlarni ekranga chiqaramiz print(fruits) \u2747\ufe0f BITTA E'LEMENTLI TUPLE YARATISH # Faqat bitta elementdan iborat tuple yaratamiz # E\u2019tibor bering, oxirida vergul qo\u2018yilishi shart single_fruit = (\"apple\",) # Bitta elementli tuple ni ekranga chiqaramiz print(single_fruit) # \u274c Bu tuple emas (string bo\u2018lib qoladi) # Bu yerda vergul yo\u2018q, shuning uchun bu oddiy string bo\u2018ladi not_a_tuple = (\"apple\") # O\u2018zgaruvchi turi (type) ni tekshiramiz print(type(not_a_tuple)) # <class 'str'> \u2705 TUPLE E'LEMENTLARIGA MUROJAT QILISH \ud83d\udccc Tuple ichidagi har bir element tartib bilan joylashgan va ularga indekslar orqali murojaat qilish mumkin. Hisoblash 0 dan boshlanadi, ya\u2019ni birinchi elementning indeksi 0 bo\u2018ladi. Bu xuddi listdagi kabi ishlaydi. # Bu yerda 5 ta elementdan iborat tuple yaratilmoqda my_tuple = (10, 20, 30, 40, 50) # [0] \u2014 bu birinchi elementga murojaat, indeks 0 dan boshlanadi print(my_tuple[0]) # 10 # [2] \u2014 bu uchinchi elementga murojaat (0 - 1 - 2), qiymati 30 print(my_tuple[2]) # 30 # [-1] \u2014 bu oxirgi elementga murojaat, -1 doimo oxirgi elementni bildiradi print(my_tuple[-1]) # 50 \u2705 TUPLE USTIDA AMALLAR \ud83d\udccc Tuple \u2014 bu o\u2018zgarmas ma\u2019lumot turi. Ya\u2019ni, yaratilgach, uning ichidagi qiymatlarni o\u2018zgartirib, o\u2018chirib yoki yangisini qo\u2018shib bo\u2018lmaydi. Lekin, siz tuple bilan ikkita amalni bemalol bajara olasiz: Tuplelarni birlashtirish Tupleni takrorlash \u2733\ufe0f + OPERATORI \ud83d\udccc Bu usulda ikkita tuple birga qo\u2018shiladi va yangi tuple hosil bo\u2018ladi. Asl tuplelar o\u2018zgarmaydi. # Birinchi tuple tuple1 = (1, 2) # Ikkinchi tuple tuple2 = (3, 4) # Ikkalasini birlashtiramiz va yangi tuple hosil qilamiz new_tuple = tuple1 + tuple2 # Natijani chiqaramiz print(new_tuple) # (1, 2, 3, 4) \u2757 Yuqorida tuple1 va tuple2 o\u2018zgarmagan holda qoladi, faqat + orqali ularning qiymatlari birga qo\u2018shilib, new_tuple degan yangi tuple yaratiladi. \u2733\ufe0f TAKRORLASH \ud83d\udccc Agar bir tuple ni o\u2018zini o\u2018ziga birlashtirmoqchi bo\u2018lsangiz, uni yana o\u2018zi bilan + orqali birlashtirasiz. # Asl tuple tuple1 = (1, 2, 3) # O\u2018z-o\u2018ziga birlashtirish (ikki marta yozilgan bo\u2018ladi) result = tuple1 + tuple1 # Natijani chiqaramiz print(result) # (1, 2, 3, 1, 2, 3) \u2747\ufe0f TUPLENI KO'PAYTIRISH (TAKRORLASH) \ud83d\udccc Tuple o\u2018zgarmas bo\u2018lsa ham, uni bir nechta marta takrorlab yangi tuple yaratish mumkin. Buning uchun * operatoridan foydalaniladi. # Bitta elementdan iborat tuple yaratilmoqda tuple1 = (\"hello\",) # Bu tuple 3 marta takrorlanmoqda new_tuple = tuple1 * 3 # Natijada yangi tuple hosil bo\u2018ladi print(new_tuple) # ('hello', 'hello', 'hello') \u2747\ufe0f TUPLE UZUNLIGINI ANIQLASH \ud83d\udccc Tuple ichida nechta element borligini bilish uchun len() funksiyasidan foydalaniladi. Bu funksiya tuple uzunligini, ya\u2019ni elementlar sonini qaytaradi. # 5 ta elementdan iborat tuple yaratilmoqda my_tuple = (1, 2, 3, 4, 5) # len() funksiyasi tuple ichidagi elementlar sonini hisoblaydi print(len(my_tuple)) # 5 \u2747\ufe0f in OPERATORI \ud83d\udccc in operatori yordamida biror qiymat tuple ichida bor yoki yo\u2018qligini tekshirish mumkin. Natija True yoki False ko\u2018rinishida chiqadi. # Mevalar saqlangan tuple yaratilmoqda my_tuple = (\"apple\", \"banana\", \"cherry\") # \"banana\" tuple ichida bormi? degan savolga javob tekshirilmoqda print(\"banana\" in my_tuple) # True \u2747\ufe0f TUPLENI QIYMATLARGA AJRATISH( Unpacking ) \ud83d\udccc Tuple ichidagi har bir qiymatni alohida o\u2018zgaruvchiga ajratib olish mumkin. Bunga Pythonda unpacking deyiladi. # 3 ta meva nomidan iborat tuple yaratilmoqda my_tuple = (\"apple\", \"banana\", \"cherry\") # Tuple ichidagi har bir qiymat alohida o\u2018zgaruvchiga ajratilmoqda (fruit1, fruit2, fruit3) = my_tuple # Har bir o\u2018zgaruvchidagi qiymat ekranga chiqariladi print(fruit1) # 'apple' print(fruit2) # 'banana' print(fruit3) # 'cherry' \u2747\ufe0f NESTED TUPLE \ud83d\udccc Tuple ichida yana boshqa tuple ham saqlanishi mumkin. Bunga ichma-ich tuple yoki nested tuple deyiladi. # Bu yerda talaba haqida ma'lumotlar saqlanmoqda: # ism, yosh, va baholar (baholar alohida tuple ichida) student = (\"Ali\", 20, (85, 90, 95)) # Indeks 0 \u2014 ismni beradi print(student[0]) # Ali # Indeks 1 \u2014 yoshni beradi print(student[1]) # 20 # Indeks 2 \u2014 baholar joylashgan ichki tuple print(student[2]) # (85, 90, 95) # Ichki tuple ichidagi ikkinchi bahoni olish print(student[2][1]) # 90 \u2747\ufe0f TUPLE BILAN ISHLASHDA FOYDALI METODLAR \u2733\ufe0f .count() \ud83d\udccc Bu funksiya siz bergan qiymatni tuple ichida qidiradi va nechta marta borligini sanaydi. Agar qiymat topilmasa, 0 qaytaradi. # Bir nechta takrorlanuvchi sonlardan iborat tuple my_tuple = (1, 2, 2, 3, 2) # 2 soni tuple ichida necha marta borligini hisoblaydi print(my_tuple.count(2)) # 3 \u2733\ufe0f .index() \ud83d\udccc Bu metod tuple ichida berilgan qiymat qayerda turganini aniqlaydi, ya\u2019ni indeks raqamini qaytaradi. # Elementlar ketma-ketligi my_tuple = (1, 2, 3, 2, 4) # 2 soni birinchi bo\u2018lib qayerda uchraganini topadi (indeks 1) print(my_tuple.index(2)) # 1 \u2705 AMALIYOT \u2705 1-topshiriq: Quyidagi 3 ta hayvon nomidan iborat animals degan tuple yarating va ekranga chiqaring: - \"quyon\" , \"mushuk\" , \"it\" \u2705 2-topshiriq: Faqat \"apple\" qiymatidan iborat tuple yarating. - Vergul qo\u2018yilmasa, bu oddiy string bo\u2018lib qoladi. To\u2018g\u2018ri tuple yarating. \u2705 3-topshiriq: Quyidagi tupledagi ikkinchi elementni ekranga chiqaring: colors = (\"red\", \"green\", \"blue\") \u2705 4-topshiriq: Quyidagi tupledan oxirgi elementni -1 indeks yordamida chiqaring: numbers = (5, 10, 15, 20) \u2705 5-topshiriq: Quyidagi ikki tupleni + operatori yordamida birlashtiring va yangi result nomli tuple yarating: a = (1, 2) b = (3, 4) \u2705 6-topshiriq: Quyidagi tuple 3 marta takrorlab new_tuple degan yangi tuple yarating: word = (\"Hi\",) \u2705 7-topshiriq: Quyidagi tuple ichida nechta element borligini len() yordamida aniqlang: digits = (1, 2, 3, 4, 5, 6) \u2705 8-topshiriq: Quyidagi tupleda \"banana\" bor yoki yo\u2018qligini in operatori yordamida tekshirib chiqaring: fruits = (\"apple\", \"banana\", \"cherry\") \u2705 9-topshiriq: Quyidagi tupledagi qiymatlarni alohida 3 ta o\u2018zgaruvchiga ajrating ( unpacking qiling): person = (\"Ali\", 25, \"Toshkent\") \u2705 10-topshiriq: Quyidagi nested tupledan 90 sonini alohida olib ekranga chiqaring: student = (\"Ali\", 20, (85, 90, 95)) \u2705 11-topshiriq: Quyidagi tupleda 2 soni nechta marta qatnashganini .count() yordamida aniqlang: data = (1, 2, 3, 2, 4, 2) \u2705 12-topshiriq: Quyidagi tupleda 3 soni birinchi marta qaysi indeksda turganini .index() yordamida aniqlang: nums = (5, 3, 7, 3, 9) \u2705 13-topshiriq: Quyidagi kodda tuple emas, string yaratilgan. Uni tuzatib, haqiqiy tuple holatiga keltiring: item = (\"book\") \u2705 14-topshiriq: Quyidagi tupledan \"Python\" so\u2018zini indeks yordamida ajratib oling: langs = (\"C++\", \"Python\", \"Java\") \u2705 15-topshiriq: Quyidagi ikki tupleni + operatori yordamida birlashtiring va new_tuple nomli yangi tuplega saqlang: tuple1 = (\"a\", \"b\") tuple2 = (\"c\", \"d\", \"e\")","title":"Tuples"},{"location":"python/tuples/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/tuples/#5-dars-tuples","text":"\ud83d\udccc Tuple \u2014 bu Pythonda bir nechta ma\u2019lumotni bitta o\u2018zgaruvchida saqlash uchun ishlatiladigan o\u2018zgarmas tuzilma. U dumaloq qavs ichida yoziladi va elementlar vergul bilan ajratiladi. Tuple yaratilgach, uning ichidagi qiymatlarni o\u2018zgartirib, o\u2018chirib yoki yangisini qo\u2018shib bo\u2018lmaydi. Undagi ma\u2019lumotlar tartib bilan saqlanadi va indeks orqali chaqiriladi. Tuple listga o\u2018xshaydi, lekin o\u2018zgarmasligi bilan farq qiladi. U dasturda tezroq ishlaydi va kamroq xotira egallaydi. O\u2018zgarmas ma\u2019lumotlarni xavfsiz saqlash uchun tuple juda qulay.","title":"\ud83e\udde9 5-DARS TUPLES"},{"location":"python/tuples/#tuple-xususiyatlari","text":"\ud83d\udccc O\u2018zgarmaydi: Tuple yaratilgandan keyin uning ichidagi ma\u2019lumotlarni o\u2018zgartirib bo\u2018lmaydi. Masalan, yangi element qo\u2018shib yoki mavjudini o\u2018chirib bo\u2018lmaydi. Bu degani \u2014 tuple ichidagi ma\u2019lumotlar doim bir xil bo\u2018lib qoladi. \ud83d\udccc Tartibli: Tuple ichida ma\u2019lumotlar tartib bilan saqlanadi. Har bir element o\u2018z o\u2018rniga ega. Siz bu o\u2018rinni raqam bilan chaqirishingiz mumkin (masalan: birinchi element, ikkinchi element va hokazo). \ud83d\udccc Har xil turdagi ma\u2019lumot bo\u2018lishi mumkin: Tuple ichida sonlar, matnlar, True/False qiymatlar yoki boshqa turdagi ma\u2019lumotlar aralash bo\u2018lishi mumkin. Bularni bir joyda saqlash imkonini beradi. \ud83d\udccc Tez ishlaydi: Tuple \u2014 kompyuter uchun engil va tez tuzilma. Dastur ishlaganda tuplelar ro\u2018yxatlarga qaraganda tezroq ishlaydi va kam xotira ishlatadi. \ud83d\udccc O\u2018zgarmaydigan ma\u2019lumotlar uchun qulay: Agar sizda haftaning kunlari, oylar nomi, davlatlar ro\u2018yxati kabi o\u2018zgarmas ma\u2019lumotlar bo\u2018lsa, tuple juda foydali bo\u2018ladi.","title":"\u2705 TUPLE XUSUSIYATLARI"},{"location":"python/tuples/#tuple-va-list-farqi","text":"Feature Tuple List O'zgarishi mumkinmi? Yo'q( immutable ) Ha( mutable ) Tezligi Tezroq Sekinroq Qavs turi () [] Xotira sarfi Kamroq Ko'proq Qo'llanilish holati O'zgarmas ma'lumotlar uchun O'zgaruvchi ma'lumotlar uchun","title":"\u2705 TUPLE VA LIST FARQI"},{"location":"python/tuples/#tuple-yaratish","text":"","title":"\u2705 TUPLE YARATISH"},{"location":"python/tuples/#oddiy-tuple-yaratish","text":"# Uchta meva nomini o\u2018z ichiga olgan tuple yaratamiz fruits = (\"apple\", \"banana\", \"cherry\") # fruits tuple ichidagi barcha elementlarni ekranga chiqaramiz print(fruits)","title":"\u2747\ufe0f ODDIY TUPLE YARATISH"},{"location":"python/tuples/#bitta-elementli-tuple-yaratish","text":"# Faqat bitta elementdan iborat tuple yaratamiz # E\u2019tibor bering, oxirida vergul qo\u2018yilishi shart single_fruit = (\"apple\",) # Bitta elementli tuple ni ekranga chiqaramiz print(single_fruit) # \u274c Bu tuple emas (string bo\u2018lib qoladi) # Bu yerda vergul yo\u2018q, shuning uchun bu oddiy string bo\u2018ladi not_a_tuple = (\"apple\") # O\u2018zgaruvchi turi (type) ni tekshiramiz print(type(not_a_tuple)) # <class 'str'>","title":"\u2747\ufe0f BITTA E'LEMENTLI TUPLE YARATISH"},{"location":"python/tuples/#tuple-elementlariga-murojat-qilish","text":"\ud83d\udccc Tuple ichidagi har bir element tartib bilan joylashgan va ularga indekslar orqali murojaat qilish mumkin. Hisoblash 0 dan boshlanadi, ya\u2019ni birinchi elementning indeksi 0 bo\u2018ladi. Bu xuddi listdagi kabi ishlaydi. # Bu yerda 5 ta elementdan iborat tuple yaratilmoqda my_tuple = (10, 20, 30, 40, 50) # [0] \u2014 bu birinchi elementga murojaat, indeks 0 dan boshlanadi print(my_tuple[0]) # 10 # [2] \u2014 bu uchinchi elementga murojaat (0 - 1 - 2), qiymati 30 print(my_tuple[2]) # 30 # [-1] \u2014 bu oxirgi elementga murojaat, -1 doimo oxirgi elementni bildiradi print(my_tuple[-1]) # 50","title":"\u2705 TUPLE E'LEMENTLARIGA MUROJAT QILISH"},{"location":"python/tuples/#tuple-ustida-amallar","text":"\ud83d\udccc Tuple \u2014 bu o\u2018zgarmas ma\u2019lumot turi. Ya\u2019ni, yaratilgach, uning ichidagi qiymatlarni o\u2018zgartirib, o\u2018chirib yoki yangisini qo\u2018shib bo\u2018lmaydi. Lekin, siz tuple bilan ikkita amalni bemalol bajara olasiz: Tuplelarni birlashtirish Tupleni takrorlash","title":"\u2705 TUPLE USTIDA AMALLAR"},{"location":"python/tuples/#operatori","text":"\ud83d\udccc Bu usulda ikkita tuple birga qo\u2018shiladi va yangi tuple hosil bo\u2018ladi. Asl tuplelar o\u2018zgarmaydi. # Birinchi tuple tuple1 = (1, 2) # Ikkinchi tuple tuple2 = (3, 4) # Ikkalasini birlashtiramiz va yangi tuple hosil qilamiz new_tuple = tuple1 + tuple2 # Natijani chiqaramiz print(new_tuple) # (1, 2, 3, 4) \u2757 Yuqorida tuple1 va tuple2 o\u2018zgarmagan holda qoladi, faqat + orqali ularning qiymatlari birga qo\u2018shilib, new_tuple degan yangi tuple yaratiladi.","title":"\u2733\ufe0f + OPERATORI"},{"location":"python/tuples/#takrorlash","text":"\ud83d\udccc Agar bir tuple ni o\u2018zini o\u2018ziga birlashtirmoqchi bo\u2018lsangiz, uni yana o\u2018zi bilan + orqali birlashtirasiz. # Asl tuple tuple1 = (1, 2, 3) # O\u2018z-o\u2018ziga birlashtirish (ikki marta yozilgan bo\u2018ladi) result = tuple1 + tuple1 # Natijani chiqaramiz print(result) # (1, 2, 3, 1, 2, 3)","title":"\u2733\ufe0f TAKRORLASH"},{"location":"python/tuples/#tupleni-kopaytirish-takrorlash","text":"\ud83d\udccc Tuple o\u2018zgarmas bo\u2018lsa ham, uni bir nechta marta takrorlab yangi tuple yaratish mumkin. Buning uchun * operatoridan foydalaniladi. # Bitta elementdan iborat tuple yaratilmoqda tuple1 = (\"hello\",) # Bu tuple 3 marta takrorlanmoqda new_tuple = tuple1 * 3 # Natijada yangi tuple hosil bo\u2018ladi print(new_tuple) # ('hello', 'hello', 'hello')","title":"\u2747\ufe0f TUPLENI KO'PAYTIRISH (TAKRORLASH)"},{"location":"python/tuples/#tuple-uzunligini-aniqlash","text":"\ud83d\udccc Tuple ichida nechta element borligini bilish uchun len() funksiyasidan foydalaniladi. Bu funksiya tuple uzunligini, ya\u2019ni elementlar sonini qaytaradi. # 5 ta elementdan iborat tuple yaratilmoqda my_tuple = (1, 2, 3, 4, 5) # len() funksiyasi tuple ichidagi elementlar sonini hisoblaydi print(len(my_tuple)) # 5","title":"\u2747\ufe0f TUPLE UZUNLIGINI ANIQLASH"},{"location":"python/tuples/#in-operatori","text":"\ud83d\udccc in operatori yordamida biror qiymat tuple ichida bor yoki yo\u2018qligini tekshirish mumkin. Natija True yoki False ko\u2018rinishida chiqadi. # Mevalar saqlangan tuple yaratilmoqda my_tuple = (\"apple\", \"banana\", \"cherry\") # \"banana\" tuple ichida bormi? degan savolga javob tekshirilmoqda print(\"banana\" in my_tuple) # True","title":"\u2747\ufe0f in OPERATORI"},{"location":"python/tuples/#tupleni-qiymatlarga-ajratishunpacking","text":"\ud83d\udccc Tuple ichidagi har bir qiymatni alohida o\u2018zgaruvchiga ajratib olish mumkin. Bunga Pythonda unpacking deyiladi. # 3 ta meva nomidan iborat tuple yaratilmoqda my_tuple = (\"apple\", \"banana\", \"cherry\") # Tuple ichidagi har bir qiymat alohida o\u2018zgaruvchiga ajratilmoqda (fruit1, fruit2, fruit3) = my_tuple # Har bir o\u2018zgaruvchidagi qiymat ekranga chiqariladi print(fruit1) # 'apple' print(fruit2) # 'banana' print(fruit3) # 'cherry'","title":"\u2747\ufe0f TUPLENI QIYMATLARGA AJRATISH(Unpacking)"},{"location":"python/tuples/#nested-tuple","text":"\ud83d\udccc Tuple ichida yana boshqa tuple ham saqlanishi mumkin. Bunga ichma-ich tuple yoki nested tuple deyiladi. # Bu yerda talaba haqida ma'lumotlar saqlanmoqda: # ism, yosh, va baholar (baholar alohida tuple ichida) student = (\"Ali\", 20, (85, 90, 95)) # Indeks 0 \u2014 ismni beradi print(student[0]) # Ali # Indeks 1 \u2014 yoshni beradi print(student[1]) # 20 # Indeks 2 \u2014 baholar joylashgan ichki tuple print(student[2]) # (85, 90, 95) # Ichki tuple ichidagi ikkinchi bahoni olish print(student[2][1]) # 90","title":"\u2747\ufe0f NESTED TUPLE"},{"location":"python/tuples/#tuple-bilan-ishlashda-foydali-metodlar","text":"","title":"\u2747\ufe0f TUPLE BILAN ISHLASHDA FOYDALI METODLAR"},{"location":"python/tuples/#count","text":"\ud83d\udccc Bu funksiya siz bergan qiymatni tuple ichida qidiradi va nechta marta borligini sanaydi. Agar qiymat topilmasa, 0 qaytaradi. # Bir nechta takrorlanuvchi sonlardan iborat tuple my_tuple = (1, 2, 2, 3, 2) # 2 soni tuple ichida necha marta borligini hisoblaydi print(my_tuple.count(2)) # 3","title":"\u2733\ufe0f .count()"},{"location":"python/tuples/#index","text":"\ud83d\udccc Bu metod tuple ichida berilgan qiymat qayerda turganini aniqlaydi, ya\u2019ni indeks raqamini qaytaradi. # Elementlar ketma-ketligi my_tuple = (1, 2, 3, 2, 4) # 2 soni birinchi bo\u2018lib qayerda uchraganini topadi (indeks 1) print(my_tuple.index(2)) # 1","title":"\u2733\ufe0f .index()"},{"location":"python/tuples/#amaliyot","text":"","title":"\u2705 AMALIYOT"},{"location":"python/tuples/#1-topshiriq","text":"Quyidagi 3 ta hayvon nomidan iborat animals degan tuple yarating va ekranga chiqaring: - \"quyon\" , \"mushuk\" , \"it\"","title":"\u2705 1-topshiriq:"},{"location":"python/tuples/#2-topshiriq","text":"Faqat \"apple\" qiymatidan iborat tuple yarating. - Vergul qo\u2018yilmasa, bu oddiy string bo\u2018lib qoladi. To\u2018g\u2018ri tuple yarating.","title":"\u2705 2-topshiriq:"},{"location":"python/tuples/#3-topshiriq","text":"Quyidagi tupledagi ikkinchi elementni ekranga chiqaring: colors = (\"red\", \"green\", \"blue\")","title":"\u2705 3-topshiriq:"},{"location":"python/tuples/#4-topshiriq","text":"Quyidagi tupledan oxirgi elementni -1 indeks yordamida chiqaring: numbers = (5, 10, 15, 20)","title":"\u2705 4-topshiriq:"},{"location":"python/tuples/#5-topshiriq","text":"Quyidagi ikki tupleni + operatori yordamida birlashtiring va yangi result nomli tuple yarating: a = (1, 2) b = (3, 4)","title":"\u2705 5-topshiriq:"},{"location":"python/tuples/#6-topshiriq","text":"Quyidagi tuple 3 marta takrorlab new_tuple degan yangi tuple yarating: word = (\"Hi\",)","title":"\u2705 6-topshiriq:"},{"location":"python/tuples/#7-topshiriq","text":"Quyidagi tuple ichida nechta element borligini len() yordamida aniqlang: digits = (1, 2, 3, 4, 5, 6)","title":"\u2705 7-topshiriq:"},{"location":"python/tuples/#8-topshiriq","text":"Quyidagi tupleda \"banana\" bor yoki yo\u2018qligini in operatori yordamida tekshirib chiqaring: fruits = (\"apple\", \"banana\", \"cherry\")","title":"\u2705 8-topshiriq:"},{"location":"python/tuples/#9-topshiriq","text":"Quyidagi tupledagi qiymatlarni alohida 3 ta o\u2018zgaruvchiga ajrating ( unpacking qiling): person = (\"Ali\", 25, \"Toshkent\")","title":"\u2705 9-topshiriq:"},{"location":"python/tuples/#10-topshiriq","text":"Quyidagi nested tupledan 90 sonini alohida olib ekranga chiqaring: student = (\"Ali\", 20, (85, 90, 95))","title":"\u2705 10-topshiriq:"},{"location":"python/tuples/#11-topshiriq","text":"Quyidagi tupleda 2 soni nechta marta qatnashganini .count() yordamida aniqlang: data = (1, 2, 3, 2, 4, 2)","title":"\u2705 11-topshiriq:"},{"location":"python/tuples/#12-topshiriq","text":"Quyidagi tupleda 3 soni birinchi marta qaysi indeksda turganini .index() yordamida aniqlang: nums = (5, 3, 7, 3, 9)","title":"\u2705 12-topshiriq:"},{"location":"python/tuples/#13-topshiriq","text":"Quyidagi kodda tuple emas, string yaratilgan. Uni tuzatib, haqiqiy tuple holatiga keltiring: item = (\"book\")","title":"\u2705 13-topshiriq:"},{"location":"python/tuples/#14-topshiriq","text":"Quyidagi tupledan \"Python\" so\u2018zini indeks yordamida ajratib oling: langs = (\"C++\", \"Python\", \"Java\")","title":"\u2705 14-topshiriq:"},{"location":"python/tuples/#15-topshiriq","text":"Quyidagi ikki tupleni + operatori yordamida birlashtiring va new_tuple nomli yangi tuplega saqlang: tuple1 = (\"a\", \"b\") tuple2 = (\"c\", \"d\", \"e\")","title":"\u2705 15-topshiriq:"},{"location":"python/variables/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 01-DARS VARIABLES \u2705 O'ZGARUVCHI NIMA? \ud83d\udccc Python dasturlash tilida o\u2018zgaruvchi (variable) \u2014 bu kompyuterda ma\u2019lumotni vaqtincha saqlab turadigan nomlangan joy . Bu joyga biz har qanday ma\u2019lumotni (masalan, matn, son) joylashtirishimiz mumkin. Keyin bu nom orqali o\u2018sha ma\u2019lumotdan foydalanish, o\u2018zgartirish yoki hisoblash osonlashadi. O\u2018zgaruvchilar bizga dastur ichida ma\u2019lumot bilan ishlashni tartibli va qulay qiladi. Har safar ma\u2019lumotni qayta yozmasdan, nomini chaqirib ishlatishimiz mumkin . \ud83d\udccc Quyidagi misolda 4 ta o'zgaruvchi yaratdik ( x , y , name va is_student ) va ularga har xil ma'lumot yukladik. # Butun sonni (integer) o'zgaruvchiga saqlaymiz x = 5 # Haqiqiy sonni (float) o'zgaruvchiga saqlaymiz y = 3.14 # Matn (string) qiymatni o'zgaruvchiga saqlaymiz name = \"Alice\" # Mantiqiy (boolean) qiymatni o'zgaruvchiga saqlaymiz is_student = True # x o'zgaruvchisining qiymatini chiqaramiz print(x) # y o'zgaruvchisining qiymatini chiqaramiz print(y) # name o'zgaruvchisining qiymatini chiqaramiz print(name) # is_student o'zgaruvchisining qiymatini chiqaramiz print(is_student) \ud83d\udccc variable diyilishini sababi uning qiymati istalgan payt o'zgarishi mumkin: # 'name' o'zgaruvchisiga dastlab 'Alisher' matnini beramiz name = 'Alisher' # name o'zgaruvchisining hozirgi qiymatini chiqaramiz (Alisher) print(name) # name o'zgaruvchisining qiymatini o'zgartiramiz, endi u 'Muhammad' bo'ladi name = \"Muhammad\" # name o'zgaruvchisining yangi qiymatini chiqaramiz (Muhammad) print(name) \u2705 O'ZGARUVCHILARNI NOMLASH \u2757 O'zgaruvchilarga nom berishda quyidagi qoidalarga amal qiling: \u274c O'zgaruvchi nomi harf yoki pastki chiziq ( _ ) bilan boshlanishi kerak \u2705 To\u2018g\u2018ri: # Harflardan tashkil topgan oddiy o'zgaruvchi nomi ism = \"Ali\" # Pastki chiziq (_) bilan boshlangan o'zgaruvchi nomi _yosh = 25 \u274c Noto\u2018g\u2018ri: # \u274c Son bilan boshlanmaydi 1ism = \"Ali\" \u274c O'zgaruvchi nomi raqam bilan boshlanishi mumkin emas \ud83d\udccc Raqam faqat nomning oxirida yoki o\u2018rtasida ishlatilishi mumkin. \u2705 To\u2018g\u2018ri: # O'zgaruvchi nomi harf bilan boshlangan va raqam bilan tugagan \u2014 to'g'ri raqam1 = 10 # O'zgaruvchi nomi harf bilan boshlangan va oxirida raqam ishlatilgan \u2014 to'g'ri sana2025 = 2025 \u274c Noto\u2018g\u2018ri: # \u274c Raqam bilan boshlanmaydi 3dars = \"Python\" \u274c O'zgaruvchi nomida faqatgina ingliz tili alifbosi harflari ( A-z ), raqamlar ( 0-9 ) va pastki chiziq ( _ ) qatnashishi mumkin \ud83d\udccc Maxsus belgilar ( @ , ! , # , - va boshqalar) o\u2018zgaruvchi nomida ishlatilmaydi. \u2705 To\u2018g\u2018ri: # Lotin harflari va pastki chiziq ishlatilgan \u2014 to\u2018g\u2018ri user_name = \"Umid\" # Harf va raqam ishlatilgan \u2014 to\u2018g\u2018ri user1 = \"Ali\" # Pastki chiziq bilan boshlangan nom \u2014 bu ham to\u2018g\u2018ri _max_score = 100 \u274c Noto\u2018g\u2018ri: # O'zgaruvchi nomida '@' belgisi ishlatilgan \u2014 bu noto\u2018g\u2018ri # \u274c Maxsus belgilar (masalan: @) Python'da o'zgaruvchi nomida bo'lmasligi kerak ism@familiya = \"Valijon\" # O'zgaruvchi nomida '!' belgisi ishlatilgan \u2014 bu ham noto\u2018g\u2018ri # \u274c Maxsus belgilar (masalan: !) ruxsat etilmaydi yosh! = 18 \u274c O'zgaruvchi nomida bo'shliq (\u043f\u0440\u043e\u0431\u0435\u043b) bo'lishi mumkin emas \u2705 To\u2018g\u2018ri: # O'zgaruvchi nomida pastki chiziq ishlatilgan \u2014 bu to\u2018g\u2018ri usul ism_familiya = \"Ali Karimov\" \u274c Noto\u2018g\u2018ri: # O'zgaruvchi nomida bo\u2018shliq (space) ishlatilgan \u2014 bu noto\u2018g\u2018ri # \u274c Python'da o'zgaruvchi nomi bo\u2018shliq bilan yozilmaydi ism familiya = \"Ali Karimov\" \u274c O'zgaruvchi nomida katta-kichik harflar turlicha talqin qilinadi ( ism , ISM , va Ism uchta turli o'zgaruvchi) \ud83d\udccc Pythonda ism , ISM va Ism bu uchta alohida o\u2018zgaruvchi hisoblanadi. # kichik harflardan tashkil topgan o'zgaruvchi ism = \"Ali\" # hamma harflari katta bo'lgan o'zgaruvchi \u2014 bu boshqa o'zgaruvchi ISM = \"Vali\" # bosh harfi katta, qolgan kichik bo'lgan o'zgaruvchi \u2014 yana boshqa o'zgaruvchi Ism = \"Sami\" # 'ism' o'zgaruvchisining qiymatini chiqaramiz print(ism) # Ali # 'ISM' o'zgaruvchisining qiymatini chiqaramiz print(ISM) # Vali # 'Ism' o'zgaruvchisining qiymatini chiqaramiz print(Ism) # Sami \u2705 QO'SHIMCHA QOIDALAR \u2747\ufe0f O'zgaruvchi nomini kichik harflar bilan yozing. \ud83d\udccc Python kodini o\u2018qishda va tushunishda qulaylik uchun o\u2018zgaruvchilarni kichik harflar bilan yozish odatiy hisoblanadi. # To'g'ri va tavsiya qilinadigan usul \u2014 o'zgaruvchi nomi kichik harflardan iborat ism = \"Umid\" # Tavsiya qilinmaydi \u2014 bosh harf bilan boshlash kodda chalkashlik keltirib chiqarishi mumkin Ism = \"Umid\" # Tavsiya qilinmaydi \u2014 hamma harflar katta bo\u2018lishi ko\u2018pincha konstantalar uchun ishlatiladi ISM = \"Umid\" \u2747\ufe0f O'zgaruvchi nomida 2 va undan ortiq so'z qatnashsa ularning orasini pastki chiziq ( _ ) bilan ajrating ( ism_sharif=\"Umid G'aybullayev\" ) \ud83d\udccc Bu usul o\u2018zgaruvchi nomini o\u2018qishni osonlashtiradi va kodni yanada tushunarli qiladi. # Ikkita so\u2018zdan tashkil topgan o'zgaruvchi nomi, so\u2018zlar pastki chiziq bilan ajratilgan ism_sharif = \"Umid G'aybullayev\" # Ikkita so\u2018zdan tashkil topgan o'zgaruvchi nomi, so\u2018zlar pastki chiziq yordamida bog\u2018langan tugilgan_yil = 2004 \u2747\ufe0f O'zgaruvchiga tushunarli nom bering ( y=20 emas yosh=20 , d=\"Korea\" emas davlat = \"Korea\" va hokazo) \ud83d\udccc O\u2018zgaruvchi nomi uning ma\u2019nosini ifodalashi kerak, shunda kodni o\u2018qish va tushunish osonlashadi. # Yomon misollar \u2014 nomlar qisqa va ma\u2019nosiz, kodni tushunishni qiyinlashtiradi y = 20 d = \"Korea\" # Yaxshi misollar \u2014 nomlar ma\u2019noli va tushunarli yosh = 20 davlat = \"Korea\" \u2747\ufe0f Shuningdek o'zgaruvchilarga Pythonda ishlatiladigan funksiyalar va maxsus kalit so'zlarning(keywords) nomini bermang. Kalit so'zlar ro'yhatini ko'rish uchun python faylga uyidagi kodni yozamiz: \ud83d\udccc Chunki bu nomlar Python tili tomonidan maxsus ma\u2019noga ega va ular bilan nomlash kodni buzadi yoki xato beradi. # Python kalit so'zlarini ko'rish uchun quyidagilarni yozamiz import keyword # Python kalit so'zlar ro'yxatini chiqaramiz print(keyword.kwlist) \u2705 To\u2018g\u2018ri: # To\u2018g\u2018ri misollar \u2014 kalit so'zlarni o'zgaruvchi nomining bir qismi sifatida ishlatish mumkin def_funksiya = 10 for_son = 20 \u274c Noto\u2018g\u2018ri: # Noto\u2018g\u2018ri misollar \u2014 kalit so\u2018zlarni o\u2018zgaruvchi nomi sifatida ishlatish mumkin emas def = 10 # \u274c 'def' kalit so'z, o'zgaruvchi sifatida ishlatilmaydi for = 20 # \u274c 'for' kalit so'z, o'zgaruvchi sifatida ishlatilmaydi \u2705 AMALIYOT \u2705 1-topshiriq: Quyidagi qiymatlarni o\u2018zgaruvchilarga yuklang va print() orqali ekranga chiqaring: - ismingiz - yoshingiz - sevimli soningiz - talaba ekanligingiz (True yoki False) \u2705 2-topshiriq: Quyidagi ma\u2019lumotlar uchun mos o\u2018zgaruvchilar yarating: kitob_nomi \u2192 \u201cSariq devni minib\u201d muallif \u2192 \u201cXudoyberdi To\u2018xtaboyev\u201d sahifalar_soni \u2192 185 Ularni print() yordamida chiqarib bering. \u2705 3-topshiriq: Quyidagi noto\u2018g\u2018ri o\u2018zgaruvchi nomlarini to\u2018g\u2018rilang: 1kitob = \"Python\" ism familiya = \"Ali Karimov\" davlat@ = \"Uzbekistan\" \u2705 4-topshiriq: Quyidagi qiymatlarni saqlovchi o\u2018zgaruvchilarni yarating va print() bilan ularning turini (type()) chiqaring: yosh = 25 baho = 4.5 ism = \"Dilshod\" is_student = False \u2705 5-topshiriq: Quyidagi kodni yozing: name o\u2018zgaruvchisi yarating va unga ism kiriting. Keyin, uning qiymatini boshqa ism bilan almashtiring. Har ikkala holatda qiymatni ekranga chiqaring. \u2705 6-topshiriq: Quyidagi noto\u2018g\u2018ri o\u2018zgaruvchilarni aniqlang va nega xato ekanligini yozing: for = \"dars\" def = \"funksiya\" yosh! = 20 \u2705 7-topshiriq: Quyidagi ikkita o\u2018zgaruvchini yarating: ism = \"Jamshid\" ISM = \"Anvar\" Ularning ikkalasini print() bilan chiqaring va nima sababdan ikkala qiymat chiqayotganini tushuntiring. \u2705 8-topshiriq: O\u2018zgaruvchi nomlarida pastki chiziq (_) ishlatish kerak bo\u2018lgan 3 ta misol yozing. Masalan: foydalanuvchi_ismi, kitob_soni, manzil_nomi \u2705 9-topshiriq: Tushunarli va tushunarsiz o\u2018zgaruvchi nomlariga 3 tadan misol yozing: Yaxshi: yosh, davlat, kitob_nomi Yomon: x, d, n1 \u2705 10-topshiriq: Quyidagi kodni to\u2018g\u2018ri ko\u2018rinishga keltiring: 3son = 25 user name = \"Ali\" yosh@ = 20 \u2705 11-topshiriq: Quyidagi o\u2018zgaruvchilarni yarating va print() yordamida ularni chiqarib bering: kitob_nomi = \"Yulduzli tunlar\" muallif = \"Pirimqul Qodirov\" narx = 37000 mavjud = True \u2705 12-topshiriq: Kalit so\u2018zlar ro\u2018yxatini ko\u2018rsatadigan kod yozing va uni bajaring. Kod natijasida ekranda Python kalit so\u2018zlari chiqishi kerak. \u2705 13-topshiriq: Quyidagi kodni tahlil qiling. Nima sababdan xatolik borligini tushuntiring: import = \"data\" True = 1 \u2705 14-topshiriq: O\u2018zgaruvchilarni quyidagi ma\u2019nolarga qarab yarating: Foydalanuvchining ismi Parol Email manzili Tug\u2018ilgan yili \u2705 15-topshiriq: Quyidagi qiymatlar uchun mos o\u2018zgaruvchilar yarating va ularni print() yordamida chiqarib, bir satrda type() funksiyasi bilan ularning turlarini ham ko\u2018rsating: ism = \"Sardor\" yosh = 22 talaba = True ball = 4.9","title":"Variables"},{"location":"python/variables/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/variables/#01-dars-variables","text":"","title":"\ud83e\udde9 01-DARS VARIABLES"},{"location":"python/variables/#ozgaruvchi-nima","text":"\ud83d\udccc Python dasturlash tilida o\u2018zgaruvchi (variable) \u2014 bu kompyuterda ma\u2019lumotni vaqtincha saqlab turadigan nomlangan joy . Bu joyga biz har qanday ma\u2019lumotni (masalan, matn, son) joylashtirishimiz mumkin. Keyin bu nom orqali o\u2018sha ma\u2019lumotdan foydalanish, o\u2018zgartirish yoki hisoblash osonlashadi. O\u2018zgaruvchilar bizga dastur ichida ma\u2019lumot bilan ishlashni tartibli va qulay qiladi. Har safar ma\u2019lumotni qayta yozmasdan, nomini chaqirib ishlatishimiz mumkin . \ud83d\udccc Quyidagi misolda 4 ta o'zgaruvchi yaratdik ( x , y , name va is_student ) va ularga har xil ma'lumot yukladik. # Butun sonni (integer) o'zgaruvchiga saqlaymiz x = 5 # Haqiqiy sonni (float) o'zgaruvchiga saqlaymiz y = 3.14 # Matn (string) qiymatni o'zgaruvchiga saqlaymiz name = \"Alice\" # Mantiqiy (boolean) qiymatni o'zgaruvchiga saqlaymiz is_student = True # x o'zgaruvchisining qiymatini chiqaramiz print(x) # y o'zgaruvchisining qiymatini chiqaramiz print(y) # name o'zgaruvchisining qiymatini chiqaramiz print(name) # is_student o'zgaruvchisining qiymatini chiqaramiz print(is_student) \ud83d\udccc variable diyilishini sababi uning qiymati istalgan payt o'zgarishi mumkin: # 'name' o'zgaruvchisiga dastlab 'Alisher' matnini beramiz name = 'Alisher' # name o'zgaruvchisining hozirgi qiymatini chiqaramiz (Alisher) print(name) # name o'zgaruvchisining qiymatini o'zgartiramiz, endi u 'Muhammad' bo'ladi name = \"Muhammad\" # name o'zgaruvchisining yangi qiymatini chiqaramiz (Muhammad) print(name)","title":"\u2705 O'ZGARUVCHI NIMA?"},{"location":"python/variables/#ozgaruvchilarni-nomlash","text":"","title":"\u2705 O'ZGARUVCHILARNI NOMLASH"},{"location":"python/variables/#ozgaruvchilarga-nom-berishda-quyidagi-qoidalarga-amal-qiling","text":"","title":"\u2757 O'zgaruvchilarga nom berishda quyidagi qoidalarga amal qiling:"},{"location":"python/variables/#ozgaruvchi-nomi-harf-yoki-pastki-chiziq-_-bilan-boshlanishi-kerak","text":"\u2705 To\u2018g\u2018ri: # Harflardan tashkil topgan oddiy o'zgaruvchi nomi ism = \"Ali\" # Pastki chiziq (_) bilan boshlangan o'zgaruvchi nomi _yosh = 25 \u274c Noto\u2018g\u2018ri: # \u274c Son bilan boshlanmaydi 1ism = \"Ali\"","title":"\u274c O'zgaruvchi nomi harf yoki pastki chiziq (_) bilan boshlanishi kerak"},{"location":"python/variables/#ozgaruvchi-nomi-raqam-bilan-boshlanishi-mumkin-emas","text":"\ud83d\udccc Raqam faqat nomning oxirida yoki o\u2018rtasida ishlatilishi mumkin. \u2705 To\u2018g\u2018ri: # O'zgaruvchi nomi harf bilan boshlangan va raqam bilan tugagan \u2014 to'g'ri raqam1 = 10 # O'zgaruvchi nomi harf bilan boshlangan va oxirida raqam ishlatilgan \u2014 to'g'ri sana2025 = 2025 \u274c Noto\u2018g\u2018ri: # \u274c Raqam bilan boshlanmaydi 3dars = \"Python\"","title":"\u274c O'zgaruvchi nomi raqam bilan boshlanishi mumkin emas"},{"location":"python/variables/#ozgaruvchi-nomida-faqatgina-ingliz-tili-alifbosi-harflari-a-z-raqamlar-0-9-va-pastki-chiziq-_-qatnashishi-mumkin","text":"\ud83d\udccc Maxsus belgilar ( @ , ! , # , - va boshqalar) o\u2018zgaruvchi nomida ishlatilmaydi. \u2705 To\u2018g\u2018ri: # Lotin harflari va pastki chiziq ishlatilgan \u2014 to\u2018g\u2018ri user_name = \"Umid\" # Harf va raqam ishlatilgan \u2014 to\u2018g\u2018ri user1 = \"Ali\" # Pastki chiziq bilan boshlangan nom \u2014 bu ham to\u2018g\u2018ri _max_score = 100 \u274c Noto\u2018g\u2018ri: # O'zgaruvchi nomida '@' belgisi ishlatilgan \u2014 bu noto\u2018g\u2018ri # \u274c Maxsus belgilar (masalan: @) Python'da o'zgaruvchi nomida bo'lmasligi kerak ism@familiya = \"Valijon\" # O'zgaruvchi nomida '!' belgisi ishlatilgan \u2014 bu ham noto\u2018g\u2018ri # \u274c Maxsus belgilar (masalan: !) ruxsat etilmaydi yosh! = 18","title":"\u274c O'zgaruvchi nomida faqatgina ingliz tili alifbosi harflari (A-z), raqamlar (0-9) va pastki chiziq (_) qatnashishi mumkin"},{"location":"python/variables/#ozgaruvchi-nomida-boshliq-bolishi-mumkin-emas","text":"\u2705 To\u2018g\u2018ri: # O'zgaruvchi nomida pastki chiziq ishlatilgan \u2014 bu to\u2018g\u2018ri usul ism_familiya = \"Ali Karimov\" \u274c Noto\u2018g\u2018ri: # O'zgaruvchi nomida bo\u2018shliq (space) ishlatilgan \u2014 bu noto\u2018g\u2018ri # \u274c Python'da o'zgaruvchi nomi bo\u2018shliq bilan yozilmaydi ism familiya = \"Ali Karimov\"","title":"\u274c O'zgaruvchi nomida bo'shliq (\u043f\u0440\u043e\u0431\u0435\u043b) bo'lishi mumkin emas"},{"location":"python/variables/#ozgaruvchi-nomida-katta-kichik-harflar-turlicha-talqin-qilinadi-ism-ism-va-ism-uchta-turli-ozgaruvchi","text":"\ud83d\udccc Pythonda ism , ISM va Ism bu uchta alohida o\u2018zgaruvchi hisoblanadi. # kichik harflardan tashkil topgan o'zgaruvchi ism = \"Ali\" # hamma harflari katta bo'lgan o'zgaruvchi \u2014 bu boshqa o'zgaruvchi ISM = \"Vali\" # bosh harfi katta, qolgan kichik bo'lgan o'zgaruvchi \u2014 yana boshqa o'zgaruvchi Ism = \"Sami\" # 'ism' o'zgaruvchisining qiymatini chiqaramiz print(ism) # Ali # 'ISM' o'zgaruvchisining qiymatini chiqaramiz print(ISM) # Vali # 'Ism' o'zgaruvchisining qiymatini chiqaramiz print(Ism) # Sami","title":"\u274c O'zgaruvchi nomida katta-kichik harflar turlicha talqin qilinadi (ism, ISM, va Ism uchta turli o'zgaruvchi)"},{"location":"python/variables/#qoshimcha-qoidalar","text":"","title":"\u2705 QO'SHIMCHA QOIDALAR"},{"location":"python/variables/#ozgaruvchi-nomini-kichik-harflar-bilan-yozing","text":"\ud83d\udccc Python kodini o\u2018qishda va tushunishda qulaylik uchun o\u2018zgaruvchilarni kichik harflar bilan yozish odatiy hisoblanadi. # To'g'ri va tavsiya qilinadigan usul \u2014 o'zgaruvchi nomi kichik harflardan iborat ism = \"Umid\" # Tavsiya qilinmaydi \u2014 bosh harf bilan boshlash kodda chalkashlik keltirib chiqarishi mumkin Ism = \"Umid\" # Tavsiya qilinmaydi \u2014 hamma harflar katta bo\u2018lishi ko\u2018pincha konstantalar uchun ishlatiladi ISM = \"Umid\"","title":"\u2747\ufe0f O'zgaruvchi nomini kichik harflar bilan yozing."},{"location":"python/variables/#ozgaruvchi-nomida-2-va-undan-ortiq-soz-qatnashsa-ularning-orasini-pastki-chiziq-_-bilan-ajrating-ism_sharifumid-gaybullayev","text":"\ud83d\udccc Bu usul o\u2018zgaruvchi nomini o\u2018qishni osonlashtiradi va kodni yanada tushunarli qiladi. # Ikkita so\u2018zdan tashkil topgan o'zgaruvchi nomi, so\u2018zlar pastki chiziq bilan ajratilgan ism_sharif = \"Umid G'aybullayev\" # Ikkita so\u2018zdan tashkil topgan o'zgaruvchi nomi, so\u2018zlar pastki chiziq yordamida bog\u2018langan tugilgan_yil = 2004","title":"\u2747\ufe0f O'zgaruvchi nomida 2 va undan ortiq so'z qatnashsa ularning orasini pastki chiziq (_) bilan ajrating (ism_sharif=\"Umid G'aybullayev\")"},{"location":"python/variables/#ozgaruvchiga-tushunarli-nom-bering-y20-emas-yosh20-dkorea-emas-davlat-korea-va-hokazo","text":"\ud83d\udccc O\u2018zgaruvchi nomi uning ma\u2019nosini ifodalashi kerak, shunda kodni o\u2018qish va tushunish osonlashadi. # Yomon misollar \u2014 nomlar qisqa va ma\u2019nosiz, kodni tushunishni qiyinlashtiradi y = 20 d = \"Korea\" # Yaxshi misollar \u2014 nomlar ma\u2019noli va tushunarli yosh = 20 davlat = \"Korea\"","title":"\u2747\ufe0f O'zgaruvchiga tushunarli nom bering (y=20 emas yosh=20, d=\"Korea\" emas davlat = \"Korea\" va hokazo)"},{"location":"python/variables/#shuningdek-ozgaruvchilarga-pythonda-ishlatiladigan-funksiyalar-va-maxsus-kalit-sozlarningkeywords-nomini-bermang-kalit-sozlar-royhatini-korish-uchun-python-faylga-uyidagi-kodni-yozamiz","text":"\ud83d\udccc Chunki bu nomlar Python tili tomonidan maxsus ma\u2019noga ega va ular bilan nomlash kodni buzadi yoki xato beradi. # Python kalit so'zlarini ko'rish uchun quyidagilarni yozamiz import keyword # Python kalit so'zlar ro'yxatini chiqaramiz print(keyword.kwlist) \u2705 To\u2018g\u2018ri: # To\u2018g\u2018ri misollar \u2014 kalit so'zlarni o'zgaruvchi nomining bir qismi sifatida ishlatish mumkin def_funksiya = 10 for_son = 20 \u274c Noto\u2018g\u2018ri: # Noto\u2018g\u2018ri misollar \u2014 kalit so\u2018zlarni o\u2018zgaruvchi nomi sifatida ishlatish mumkin emas def = 10 # \u274c 'def' kalit so'z, o'zgaruvchi sifatida ishlatilmaydi for = 20 # \u274c 'for' kalit so'z, o'zgaruvchi sifatida ishlatilmaydi","title":"\u2747\ufe0f Shuningdek o'zgaruvchilarga Pythonda ishlatiladigan funksiyalar va maxsus kalit so'zlarning(keywords) nomini bermang. Kalit so'zlar ro'yhatini ko'rish uchun python faylga uyidagi kodni yozamiz:"},{"location":"python/variables/#amaliyot","text":"","title":"\u2705 AMALIYOT"},{"location":"python/variables/#1-topshiriq","text":"Quyidagi qiymatlarni o\u2018zgaruvchilarga yuklang va print() orqali ekranga chiqaring: - ismingiz - yoshingiz - sevimli soningiz - talaba ekanligingiz (True yoki False)","title":"\u2705 1-topshiriq:"},{"location":"python/variables/#2-topshiriq","text":"Quyidagi ma\u2019lumotlar uchun mos o\u2018zgaruvchilar yarating: kitob_nomi \u2192 \u201cSariq devni minib\u201d muallif \u2192 \u201cXudoyberdi To\u2018xtaboyev\u201d sahifalar_soni \u2192 185 Ularni print() yordamida chiqarib bering.","title":"\u2705 2-topshiriq:"},{"location":"python/variables/#3-topshiriq","text":"Quyidagi noto\u2018g\u2018ri o\u2018zgaruvchi nomlarini to\u2018g\u2018rilang: 1kitob = \"Python\" ism familiya = \"Ali Karimov\" davlat@ = \"Uzbekistan\"","title":"\u2705 3-topshiriq:"},{"location":"python/variables/#4-topshiriq","text":"Quyidagi qiymatlarni saqlovchi o\u2018zgaruvchilarni yarating va print() bilan ularning turini (type()) chiqaring: yosh = 25 baho = 4.5 ism = \"Dilshod\" is_student = False","title":"\u2705 4-topshiriq:"},{"location":"python/variables/#5-topshiriq","text":"Quyidagi kodni yozing: name o\u2018zgaruvchisi yarating va unga ism kiriting. Keyin, uning qiymatini boshqa ism bilan almashtiring. Har ikkala holatda qiymatni ekranga chiqaring.","title":"\u2705 5-topshiriq:"},{"location":"python/variables/#6-topshiriq","text":"Quyidagi noto\u2018g\u2018ri o\u2018zgaruvchilarni aniqlang va nega xato ekanligini yozing: for = \"dars\" def = \"funksiya\" yosh! = 20","title":"\u2705 6-topshiriq:"},{"location":"python/variables/#7-topshiriq","text":"Quyidagi ikkita o\u2018zgaruvchini yarating: ism = \"Jamshid\" ISM = \"Anvar\" Ularning ikkalasini print() bilan chiqaring va nima sababdan ikkala qiymat chiqayotganini tushuntiring.","title":"\u2705 7-topshiriq:"},{"location":"python/variables/#8-topshiriq","text":"O\u2018zgaruvchi nomlarida pastki chiziq (_) ishlatish kerak bo\u2018lgan 3 ta misol yozing. Masalan: foydalanuvchi_ismi, kitob_soni, manzil_nomi","title":"\u2705 8-topshiriq:"},{"location":"python/variables/#9-topshiriq","text":"Tushunarli va tushunarsiz o\u2018zgaruvchi nomlariga 3 tadan misol yozing: Yaxshi: yosh, davlat, kitob_nomi Yomon: x, d, n1","title":"\u2705 9-topshiriq:"},{"location":"python/variables/#10-topshiriq","text":"Quyidagi kodni to\u2018g\u2018ri ko\u2018rinishga keltiring: 3son = 25 user name = \"Ali\" yosh@ = 20","title":"\u2705 10-topshiriq:"},{"location":"python/variables/#11-topshiriq","text":"Quyidagi o\u2018zgaruvchilarni yarating va print() yordamida ularni chiqarib bering: kitob_nomi = \"Yulduzli tunlar\" muallif = \"Pirimqul Qodirov\" narx = 37000 mavjud = True","title":"\u2705 11-topshiriq:"},{"location":"python/variables/#12-topshiriq","text":"Kalit so\u2018zlar ro\u2018yxatini ko\u2018rsatadigan kod yozing va uni bajaring. Kod natijasida ekranda Python kalit so\u2018zlari chiqishi kerak.","title":"\u2705 12-topshiriq:"},{"location":"python/variables/#13-topshiriq","text":"Quyidagi kodni tahlil qiling. Nima sababdan xatolik borligini tushuntiring: import = \"data\" True = 1","title":"\u2705 13-topshiriq:"},{"location":"python/variables/#14-topshiriq","text":"O\u2018zgaruvchilarni quyidagi ma\u2019nolarga qarab yarating: Foydalanuvchining ismi Parol Email manzili Tug\u2018ilgan yili","title":"\u2705 14-topshiriq:"},{"location":"python/variables/#15-topshiriq","text":"Quyidagi qiymatlar uchun mos o\u2018zgaruvchilar yarating va ularni print() yordamida chiqarib, bir satrda type() funksiyasi bilan ularning turlarini ham ko\u2018rsating: ism = \"Sardor\" yosh = 22 talaba = True ball = 4.9","title":"\u2705 15-topshiriq:"},{"location":"python/what-is-python/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 WHAT IS PYTHON? \ud83d\udccc Python \u2014 bu yuqori darajadagi, umumiy maqsadli, interpreted dasturlash tili. U soddaligi, oson sintaksisi, o\u2018qilishi qulayligi bilan mashhur. \ud83d\udccc High-Level Programming Language : bu inson o\u2018qishi va tushunishi oson bo\u2018lgan dasturlash tili degani. Kompyuterlar past darajadagi tillarda ishlaydi (masalan: Assembly, Machine Code), ammo bu tillar inson uchun tushunish qiyin. \u2733\ufe0f Python esa odam tiliga yaqin bo\u2018lib yoziladi: print(\"Salom, dunyo!\") # Ekranga matn chiqarish \ud83d\udccc Bu buyruqni har kim tushunadi. Ammo past darajadagi tillarda xuddi shu ishni qilish juda murakkab bo\u2018ladi. \ud83d\udccc Yuqori darajadagi tillarning afzalliklari: Sintaksisi oddiy va oson O\u2018rganish va tushunish qulay Ko\u2018p platformalarda ishlaydi Kam kod bilan ko\u2018p ishni bajaradi \ud83d\udccc General-Purpose Programming Language : bu har xil dasturlarni yaratish uchun ishlatiladigan dasturlash tili. \u2733\ufe0f Python yordamida quyidagilarni qilish mumkin: \ud83c\udf10 Web dasturlar (Django, Flask) \ud83e\udd16 Sun'iy intellekt (AI, ML) \ud83d\udcca Ma\u2019lumotlar tahlili (Pandas, NumPy) \ud83d\udda5\ufe0f Desktop ilovalar \ud83d\udcf1 Mobil ilovalar (Kivy, BeeWare) \ud83c\udfae O\u2018yinlar (Pygame) \ud83e\uddea Ilmiy hisob-kitoblar \ud83d\udee0\ufe0f Avtomatlashtirish va skriptlar Tushuncha Ma'nosi Yuqori darajadagi Inson o\u2018qishi oson, sodda sintaksisga ega dasturlash tili Umumiy maqsadli Turli sohalarda foydalanish mumkin bo\u2018lgan dasturlash tili \u2705 PYTHON TARIXI \u2733\ufe0f Python asoschisi: Guido van Rossum Guido van Rossum \u2014 Gollandiyalik dasturchi. 1980-yillarda CWI (Centrum Wiskunde & Informatica) \u2013 Gollandiyadagi ilmiy markazda ishlagan. U tilni soddaroq, tushunarli va o\u2018qilishi oson bo\u2018lishini istagan. Tilga \u201cPython\u201d deb nom berilishiga sabab esa u juda yoqtirgan \u201cMonty Python\u2019s Flying Circus\u201d nomli komedik TV dasturi edi. \u2705 PYTHON TARIXIY BOSQICHLARI \u2747\ufe0f PYTHON LOYIHASI BOSHLANISHI - 1989-YIL DEKABR \ud83d\udccc Guido dam olish vaqtida yangi til yozishga kirishadi. \ud83d\udccc Maqsadi: ABC dasturlash tilining (CWI tomonidan yaratilgan) soddaligi va foydaliligini yaxshilash. \ud83d\udccc Unga fayl va istalgan tizimga bog\u2018lanish (file handling & OS interfacing) imkoniyatlari qo\u2018shmoqchi bo\u2018ladi. \u2747\ufe0f PYTHON 1.0 - 1991-YIL 20-FEVRAL \u2733\ufe0f Python ilk rasmiy versiyasi: - Funksiya, shart operatorlari ( if , else , elif ) - while , for , break , continue operatorlari - Ma'lumot turlari: str , list , dict , tuple - exception handling (try-except) mavjud edi \u2747\ufe0f PYTHON 2.0 - 2000-YIL 16-DEKABR \u2733\ufe0f Muhim yangiliklar: list comprehensions (ro\u2018yxatlar uchun qisqa yozuv) garbage collection (avtomatik xotira tozalash) Unicode qo\u2018llab-quvvatlash \u2747\ufe0f PYTHON 3.0 - 2008-YIL 3-DEKABR \ud83d\udccc Bu versiya to\u2018liq yangilangan, orqaga mos kelmaydigan versiya edi. \u2733\ufe0f Asosiy o\u2018zgarishlar: print endi funksiya bo\u2018ldi: print(\"Hello\") integer division endi aniq natija beradi: 5/2 = 2.5 Unicode to\u2018liq qo\u2018llab-quvvatlandi Yangi sintaksislar: with , f-string , type hints kiritildi \u2705 PYTHON VERSIYALARI JADVALI Versiya Chiqqan sana Asosiy yangiliklar Python 1.0 1991-yil Birinchi rasmiy nashr Python 2.0 2000-yil Unicode, GC, List comprehensions Python 3.0 2008-yil Unicode, yangi sintaksis Python 3.5 2015-yil async/await , type hinting Python 3.6 2016-yil f-strings Python 3.9 2020-yil Yangi to\u2018plamlar funksiyalari Python 3.10 2021-yil match-case pattern matching Python 3.11 2022-yil Katta tezlik (50% gacha yaxshilangan) Python 3.12 2023-yil Yaxshilangan profiling, diagnostics Python 3.13 2024-yil (beta) Tezlik va sintaktik yaxshilanishlar \u2705 PYTHONNING ASOSIY XUSUSIYATLARI \ud83d\udccc Oson yoziladi va tushuniladi - Python sintaksisi oddiy va inson tiliga o\u2018xshash. Shu sababli uni yangi o\u2018rganayotganlar tez tushunadi va kod yozishni oson o\u2018rganadi. \ud83d\udccc Qatorma-qator bajariladi - Python \u2014 interpreted til. Kodlar yuqoridan pastga qarab birma-bir bajariladi. Har bir qatordagi buyruq navbati bilan bajariladi. \ud83d\udccc Turli operatsion tizimlarda ishlaydi - Python dasturlari Windows, MacOS va Linux tizimlarida bir xil ishlaydi. Hech qanday alohida sozlashlarsiz ko\u2018p platformalarda foydalanish mumkin. \ud83d\udccc Ko\u2018plab tayyor kutubxonalar mavjud - Python juda katta kutubxonalar to\u2018plamiga ega. Ular yordamida murakkab matematik, grafik, internet, ma\u2019lumotlar bilan bog\u2018liq ishlar tez va oson bajariladi. \ud83d\udccc Obyektga yo\u2018naltirilgan dasturlash tili - Python yirik va murakkab dasturlarni modullarga bo\u2018lib yozishga imkon beradi. Bu dasturlarni boshqarishni va ularni rivojlantirishni osonlashtiradi. \ud83d\udccc Boshqa dasturlash tillari bilan birga ishlay oladi - Python boshqa tillar \u2014 masalan, C, C++, Java yoki HTML bilan integratsiya qilib ishlatilishi mumkin. Bu uni yanada kuchli va moslashuvchan qiladi. \u2705 PYTHON QANDAY ISHLAYDI Code Writing : Dastlab Python kodini .py fayl ko'rinishida yozasiz. Interpreter Runs : Python interpretatori ushbu kodni o\u2019qib, uni mashina tushunadigan baytlarga o\u2018zgartiradi. Bu jarayonda kod qatorma-qator tahlil qilinadi va ishlatiladi. Conversion to Bytecode : Kod bytecode ga o\u2018zgartiriladi, bu esa Python PVM da ishlaydi. bytecode \u2014 bu kompyuterga tushunarli bo\u2019lgan oraliq kod, lekin u hali ham yuqori darajali tildir. Python Virtual Machine (PVM) : bytecode PVM orqali ishlaydi, va bu virtual mashina dastur kodini to\u2018liq bajaradi. Bu jarayon kompyuteringiz operatsion tizimi orqali amalga oshiriladi. Output Generated : Kod bajarilishi bilan natijalar ekranga chiqariladi yoki kerakli hisob-kitoblar amalga oshiriladi. Pythonning qo\u2018llanish sohalari: Web Development: Django , Flask kabi freymvorklar orqali veb-saytlar va veb-ilovalar yaratish. Data Analysis and Scientific Computing: NumPy , pandas , SciPy , matplotlib kabi kutubxonalar yordamida. AI(Artificial Intelligence) and Machine Learning: TensorFlow , Keras , PyTorch kabi kutubxonalar yordamida. Automation and Scripting: Turli xil vazifalarni avtomatlashtirish uchun. Game Development: Pygame kabi kutubxonalar yordamida. Python Muhiti va O\u2018rnatish: [!NOTE] Python dasturlash tilida dasturlashni boshlash uchun sizga Python interpretatorini kompyuteringizga o\u2018rnatish kerak bo\u2018ladi. Pythonning rasmiy veb-saytida Pythonning oxirgi versiyasini yuklab olish mumkin. Shuningdek, muhitni boshqarish va kod yozish uchun turli vositalar va muharrirlar mavjud. Python O\u2018rnatilishi: Windows 1. Pythonni yuklab olish: - Pythonni rasmiy web-saytiga kiring. - Downloads bo\u2018limiga o\u2018ting va Windows uchun oxirgi barqaror versiyasini yuklab oling. ![alt text](images/image.png) Pythonni o\u2018rnatish: Yuklab olingan .exe faylini ishga tushiring. Add Python to PATH katagiga belgi qo\u2018ying. Bu belgi Python'ni kompyuteringizdagi barcha joylarda ishlatishga imkon beradi. Install Now tugmasini bosing va o\u2018rnatishni yakunlang. Indikator to'lishini kutamiz. Setup was successfull muvaffaqiyatli o'rnatildi. O\u2018rnatishni tekshirish: Command Prompt yoki PowerShell ni oching. python --version yoki python -V buyrug\u2018ini kiriting. Bu sizga o\u2018rnatilgan Python versiyasini ko\u2018rsatadi. Hello, World! dasturini yozish. print(\"Hello World!\") AMALIYOT Python interpreterini o'rnatish. Hello, World! dasturini yozish va ishga tushirish. print() funksiyasi yordamida turli xabarlarni chiqarish.","title":"What is Python"},{"location":"python/what-is-python/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/what-is-python/#what-is-python","text":"\ud83d\udccc Python \u2014 bu yuqori darajadagi, umumiy maqsadli, interpreted dasturlash tili. U soddaligi, oson sintaksisi, o\u2018qilishi qulayligi bilan mashhur. \ud83d\udccc High-Level Programming Language : bu inson o\u2018qishi va tushunishi oson bo\u2018lgan dasturlash tili degani. Kompyuterlar past darajadagi tillarda ishlaydi (masalan: Assembly, Machine Code), ammo bu tillar inson uchun tushunish qiyin. \u2733\ufe0f Python esa odam tiliga yaqin bo\u2018lib yoziladi: print(\"Salom, dunyo!\") # Ekranga matn chiqarish \ud83d\udccc Bu buyruqni har kim tushunadi. Ammo past darajadagi tillarda xuddi shu ishni qilish juda murakkab bo\u2018ladi. \ud83d\udccc Yuqori darajadagi tillarning afzalliklari: Sintaksisi oddiy va oson O\u2018rganish va tushunish qulay Ko\u2018p platformalarda ishlaydi Kam kod bilan ko\u2018p ishni bajaradi \ud83d\udccc General-Purpose Programming Language : bu har xil dasturlarni yaratish uchun ishlatiladigan dasturlash tili. \u2733\ufe0f Python yordamida quyidagilarni qilish mumkin: \ud83c\udf10 Web dasturlar (Django, Flask) \ud83e\udd16 Sun'iy intellekt (AI, ML) \ud83d\udcca Ma\u2019lumotlar tahlili (Pandas, NumPy) \ud83d\udda5\ufe0f Desktop ilovalar \ud83d\udcf1 Mobil ilovalar (Kivy, BeeWare) \ud83c\udfae O\u2018yinlar (Pygame) \ud83e\uddea Ilmiy hisob-kitoblar \ud83d\udee0\ufe0f Avtomatlashtirish va skriptlar Tushuncha Ma'nosi Yuqori darajadagi Inson o\u2018qishi oson, sodda sintaksisga ega dasturlash tili Umumiy maqsadli Turli sohalarda foydalanish mumkin bo\u2018lgan dasturlash tili","title":"\ud83e\udde9 WHAT IS PYTHON?"},{"location":"python/what-is-python/#python-tarixi","text":"\u2733\ufe0f Python asoschisi: Guido van Rossum Guido van Rossum \u2014 Gollandiyalik dasturchi. 1980-yillarda CWI (Centrum Wiskunde & Informatica) \u2013 Gollandiyadagi ilmiy markazda ishlagan. U tilni soddaroq, tushunarli va o\u2018qilishi oson bo\u2018lishini istagan. Tilga \u201cPython\u201d deb nom berilishiga sabab esa u juda yoqtirgan \u201cMonty Python\u2019s Flying Circus\u201d nomli komedik TV dasturi edi.","title":"\u2705 PYTHON TARIXI"},{"location":"python/what-is-python/#python-tarixiy-bosqichlari","text":"","title":"\u2705 PYTHON TARIXIY BOSQICHLARI"},{"location":"python/what-is-python/#python-loyihasi-boshlanishi-1989-yil-dekabr","text":"\ud83d\udccc Guido dam olish vaqtida yangi til yozishga kirishadi. \ud83d\udccc Maqsadi: ABC dasturlash tilining (CWI tomonidan yaratilgan) soddaligi va foydaliligini yaxshilash. \ud83d\udccc Unga fayl va istalgan tizimga bog\u2018lanish (file handling & OS interfacing) imkoniyatlari qo\u2018shmoqchi bo\u2018ladi.","title":"\u2747\ufe0f PYTHON LOYIHASI BOSHLANISHI - 1989-YIL DEKABR"},{"location":"python/what-is-python/#python-10-1991-yil-20-fevral","text":"\u2733\ufe0f Python ilk rasmiy versiyasi: - Funksiya, shart operatorlari ( if , else , elif ) - while , for , break , continue operatorlari - Ma'lumot turlari: str , list , dict , tuple - exception handling (try-except) mavjud edi","title":"\u2747\ufe0f PYTHON 1.0 - 1991-YIL 20-FEVRAL"},{"location":"python/what-is-python/#python-20-2000-yil-16-dekabr","text":"\u2733\ufe0f Muhim yangiliklar: list comprehensions (ro\u2018yxatlar uchun qisqa yozuv) garbage collection (avtomatik xotira tozalash) Unicode qo\u2018llab-quvvatlash","title":"\u2747\ufe0f PYTHON 2.0 - 2000-YIL 16-DEKABR"},{"location":"python/what-is-python/#python-30-2008-yil-3-dekabr","text":"\ud83d\udccc Bu versiya to\u2018liq yangilangan, orqaga mos kelmaydigan versiya edi. \u2733\ufe0f Asosiy o\u2018zgarishlar: print endi funksiya bo\u2018ldi: print(\"Hello\") integer division endi aniq natija beradi: 5/2 = 2.5 Unicode to\u2018liq qo\u2018llab-quvvatlandi Yangi sintaksislar: with , f-string , type hints kiritildi","title":"\u2747\ufe0f PYTHON 3.0 - 2008-YIL 3-DEKABR"},{"location":"python/what-is-python/#python-versiyalari-jadvali","text":"Versiya Chiqqan sana Asosiy yangiliklar Python 1.0 1991-yil Birinchi rasmiy nashr Python 2.0 2000-yil Unicode, GC, List comprehensions Python 3.0 2008-yil Unicode, yangi sintaksis Python 3.5 2015-yil async/await , type hinting Python 3.6 2016-yil f-strings Python 3.9 2020-yil Yangi to\u2018plamlar funksiyalari Python 3.10 2021-yil match-case pattern matching Python 3.11 2022-yil Katta tezlik (50% gacha yaxshilangan) Python 3.12 2023-yil Yaxshilangan profiling, diagnostics Python 3.13 2024-yil (beta) Tezlik va sintaktik yaxshilanishlar","title":"\u2705 PYTHON VERSIYALARI JADVALI"},{"location":"python/what-is-python/#pythonning-asosiy-xususiyatlari","text":"\ud83d\udccc Oson yoziladi va tushuniladi - Python sintaksisi oddiy va inson tiliga o\u2018xshash. Shu sababli uni yangi o\u2018rganayotganlar tez tushunadi va kod yozishni oson o\u2018rganadi. \ud83d\udccc Qatorma-qator bajariladi - Python \u2014 interpreted til. Kodlar yuqoridan pastga qarab birma-bir bajariladi. Har bir qatordagi buyruq navbati bilan bajariladi. \ud83d\udccc Turli operatsion tizimlarda ishlaydi - Python dasturlari Windows, MacOS va Linux tizimlarida bir xil ishlaydi. Hech qanday alohida sozlashlarsiz ko\u2018p platformalarda foydalanish mumkin. \ud83d\udccc Ko\u2018plab tayyor kutubxonalar mavjud - Python juda katta kutubxonalar to\u2018plamiga ega. Ular yordamida murakkab matematik, grafik, internet, ma\u2019lumotlar bilan bog\u2018liq ishlar tez va oson bajariladi. \ud83d\udccc Obyektga yo\u2018naltirilgan dasturlash tili - Python yirik va murakkab dasturlarni modullarga bo\u2018lib yozishga imkon beradi. Bu dasturlarni boshqarishni va ularni rivojlantirishni osonlashtiradi. \ud83d\udccc Boshqa dasturlash tillari bilan birga ishlay oladi - Python boshqa tillar \u2014 masalan, C, C++, Java yoki HTML bilan integratsiya qilib ishlatilishi mumkin. Bu uni yanada kuchli va moslashuvchan qiladi.","title":"\u2705 PYTHONNING ASOSIY XUSUSIYATLARI"},{"location":"python/what-is-python/#python-qanday-ishlaydi","text":"Code Writing : Dastlab Python kodini .py fayl ko'rinishida yozasiz. Interpreter Runs : Python interpretatori ushbu kodni o\u2019qib, uni mashina tushunadigan baytlarga o\u2018zgartiradi. Bu jarayonda kod qatorma-qator tahlil qilinadi va ishlatiladi. Conversion to Bytecode : Kod bytecode ga o\u2018zgartiriladi, bu esa Python PVM da ishlaydi. bytecode \u2014 bu kompyuterga tushunarli bo\u2019lgan oraliq kod, lekin u hali ham yuqori darajali tildir. Python Virtual Machine (PVM) : bytecode PVM orqali ishlaydi, va bu virtual mashina dastur kodini to\u2018liq bajaradi. Bu jarayon kompyuteringiz operatsion tizimi orqali amalga oshiriladi. Output Generated : Kod bajarilishi bilan natijalar ekranga chiqariladi yoki kerakli hisob-kitoblar amalga oshiriladi.","title":"\u2705 PYTHON QANDAY ISHLAYDI"},{"location":"python/what-is-python/#pythonning-qollanish-sohalari","text":"Web Development: Django , Flask kabi freymvorklar orqali veb-saytlar va veb-ilovalar yaratish. Data Analysis and Scientific Computing: NumPy , pandas , SciPy , matplotlib kabi kutubxonalar yordamida. AI(Artificial Intelligence) and Machine Learning: TensorFlow , Keras , PyTorch kabi kutubxonalar yordamida. Automation and Scripting: Turli xil vazifalarni avtomatlashtirish uchun. Game Development: Pygame kabi kutubxonalar yordamida.","title":"Pythonning qo\u2018llanish sohalari:"},{"location":"python/what-is-python/#python-muhiti-va-ornatish","text":"[!NOTE] Python dasturlash tilida dasturlashni boshlash uchun sizga Python interpretatorini kompyuteringizga o\u2018rnatish kerak bo\u2018ladi. Pythonning rasmiy veb-saytida Pythonning oxirgi versiyasini yuklab olish mumkin. Shuningdek, muhitni boshqarish va kod yozish uchun turli vositalar va muharrirlar mavjud.","title":"Python Muhiti va O\u2018rnatish:"},{"location":"python/what-is-python/#python-ornatilishi","text":"Windows 1. Pythonni yuklab olish: - Pythonni rasmiy web-saytiga kiring. - Downloads bo\u2018limiga o\u2018ting va Windows uchun oxirgi barqaror versiyasini yuklab oling. ![alt text](images/image.png) Pythonni o\u2018rnatish: Yuklab olingan .exe faylini ishga tushiring. Add Python to PATH katagiga belgi qo\u2018ying. Bu belgi Python'ni kompyuteringizdagi barcha joylarda ishlatishga imkon beradi. Install Now tugmasini bosing va o\u2018rnatishni yakunlang. Indikator to'lishini kutamiz. Setup was successfull muvaffaqiyatli o'rnatildi. O\u2018rnatishni tekshirish: Command Prompt yoki PowerShell ni oching. python --version yoki python -V buyrug\u2018ini kiriting. Bu sizga o\u2018rnatilgan Python versiyasini ko\u2018rsatadi.","title":"Python O\u2018rnatilishi:"},{"location":"python/what-is-python/#hello-world-dasturini-yozish","text":"print(\"Hello World!\")","title":"Hello, World! dasturini yozish."},{"location":"python/what-is-python/#amaliyot","text":"Python interpreterini o'rnatish. Hello, World! dasturini yozish va ishga tushirish. print() funksiyasi yordamida turli xabarlarni chiqarish.","title":"AMALIYOT"},{"location":"python/while-loop/","text":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI \ud83e\udde9 10-DARS WHILE LOOP \ud83d\udccc while \u2014 bu tsikl operatori, ya\u2019ni biror shart True bo\u2018lganida kodni qayta-qayta bajaradi. Agar shart False bo\u2018lsa, while tsikli to\u2018xtaydi va keyingi kodga o\u2018tadi. # son degan o'zgaruvchiga 1 qiymatini beramiz son = 1 # while tsikli: son 5 dan kichik yoki teng bo\u2018lguncha davom etadi while son <= 5: # hozirgi son qiymatini ekranga chiqaramiz print(son) # son qiymatini 1 ga oshiramiz, shunda tsikl keyingi son bilan davom etadi son += 1 \ud83c\udfaf Foydalanuvchidan ma'lumot olish (stop deb yozmaguncha) # Foydalanuvchi kiritgan matnni saqlash uchun bo\u2018sh o\u2018zgaruvchi yaratamiz user_input = \"\" # while tsikli: foydalanuvchi 'stop' deb yozmaguncha davom etadi while user_input.lower() != \"stop\": # Foydalanuvchidan matn kiritishni so\u2018raymiz user_input = input(\"So'z kiriting (to\u2018xtatish uchun 'stop'): \") # Foydalanuvchi kiritgan so\u2018zni ekranga chiqaramiz print(f\"Siz '{user_input}' kiritdingiz\") \ud83c\udfaf Foydalanuvchi parolni to\u2018g\u2018ri kiritmaguncha bajariladi. # Foydalanuvchi kiritgan matnni saqlash uchun bo\u2018sh o\u2018zgaruvchi yaratamiz user_input = \"\" # while tsikli: foydalanuvchi 'stop' deb yozmaguncha davom etadi while user_input.lower() != \"stop\": # Foydalanuvchidan matn kiritishni so\u2018raymiz user_input = input(\"So'z kiriting (to\u2018xtatish uchun 'stop'): \") # Foydalanuvchi kiritgan so\u2018zni ekranga chiqaramiz print(f\"Siz '{user_input}' kiritdingiz\") \ud83c\udfaf Ro\u2018yxatda kerakli qiymatni topish (break bilan) # Mahsulotlar ro'yxatini yaratamiz products = [\"apple\", \"banana\", \"lemon\", \"melon\", \"grapes\"] # Indeksni 0 dan boshlaymiz i = 0 # Tsikl: indeks ro'yxat uzunligidan kichik bo\u2018lsa davom etadi while i < len(products): # Agar hozirgi element 'lemon' bo\u2018lsa if products[i] == \"lemon\": # 'lemon' topilganini ekranga chiqaramiz print(\"\u2705 'lemon' mahsuloti topildi!\") # Tsiklni to\u2018xtatamiz break # Indeksni 1 ga oshiramiz, keyingi elementga o\u2018tamiz i += 1 \ud83c\udfaf Manfiy va nol sonlarni tashlab ketish (continue bilan) # Sonlar ro'yxatini yaratamiz numbers = [-3, -1, 0, 2, 4, 6] # Indeksni 0 dan boshlaymiz i = 0 # Tsikl: indeks ro'yxat uzunligidan kichik bo\u2018lsa davom etadi while i < len(numbers): # Agar hozirgi son 0 yoki manfiy bo\u2018lsa if numbers[i] <= 0: # Indeksni 1 ga oshiramiz, keyingi songa o\u2018tamiz i += 1 # Ushbu davrani tashlab, tsikl boshiga qaytamiz continue # Agar son musbat bo\u2018lsa, uni ekranga chiqaramiz print(numbers[i]) # Indeksni 1 ga oshirib, keyingi elementga o\u2018tamiz i += 1 \ud83c\udfaf Foydalanuvchi login tizimi correct_username = \"admin\" # To\u2018g\u2018ri login correct_password = \"12345\" # To\u2018g\u2018ri parol login_attempts = 0 # Urinishlar soni while login_attempts < 3: # Faqat 3 marta urinib ko\u2018rish huquqi username = input(\"Login kiriting: \") # Login so\u2018rashi password = input(\"Parol kiriting: \") # Parol so\u2018rashi if username == correct_username and password == correct_password: print(\"\u2705 Xush kelibsiz, tizimga kirildi!\") break # To\u2018g\u2018ri kirilgan bo\u2018lsa, tsikl tugaydi else: print(\"\u274c Login yoki parol noto\u2018g\u2018ri.\") login_attempts += 1 # Urinishlar sonini oshirish if login_attempts == 3: # 3 marta noto\u2018g\u2018ri kirilgan bo\u2018lsa print(\"\ud83d\udeab Urinishlar tugadi, kirish bloklandi.\") \ud83c\udfaf Infinite Loop (Cheksiz tsikl) va undan himoyalanish \ud83d\udccc Har doim shart o\u2018zgaruvchisini yangilashni unutmang # num o'zgaruvchiga 1 qiymati beriladi num = 1 # Tsikl: num 5 dan kichik bo\u2018lsa davom etadi while num < 5: # num qiymatini chiqaradi print(num) # \u274c Indeks oshirilmayapti, shuning uchun num har doim 1 bo\u2018lib qoladi # num += 1 YO\u2018Q! => bu yerda indeksni oshirish yo\u2018q, shuning uchun bu tsikl hech qachon tugamaydi \u2705 AMALIYOT \u2705 1-topshiriq: Foydalanuvchi kiritgan natural son uchun 1 dan shu songacha bo\u2018lgan sonlar yig\u2018indisini while loop orqali hisoblang. \u2705 2-topshiriq: Quyidagi ro\u2018yxatda nechta elementda eng kamida 2 ta unli harf borligini aniqlang (while loopdan foydalaning): words = [\"apple\", \"sky\", \"queue\", \"book\", \"cry\"] \u2705 3-topshiriq: Ro\u2018yxatda eng katta va eng kichik sonning farqini while loop yordamida toping: numbers = [7, 12, -3, 8, 0, 15] \u2705 4-topshiriq: Foydalanuvchi 10 ta son kiritadi. While loop orqali faqat musbat va toq sonlarni yangi ro\u2018yxatga yozing. \u2705 5-topshiriq: Quyidagi ro\u2018yxatdagi har bir so\u2018zning birinchi va oxirgi harfini birlashtirib yangi ro\u2018yxat hosil qiling (while loop bilan): words = [\"python\", \"apple\", \"code\", \"loop\"] # natija: [\"pn\", \"ae\", \"ce\", \"lp\"] \u2705 6-topshiriq: Ro\u2018yxatdan faqat 3 ga va 5 ga bo\u2018linadigan sonlarni ajratib, ularning o\u2018rtacha qiymatini while loopda hisoblang: nums = [5, 9, 15, 20, 22, 30, 35] \u2705 7-topshiriq: Foydalanuvchi matn kiritadi. While loop yordamida matndagi raqamlarni topib, ularni son sifatida yig\u2018indisini hisoblang. Masalan: \"salom12dunyo3\" => natija: 15 \u2705 8-topshiriq: Berilgan ro\u2018yxatdan elementlarning indekslari juft bo\u2018lganlarini while loop bilan alohida ro\u2018yxatga chiqarib bering: fruits = [\"olma\", \"banan\", \"gilos\", \"anor\", \"nok\", \"shaftoli\"] \u2705 9-topshiriq: Ro\u2018yxatda ketma-ket 2 marta uchraydigan elementlarni while loop yordamida aniqlang: items = [1, 2, 2, 3, 4, 4, 4, 5] # natija: 2, 4 \u2705 10-topshiriq: Foydalanuvchi kiritgan matndan while loop yordamida faqat bosh harflarni ajratib, bitta string qilib chiqaring. Masalan: \"Salom DunYo\" => \"SDY\" \u2705 11-topshiriq: Quyidagi ro\u2018yxatdan palindrom (teskari o\u2018qilganda ham bir xil) so\u2018zlarni while loop bilan ajratib chiqaring: words = [\"anna\", \"python\", \"level\", \"loop\", \"radar\"] \u2705 12-topshiriq: While loop yordamida 100 dan kichik Fibonacci sonlarini ro\u2018yxatga yig\u2018ing. \u2705 13-topshiriq: Ro\u2018yxatda nechta elementda harflar soni raqamlar sonidan ko\u2018p ekanini while loop yordamida hisoblang: elements = [\"abc123\", \"hello\", \"42\", \"py2025\", \"test\"] \u2705 14-topshiriq: Ro\u2018yxatdagi sonlardan har birining raqamlari yig\u2018indisini while loop bilan hisoblab, yangi ro\u2018yxatga joylang: nums = [12, 305, 47, 88] # natija: [3, 8, 11, 16] \u2705 15-topshiriq: Ro\u2018yxatdagi elementlardan faqat birinchi harfi har doim katta, qolganlari kichik bo\u2018lgan yangi ro\u2018yxatni while loop orqali yarating: names = [\"aNVAR\", \"mUROD\", \"dILSHOD\"] # natija: [\"Anvar\", \"Murod\", \"Dilshod\"]","title":"While Loop"},{"location":"python/while-loop/#python-dasturlash-asoslari","text":"","title":"\ud83d\udc0d PYTHON DASTURLASH ASOSLARI"},{"location":"python/while-loop/#10-dars-while-loop","text":"\ud83d\udccc while \u2014 bu tsikl operatori, ya\u2019ni biror shart True bo\u2018lganida kodni qayta-qayta bajaradi. Agar shart False bo\u2018lsa, while tsikli to\u2018xtaydi va keyingi kodga o\u2018tadi. # son degan o'zgaruvchiga 1 qiymatini beramiz son = 1 # while tsikli: son 5 dan kichik yoki teng bo\u2018lguncha davom etadi while son <= 5: # hozirgi son qiymatini ekranga chiqaramiz print(son) # son qiymatini 1 ga oshiramiz, shunda tsikl keyingi son bilan davom etadi son += 1 \ud83c\udfaf Foydalanuvchidan ma'lumot olish (stop deb yozmaguncha) # Foydalanuvchi kiritgan matnni saqlash uchun bo\u2018sh o\u2018zgaruvchi yaratamiz user_input = \"\" # while tsikli: foydalanuvchi 'stop' deb yozmaguncha davom etadi while user_input.lower() != \"stop\": # Foydalanuvchidan matn kiritishni so\u2018raymiz user_input = input(\"So'z kiriting (to\u2018xtatish uchun 'stop'): \") # Foydalanuvchi kiritgan so\u2018zni ekranga chiqaramiz print(f\"Siz '{user_input}' kiritdingiz\") \ud83c\udfaf Foydalanuvchi parolni to\u2018g\u2018ri kiritmaguncha bajariladi. # Foydalanuvchi kiritgan matnni saqlash uchun bo\u2018sh o\u2018zgaruvchi yaratamiz user_input = \"\" # while tsikli: foydalanuvchi 'stop' deb yozmaguncha davom etadi while user_input.lower() != \"stop\": # Foydalanuvchidan matn kiritishni so\u2018raymiz user_input = input(\"So'z kiriting (to\u2018xtatish uchun 'stop'): \") # Foydalanuvchi kiritgan so\u2018zni ekranga chiqaramiz print(f\"Siz '{user_input}' kiritdingiz\") \ud83c\udfaf Ro\u2018yxatda kerakli qiymatni topish (break bilan) # Mahsulotlar ro'yxatini yaratamiz products = [\"apple\", \"banana\", \"lemon\", \"melon\", \"grapes\"] # Indeksni 0 dan boshlaymiz i = 0 # Tsikl: indeks ro'yxat uzunligidan kichik bo\u2018lsa davom etadi while i < len(products): # Agar hozirgi element 'lemon' bo\u2018lsa if products[i] == \"lemon\": # 'lemon' topilganini ekranga chiqaramiz print(\"\u2705 'lemon' mahsuloti topildi!\") # Tsiklni to\u2018xtatamiz break # Indeksni 1 ga oshiramiz, keyingi elementga o\u2018tamiz i += 1 \ud83c\udfaf Manfiy va nol sonlarni tashlab ketish (continue bilan) # Sonlar ro'yxatini yaratamiz numbers = [-3, -1, 0, 2, 4, 6] # Indeksni 0 dan boshlaymiz i = 0 # Tsikl: indeks ro'yxat uzunligidan kichik bo\u2018lsa davom etadi while i < len(numbers): # Agar hozirgi son 0 yoki manfiy bo\u2018lsa if numbers[i] <= 0: # Indeksni 1 ga oshiramiz, keyingi songa o\u2018tamiz i += 1 # Ushbu davrani tashlab, tsikl boshiga qaytamiz continue # Agar son musbat bo\u2018lsa, uni ekranga chiqaramiz print(numbers[i]) # Indeksni 1 ga oshirib, keyingi elementga o\u2018tamiz i += 1 \ud83c\udfaf Foydalanuvchi login tizimi correct_username = \"admin\" # To\u2018g\u2018ri login correct_password = \"12345\" # To\u2018g\u2018ri parol login_attempts = 0 # Urinishlar soni while login_attempts < 3: # Faqat 3 marta urinib ko\u2018rish huquqi username = input(\"Login kiriting: \") # Login so\u2018rashi password = input(\"Parol kiriting: \") # Parol so\u2018rashi if username == correct_username and password == correct_password: print(\"\u2705 Xush kelibsiz, tizimga kirildi!\") break # To\u2018g\u2018ri kirilgan bo\u2018lsa, tsikl tugaydi else: print(\"\u274c Login yoki parol noto\u2018g\u2018ri.\") login_attempts += 1 # Urinishlar sonini oshirish if login_attempts == 3: # 3 marta noto\u2018g\u2018ri kirilgan bo\u2018lsa print(\"\ud83d\udeab Urinishlar tugadi, kirish bloklandi.\") \ud83c\udfaf Infinite Loop (Cheksiz tsikl) va undan himoyalanish \ud83d\udccc Har doim shart o\u2018zgaruvchisini yangilashni unutmang # num o'zgaruvchiga 1 qiymati beriladi num = 1 # Tsikl: num 5 dan kichik bo\u2018lsa davom etadi while num < 5: # num qiymatini chiqaradi print(num) # \u274c Indeks oshirilmayapti, shuning uchun num har doim 1 bo\u2018lib qoladi # num += 1 YO\u2018Q! => bu yerda indeksni oshirish yo\u2018q, shuning uchun bu tsikl hech qachon tugamaydi","title":"\ud83e\udde9 10-DARS WHILE LOOP"},{"location":"python/while-loop/#amaliyot","text":"","title":"\u2705 AMALIYOT"},{"location":"python/while-loop/#1-topshiriq","text":"Foydalanuvchi kiritgan natural son uchun 1 dan shu songacha bo\u2018lgan sonlar yig\u2018indisini while loop orqali hisoblang.","title":"\u2705 1-topshiriq:"},{"location":"python/while-loop/#2-topshiriq","text":"Quyidagi ro\u2018yxatda nechta elementda eng kamida 2 ta unli harf borligini aniqlang (while loopdan foydalaning): words = [\"apple\", \"sky\", \"queue\", \"book\", \"cry\"]","title":"\u2705 2-topshiriq:"},{"location":"python/while-loop/#3-topshiriq","text":"Ro\u2018yxatda eng katta va eng kichik sonning farqini while loop yordamida toping: numbers = [7, 12, -3, 8, 0, 15]","title":"\u2705 3-topshiriq:"},{"location":"python/while-loop/#4-topshiriq","text":"Foydalanuvchi 10 ta son kiritadi. While loop orqali faqat musbat va toq sonlarni yangi ro\u2018yxatga yozing.","title":"\u2705 4-topshiriq:"},{"location":"python/while-loop/#5-topshiriq","text":"Quyidagi ro\u2018yxatdagi har bir so\u2018zning birinchi va oxirgi harfini birlashtirib yangi ro\u2018yxat hosil qiling (while loop bilan): words = [\"python\", \"apple\", \"code\", \"loop\"] # natija: [\"pn\", \"ae\", \"ce\", \"lp\"]","title":"\u2705 5-topshiriq:"},{"location":"python/while-loop/#6-topshiriq","text":"Ro\u2018yxatdan faqat 3 ga va 5 ga bo\u2018linadigan sonlarni ajratib, ularning o\u2018rtacha qiymatini while loopda hisoblang: nums = [5, 9, 15, 20, 22, 30, 35]","title":"\u2705 6-topshiriq:"},{"location":"python/while-loop/#7-topshiriq","text":"Foydalanuvchi matn kiritadi. While loop yordamida matndagi raqamlarni topib, ularni son sifatida yig\u2018indisini hisoblang. Masalan: \"salom12dunyo3\" => natija: 15","title":"\u2705 7-topshiriq:"},{"location":"python/while-loop/#8-topshiriq","text":"Berilgan ro\u2018yxatdan elementlarning indekslari juft bo\u2018lganlarini while loop bilan alohida ro\u2018yxatga chiqarib bering: fruits = [\"olma\", \"banan\", \"gilos\", \"anor\", \"nok\", \"shaftoli\"]","title":"\u2705 8-topshiriq:"},{"location":"python/while-loop/#9-topshiriq","text":"Ro\u2018yxatda ketma-ket 2 marta uchraydigan elementlarni while loop yordamida aniqlang: items = [1, 2, 2, 3, 4, 4, 4, 5] # natija: 2, 4","title":"\u2705 9-topshiriq:"},{"location":"python/while-loop/#10-topshiriq","text":"Foydalanuvchi kiritgan matndan while loop yordamida faqat bosh harflarni ajratib, bitta string qilib chiqaring. Masalan: \"Salom DunYo\" => \"SDY\"","title":"\u2705 10-topshiriq:"},{"location":"python/while-loop/#11-topshiriq","text":"Quyidagi ro\u2018yxatdan palindrom (teskari o\u2018qilganda ham bir xil) so\u2018zlarni while loop bilan ajratib chiqaring: words = [\"anna\", \"python\", \"level\", \"loop\", \"radar\"]","title":"\u2705 11-topshiriq:"},{"location":"python/while-loop/#12-topshiriq","text":"While loop yordamida 100 dan kichik Fibonacci sonlarini ro\u2018yxatga yig\u2018ing.","title":"\u2705 12-topshiriq:"},{"location":"python/while-loop/#13-topshiriq","text":"Ro\u2018yxatda nechta elementda harflar soni raqamlar sonidan ko\u2018p ekanini while loop yordamida hisoblang: elements = [\"abc123\", \"hello\", \"42\", \"py2025\", \"test\"]","title":"\u2705 13-topshiriq:"},{"location":"python/while-loop/#14-topshiriq","text":"Ro\u2018yxatdagi sonlardan har birining raqamlari yig\u2018indisini while loop bilan hisoblab, yangi ro\u2018yxatga joylang: nums = [12, 305, 47, 88] # natija: [3, 8, 11, 16]","title":"\u2705 14-topshiriq:"},{"location":"python/while-loop/#15-topshiriq","text":"Ro\u2018yxatdagi elementlardan faqat birinchi harfi har doim katta, qolganlari kichik bo\u2018lgan yangi ro\u2018yxatni while loop orqali yarating: names = [\"aNVAR\", \"mUROD\", \"dILSHOD\"] # natija: [\"Anvar\", \"Murod\", \"Dilshod\"]","title":"\u2705 15-topshiriq:"}]}